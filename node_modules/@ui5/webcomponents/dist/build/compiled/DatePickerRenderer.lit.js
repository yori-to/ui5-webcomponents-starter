
/* eslint no-unused-vars: 0 */
import ifDefined from '@ui5/webcomponents-base/src/renderer/ifDefined.js';
import { html, svg, repeat } from '@ui5/webcomponents-base/src/renderer/LitRenderer.js';
const DatePickerLitRenderer = {};
const block0 = (context) => { return html`<div 	id="${ifDefined(context.ctr._id)}"	data-sap-ui="${ifDefined(context.ctr._id)}"	?aria-hidden="${ifDefined(context.ariaHidden)}"		class="${ifDefined(context.classes.main)}"		style="${ifDefined(context.styles.main)}"><!-- INPUT --><ui5-input			id="${ifDefined(context.ctr._id)}-inner"			placeholder="${ifDefined(context.ctr._input.placeholder)}"			type="${ifDefined(context.ctr._input.type)}"			value="${ifDefined(context.ctr.value)}"			?disabled="${ifDefined(context.ctr.disabled)}"			?readonly="${ifDefined(context.ctr.readonly)}"			value-state="${ifDefined(context.ctr.valueState)}"			@ui5-change="${ifDefined(context.ctr._input.onChange)}"			@ui5-input="${ifDefined(context.ctr._input.onLiveChange)}"			data-sap-focus-ref	>		${ context.showIcon ? block1(context) : undefined }</ui5-input><!-- POPOVER --><ui5-popover			id="${ifDefined(context.ctr._id)}-popover"			allow-target-overlap="${ifDefined(context.ctr._popover.allowTargetOverlap)}"			placement-type="${ifDefined(context.ctr._popover.placementType)}"			hide-header="${ifDefined(context.ctr._popover.hideHeader)}"			hide-arrow="${ifDefined(context.ctr._popover.hideArrow)}"			horizontal-align="${ifDefined(context.ctr._popover.horizontalAlign)}"			stay-open-on-scroll="${ifDefined(context.ctr._popover.stayOpenOnScroll)}"			.customClasses="${ifDefined(context.ctr._popover._customClasses)}"			@ui5-afterClose="${ifDefined(context.ctr._popover.afterClose)}"			@ui5-afterOpen="${ifDefined(context.ctr._popover.afterOpen)}"	><ui5-calendar				id="${ifDefined(context.ctr._id)}-calendar"				primary-calendar-type="${ifDefined(context.ctr._calendar.primaryCalendarType)}"				format-pattern="${ifDefined(context.ctr._calendar.formatPattern)}"				timestamp="${ifDefined(context.ctr._calendar.timestamp)}"				.selectedDates="${ifDefined(context.ctr._calendar.selectedDates)}"				@ui5-selectedDatesChange="${ifDefined(context.ctr._calendar.onSelectedDatesChange)}"		></ui5-calendar></ui5-popover><slot name="formSupport"></slot></div>`; };
const block1 = (context) => { return html`<ui5-icon				slot="icon"				src="${ifDefined(context.ctr._input.icon.src)}"				class="${ifDefined(context.classes.icon)}"				tabindex="-1"			></ui5-icon>		`; };
const renderMe = block0;
DatePickerLitRenderer.render = renderMe;
export default DatePickerLitRenderer;