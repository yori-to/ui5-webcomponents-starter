import Log from '../../base/Log.js';
var XHRINTERCEPTOR = 'XHRInterceptor';
var mRegistry = Object.create(null);
var mOverrides = Object.create(null);
var mXHRFunctions = Object.create(null);
function createOverride(sXHRMethod, fnCallback) {
    mOverrides[sXHRMethod] = [];
    mXHRFunctions[sXHRMethod] = window.XMLHttpRequest.prototype[sXHRMethod];
    window.XMLHttpRequest.prototype[sXHRMethod] = function () {
        var oArgs = arguments;
        mXHRFunctions[sXHRMethod].apply(this, oArgs);
        mOverrides[sXHRMethod].forEach(function (fnCallback) {
            fnCallback.apply(this, oArgs);
        }.bind(this));
    };
}
function storeFunction(sName, sXHRMethod, fnCallback) {
    mRegistry[sName] = mRegistry[sName] || {};
    var fnOldFunction = mRegistry[sName][sXHRMethod];
    if (fnOldFunction) {
        var iIndex = mOverrides[sXHRMethod].indexOf(fnOldFunction);
        mOverrides[sXHRMethod][iIndex] = fnCallback;
    } else {
        mRegistry[sName][sXHRMethod] = fnCallback;
        mOverrides[sXHRMethod].push(fnCallback);
    }
}
var oXHRInterceptor = {
    register: function (sName, sXHRMethod, fnCallback) {
        Log.debug('Register \'' + sName + '\' for XHR function \'' + sXHRMethod + '\'', XHRINTERCEPTOR);
        if (!mOverrides[sXHRMethod]) {
            createOverride(sXHRMethod, fnCallback);
        }
        storeFunction(sName, sXHRMethod, fnCallback);
    },
    unregister: function (sName, sXHRMethod) {
        var bRemove = this.isRegistered(sName, sXHRMethod);
        if (bRemove) {
            mOverrides[sXHRMethod] = mOverrides[sXHRMethod].filter(function (fnCallback) {
                return fnCallback !== mRegistry[sName][sXHRMethod];
            });
            delete mRegistry[sName][sXHRMethod];
            if (Object.keys(mRegistry[sName]).length === 0) {
                delete mRegistry[sName];
            }
        }
        Log.debug('Unregister \'' + sName + '\' for XHR function \'' + sXHRMethod + (bRemove ? '\'' : '\' failed'), XHRINTERCEPTOR);
        return bRemove;
    },
    isRegistered: function (sName, sXHRMethod) {
        return mRegistry[sName] && mRegistry[sName][sXHRMethod];
    }
};
export default oXHRInterceptor;