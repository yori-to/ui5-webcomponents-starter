import Measurement from '../Measurement.js';
import XHRInterceptor from '../XHRInterceptor.js';
import now from '../../../base/util/now.js';
import Log from '../../../base/Log.js';
import URI from '../../thirdparty/URI.js';
var HOST = window.location.host, INTERACTION = 'INTERACTION', aInteractions = [], oPendingInteraction = createMeasurement();
function isCORSRequest(sUrl) {
    var sHost = new URI(sUrl).host();
    return sHost && sHost !== HOST;
}
function createMeasurement(iTime) {
    return {
        event: 'startup',
        trigger: 'undetermined',
        component: 'undetermined',
        appVersion: 'undetermined',
        start: iTime || window.performance.timing.fetchStart,
        end: 0,
        navigation: 0,
        roundtrip: 0,
        processing: 0,
        duration: 0,
        requests: [],
        measurements: [],
        sapStatistics: [],
        requestTime: 0,
        networkTime: 0,
        bytesSent: 0,
        bytesReceived: 0,
        requestCompression: undefined,
        busyDuration: 0
    };
}
function isCompleteMeasurement(oMeasurement) {
    if (oMeasurement.start > oPendingInteraction.start && oMeasurement.end < oPendingInteraction.end) {
        return oMeasurement;
    }
}
function isValidRoundtrip(oRequestTiming) {
    var bComplete, bEmpty, bCached;
    bComplete = oRequestTiming.startTime > 0 && oRequestTiming.startTime <= oRequestTiming.requestStart && oRequestTiming.requestStart <= oRequestTiming.responseEnd;
    if (oRequestTiming.encodedBodySize !== undefined && oRequestTiming.transferSize !== undefined) {
        bEmpty = oRequestTiming.encodedBodySize === 0;
        bCached = oRequestTiming.transferSize < oRequestTiming.encodedBodySize;
    }
    return bComplete && !bEmpty && !bCached;
}
function aggregateRequestTiming(oRequest) {
    this.end = oRequest.responseEnd > this.end ? oRequest.responseEnd : this.end;
    oPendingInteraction.requestTime += oRequest.responseEnd - oRequest.startTime;
    if (this.roundtripHigherLimit <= oRequest.startTime) {
        oPendingInteraction.navigation += this.navigationHigherLimit - this.navigationLowerLimit;
        oPendingInteraction.roundtrip += this.roundtripHigherLimit - this.roundtripLowerLimit;
        this.navigationLowerLimit = oRequest.startTime;
        this.roundtripLowerLimit = oRequest.startTime;
    }
    if (oRequest.responseEnd > this.roundtripHigherLimit) {
        this.roundtripHigherLimit = oRequest.responseEnd;
    }
    if (oRequest.requestStart > this.navigationHigherLimit) {
        this.navigationHigherLimit = oRequest.requestStart;
    }
}
function aggregateRequestTimings(aRequests) {
    var oTimings = {
        start: aRequests[0].startTime,
        end: aRequests[0].responseEnd,
        navigationLowerLimit: aRequests[0].startTime,
        navigationHigherLimit: aRequests[0].requestStart,
        roundtripLowerLimit: aRequests[0].startTime,
        roundtripHigherLimit: aRequests[0].responseEnd
    };
    aRequests.forEach(aggregateRequestTiming, oTimings);
    oPendingInteraction.navigation += oTimings.navigationHigherLimit - oTimings.navigationLowerLimit;
    oPendingInteraction.roundtrip += oTimings.roundtripHigherLimit - oTimings.roundtripLowerLimit;
    if (oPendingInteraction.networkTime) {
        var iTotalNetworkTime = oPendingInteraction.requestTime - oPendingInteraction.networkTime;
        oPendingInteraction.networkTime = iTotalNetworkTime / aRequests.length;
    } else {
        oPendingInteraction.networkTime = 0;
    }
    if (oPendingInteraction.processing === 0) {
        var iRelativeStart = oPendingInteraction.start - window.performance.timing.fetchStart;
        oPendingInteraction.duration = oTimings.end - iRelativeStart;
        oPendingInteraction.processing = oTimings.start - iRelativeStart;
    }
}
function finalizeInteraction(iTime) {
    if (oPendingInteraction) {
        oPendingInteraction.end = iTime;
        oPendingInteraction.duration = oPendingInteraction.processing;
        oPendingInteraction.requests = window.performance.getEntriesByType('resource');
        oPendingInteraction.completeRoundtrips = 0;
        oPendingInteraction.measurements = Measurement.filterMeasurements(isCompleteMeasurement, true);
        var aCompleteRoundtripTimings = oPendingInteraction.requests.filter(isValidRoundtrip);
        if (aCompleteRoundtripTimings.length > 0) {
            aggregateRequestTimings(aCompleteRoundtripTimings);
        }
        oPendingInteraction.completeRoundtrips = aCompleteRoundtripTimings.length;
        var iProcessing = oPendingInteraction.processing - oPendingInteraction.navigation - oPendingInteraction.roundtrip;
        oPendingInteraction.processing = iProcessing > -1 ? iProcessing : 0;
        oPendingInteraction.completed = true;
        Object.freeze(oPendingInteraction);
        aInteractions.push(oPendingInteraction);
        Log.info('Interaction step finished: trigger: ' + oPendingInteraction.trigger + '; duration: ' + oPendingInteraction.duration + '; requests: ' + oPendingInteraction.requests.length, 'Interaction.js');
        oPendingInteraction = null;
    }
}
function createOwnerComponentInfo(oSrcElement) {
    var sId, sVersion;
    if (oSrcElement) {
        var Component, oComponent;
        Component = sap.ui.require('sap/ui/core/Component');
        while (Component && oSrcElement && oSrcElement.getParent) {
            oComponent = Component.getOwnerComponentFor(oSrcElement);
            if (oComponent || oSrcElement instanceof Component) {
                oComponent = oComponent || oSrcElement;
                var oApp = oComponent.getManifestEntry('sap.app');
                sId = oApp && oApp.id || oComponent.getMetadata().getName();
                sVersion = oApp && oApp.applicationVersion && oApp.applicationVersion.version;
            }
            oSrcElement = oSrcElement.getParent();
        }
    }
    return {
        id: sId ? sId : 'undetermined',
        version: sVersion ? sVersion : ''
    };
}
var bInteractionActive = false, oCurrentBrowserEvent, iInteractionStepTimer, iScrollEventDelayId = 0;
function registerXHROverrides() {
    XHRInterceptor.register(INTERACTION, 'send', function () {
        if (this.pendingInteraction) {
            this.pendingInteraction.bytesSent += arguments[0] ? arguments[0].length : 0;
        }
    });
    XHRInterceptor.register(INTERACTION, 'setRequestHeader', function (sHeader, sValue) {
        if (!this.requestHeaderLength) {
            this.requestHeaderLength = 0;
        }
        this.requestHeaderLength += (sHeader + '').length + (sValue + '').length;
    });
    XHRInterceptor.register(INTERACTION, 'open', function () {
        if (!isCORSRequest(arguments[1])) {
            this.addEventListener('readystatechange', handleResponse.bind(this));
        }
        this.pendingInteraction = oPendingInteraction;
    });
}
function handleResponse() {
    if (this.readyState === 4 && this.pendingInteraction && !this.pendingInteraction.completed) {
        var sContentLength = this.getResponseHeader('content-length'), bCompressed = this.getResponseHeader('content-encoding') === 'gzip', sFesrec = this.getResponseHeader('sap-perf-fesrec');
        this.pendingInteraction.bytesReceived += sContentLength ? parseInt(sContentLength) : 0;
        this.pendingInteraction.bytesReceived += this.getAllResponseHeaders().length;
        this.pendingInteraction.bytesSent += this.requestHeaderLength || 0;
        this.pendingInteraction.requestCompression = bCompressed && this.pendingInteraction.requestCompression !== false;
        this.pendingInteraction.networkTime += sFesrec ? Math.round(parseFloat(sFesrec, 10) / 1000) : 0;
        var sSapStatistics = this.getResponseHeader('sap-statistics');
        if (sSapStatistics) {
            var aTimings = window.performance.getEntriesByType('resource');
            this.pendingInteraction.sapStatistics.push({
                url: this.responseURL,
                statistics: sSapStatistics,
                timing: aTimings ? aTimings[aTimings.length - 1] : undefined
            });
        }
        delete this.requestHeaderLength;
        delete this.pendingInteraction;
    }
}
var Interaction = {
    getAll: function (bFinalize) {
        if (bFinalize) {
            Interaction.end(true);
        }
        return aInteractions;
    },
    filter: function (fnFilter) {
        var aFilteredInteractions = [];
        if (fnFilter) {
            for (var i = 0, l = aInteractions.length; i < l; i++) {
                if (fnFilter(aInteractions[i])) {
                    aFilteredInteractions.push(aInteractions[i]);
                }
            }
        }
        return aFilteredInteractions;
    },
    getPending: function () {
        return oPendingInteraction;
    },
    clear: function () {
        aInteractions = [];
    },
    start: function (sType, oSrcElement) {
        var iTime = now();
        if (oPendingInteraction) {
            finalizeInteraction(iTime);
        }
        if (window.performance.clearResourceTimings) {
            window.performance.clearResourceTimings();
        }
        var oComponentInfo = createOwnerComponentInfo(oSrcElement);
        oPendingInteraction = createMeasurement(iTime);
        oPendingInteraction.event = sType;
        oPendingInteraction.component = oComponentInfo.id;
        oPendingInteraction.appVersion = oComponentInfo.version;
        oPendingInteraction.start = iTime;
        if (oSrcElement && oSrcElement.getId) {
            oPendingInteraction.trigger = oSrcElement.getId();
        }
        Log.info('Interaction step started: trigger: ' + oPendingInteraction.trigger + '; type: ' + oPendingInteraction.event, 'Interaction.js');
    },
    end: function (bForce) {
        if (oPendingInteraction) {
            if (!bForce) {
                oPendingInteraction.processing = now() - oPendingInteraction.start;
            } else {
                finalizeInteraction(now());
            }
        }
    },
    getActive: function () {
        return bInteractionActive;
    },
    setActive: function (bActive) {
        if (bActive && !bInteractionActive) {
            registerXHROverrides();
        }
        bInteractionActive = bActive;
    },
    notifyStepStart: function (oElement, bForce) {
        if (bInteractionActive) {
            if (oCurrentBrowserEvent || bForce) {
                var sType;
                if (bForce) {
                    sType = 'startup';
                } else if (oCurrentBrowserEvent.originalEvent) {
                    sType = oCurrentBrowserEvent.originalEvent.type;
                } else {
                    sType = oCurrentBrowserEvent.type;
                }
                Interaction.start(sType, oElement);
                var aInteraction = Interaction.getAll();
                var oFinshedInteraction = aInteraction[aInteraction.length - 1];
                var oPI = Interaction.getPending();
                oPendingInteraction = oPI ? oPI : oPendingInteraction;
                if (Interaction.onInteractionFinished && oFinshedInteraction) {
                    Interaction.onInteractionFinished(oFinshedInteraction, bForce);
                }
                oCurrentBrowserEvent = null;
            }
        }
    },
    notifyStepEnd: function () {
        if (bInteractionActive) {
            if (iInteractionStepTimer) {
                clearTimeout(iInteractionStepTimer);
            }
            iInteractionStepTimer = setTimeout(Interaction.end, 1);
        }
    },
    notifyEventStart: function (oEvent) {
        oCurrentBrowserEvent = bInteractionActive ? oEvent : null;
    },
    notifyScrollEvent: function (oEvent) {
        if (bInteractionActive) {
            if (!iScrollEventDelayId) {
                Interaction.notifyEventStart(oEvent);
            } else {
                clearTimeout(iScrollEventDelayId);
            }
            iScrollEventDelayId = setTimeout(function () {
                Interaction.notifyStepStart();
                iScrollEventDelayId = 0;
            }, 250);
        }
    },
    notifyEventEnd: function () {
        if (oCurrentBrowserEvent) {
            if (oCurrentBrowserEvent.type.match(/^(mousedown|touchstart|keydown)$/)) {
                Interaction.end(true);
            }
        }
    },
    onInteractionFinished: null,
    setStepComponent: function (sComponentName) {
        if (bInteractionActive && oPendingInteraction && sComponentName && !oPendingInteraction.stepComponent) {
            oPendingInteraction.stepComponent = sComponentName;
        }
    },
    addBusyDuration: function (iDuration) {
        if (bInteractionActive && oPendingInteraction) {
            if (!oPendingInteraction.busyDuration) {
                oPendingInteraction.busyDuration = 0;
            }
            oPendingInteraction.busyDuration += iDuration;
        }
    }
};
export default Interaction;