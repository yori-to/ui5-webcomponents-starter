import Element from '../Element.js';
import library from '../library.js';
import Log from '../../../base/Log.js';
import './DragAndDrop.js';
var DragDropBase = Element.extend('sap.ui.core.dnd.DragDropBase', {
    metadata: {
        'abstract': true,
        library: 'sap.ui.core',
        properties: {
            groupName: {
                type: 'string',
                defaultValue: null,
                invalidate: false
            },
            enabled: {
                type: 'boolean',
                defaultValue: true
            }
        }
    }
});
DragDropBase.prototype.bIgnoreMetadataCheck = false;
DragDropBase.prototype.isDraggable = function (oControl) {
    return false;
};
DragDropBase.prototype.isDroppable = function (oControl, oEvent) {
    return false;
};
DragDropBase.prototype.checkMetadata = function (oControl, sAggregation, sRestriction) {
    if (this.bIgnoreMetadataCheck) {
        return true;
    }
    var oMetadata = oControl.getMetadata().getDragDropInfo(sAggregation);
    if (!oMetadata[sRestriction]) {
        Log.warning((sAggregation ? sAggregation + ' aggregation of ' : '') + oControl + ' is not configured to be ' + sRestriction);
        return false;
    }
    return true;
};
DragDropBase.prototype.setEnabled = function (bEnabled) {
    return this.setProperty('enabled', bEnabled, !this.isA('sap.ui.core.dnd.IDragInfo'));
};
DragDropBase.prototype.setProperty = function (sProperty, vValue, bSuppressInvalidate) {
    bSuppressInvalidate = bSuppressInvalidate || (this.getMetadata().getProperty(sProperty).appData || {}).invalidate === false;
    return Element.prototype.setProperty.call(this, sProperty, vValue, bSuppressInvalidate);
};
export default DragDropBase;