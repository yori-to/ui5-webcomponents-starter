import DragDropBase from './DragDropBase.js';
var DropInfo = DragDropBase.extend('sap.ui.core.dnd.DropInfo', {
    metadata: {
        library: 'sap.ui.core',
        interfaces: ['sap.ui.core.dnd.IDropInfo'],
        properties: {
            targetAggregation: {
                type: 'string',
                defaultValue: null,
                invalidate: false
            },
            dropEffect: {
                type: 'sap.ui.core.dnd.DropEffect',
                defaultValue: 'Move',
                invalidate: false
            },
            dropPosition: {
                type: 'sap.ui.core.dnd.DropPosition',
                defaultValue: 'On',
                invalidate: false
            },
            dropLayout: {
                type: 'sap.ui.core.dnd.DropLayout',
                defaultValue: 'Default',
                invalidate: false
            }
        },
        events: {
            dragEnter: { allowPreventDefault: true },
            dragOver: {},
            drop: {}
        }
    }
});
DropInfo.prototype.getDropTarget = function () {
    return this.getParent();
};
DropInfo.prototype.isDroppable = function (oControl, oEvent) {
    this.sTemporaryDropPosition = '';
    if (!this.getEnabled()) {
        return false;
    }
    var oDropTarget = this.getDropTarget();
    if (!oDropTarget) {
        return false;
    }
    var sTargetAggregation = this.getTargetAggregation();
    if (!this.checkMetadata(oDropTarget, sTargetAggregation, 'droppable')) {
        return false;
    }
    var sTargetAggregation = this.getTargetAggregation();
    if (oDropTarget === oControl && !sTargetAggregation) {
        return true;
    }
    if (oControl.getParent() === oDropTarget && sTargetAggregation === oControl.sParentAggregationName) {
        return true;
    }
    if (oEvent && sTargetAggregation && oDropTarget === oControl) {
        var oAggregationDomRef = oControl.getDomRefForSetting(sTargetAggregation);
        if (oAggregationDomRef && oAggregationDomRef != oEvent.target && oAggregationDomRef.contains(oEvent.target)) {
            oEvent.setMark('DragWithin', sTargetAggregation);
            this.sTemporaryDropPosition = 'On';
            return true;
        }
    }
    return false;
};
DropInfo.prototype.getDropPosition = function (bCheckTemporary) {
    if (bCheckTemporary && this.sTemporaryDropPosition) {
        return this.sTemporaryDropPosition;
    }
    return this.getProperty('dropPosition');
};
DropInfo.prototype.getDropLayout = function (bDetectDefault) {
    var sDropLayout = this.getProperty('dropLayout');
    if (!bDetectDefault || sDropLayout != 'Default') {
        return sDropLayout;
    }
    return this.getDropTarget().getMetadata().getDragDropInfo(this.getTargetAggregation()).layout;
};
DropInfo.prototype.fireDragEnter = function (oEvent) {
    if (!oEvent || !oEvent.dragSession) {
        return;
    }
    var oDragSession = oEvent.dragSession;
    return this.fireEvent('dragEnter', {
        dragSession: oEvent.dragSession,
        browserEvent: oEvent.originalEvent,
        target: oDragSession.getDropControl()
    }, true);
};
DropInfo.prototype.fireDragOver = function (oEvent) {
    if (!oEvent || !oEvent.dragSession) {
        return;
    }
    var oDragSession = oEvent.dragSession;
    return this.fireEvent('dragOver', {
        dragSession: oEvent.dragSession,
        browserEvent: oEvent.originalEvent,
        target: oDragSession.getDropControl(),
        dropPosition: oDragSession.getDropPosition()
    });
};
DropInfo.prototype.fireDrop = function (oEvent) {
    if (!oEvent || !oEvent.dragSession) {
        return;
    }
    var oDragSession = oEvent.dragSession;
    this.fireEvent('drop', {
        dragSession: oEvent.dragSession,
        browserEvent: oEvent.originalEvent,
        dropPosition: oDragSession.getDropPosition(),
        draggedControl: oDragSession.getDragControl(),
        droppedControl: oDragSession.getDropControl()
    });
};
export default DropInfo;