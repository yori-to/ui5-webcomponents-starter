import library from '../library.js';
import HashChanger from './HashChanger.js';
import Log from '../../../base/Log.js';
import URI from '../../thirdparty/URI.js';
import Device from '../../Device.js';
var HistoryDirection = library.routing.HistoryDirection;
var History = function (oHashChanger) {
    this._iHistoryLength = window.history.length;
    this.aHistory = [];
    this._bIsInitial = true;
    if (!Device.browser.msie) {
        var oState = window.history.state === null ? {} : window.history.state;
        if (typeof oState === 'object') {
            History._aStateHistory.push(window.location.hash);
            oState.sap = {};
            oState.sap.history = History._aStateHistory;
            window.history.replaceState(oState, window.document.title);
        } else {
            Log.debug('Unable to determine HistoryDirection as history.state is already set: ' + window.history.state, 'sap.ui.core.routing.History');
        }
    }
    if (!oHashChanger) {
        Log.error('sap.ui.core.routing.History constructor was called and it did not get a hashChanger as parameter');
    }
    this._setHashChanger(oHashChanger);
    this._reset();
};
History._aStateHistory = [];
History.prototype.destroy = function (sNewHash) {
    this._unRegisterHashChanger();
};
History.prototype.getDirection = function (sNewHash) {
    if (sNewHash !== undefined && this._bIsInitial) {
        return undefined;
    }
    if (sNewHash === undefined) {
        return this._sCurrentDirection;
    }
    return this._getDirection(sNewHash);
};
History.prototype.getPreviousHash = function () {
    return this.aHistory[this.iHistoryPosition - 1];
};
History.prototype._setHashChanger = function (oHashChanger) {
    if (this._oHashChanger) {
        this._unRegisterHashChanger();
    }
    this._oHashChanger = oHashChanger;
    this._mEventListeners = {};
    oHashChanger.getRelevantEventsInfo().forEach(function (oEventInfo) {
        var sEventName = oEventInfo.name, oParamMapping = oEventInfo.paramMapping || {}, fnListener = this._onHashChange.bind(this, oParamMapping);
        this._mEventListeners[sEventName] = fnListener;
        this._oHashChanger.attachEvent(sEventName, fnListener, this);
    }.bind(this));
    this._oHashChanger.attachEvent('hashReplaced', this._hashReplaced, this);
    this._oHashChanger.attachEvent('hashSet', this._hashSet, this);
};
History.prototype._unRegisterHashChanger = function () {
    if (this._mEventListeners) {
        var aEventNames = Object.keys(this._mEventListeners);
        aEventNames.forEach(function (sEventName) {
            this._oHashChanger.detachEvent(sEventName, this._mEventListeners[sEventName], this);
        }.bind(this));
        delete this._mEventListeners;
    }
    this._oHashChanger.detachEvent('hashReplaced', this._hashReplaced, this);
    this._oHashChanger.detachEvent('hashSet', this._hashSet, this);
    this._oHashChanger = null;
};
History.prototype._reset = function () {
    this.aHistory.length = 0;
    this.iHistoryPosition = 0;
    this._bUnknown = true;
    this.aHistory[0] = this._oHashChanger.getHash();
};
History.prototype._getDirection = function (sNewHash, bHistoryLengthIncreased, bCheckHashChangerEvents) {
    if (bCheckHashChangerEvents && this._oNextHash && this._oNextHash.sHash === sNewHash) {
        return HistoryDirection.NewEntry;
    }
    if (bHistoryLengthIncreased) {
        return HistoryDirection.NewEntry;
    }
    if (this._bUnknown) {
        return HistoryDirection.Unknown;
    }
    if (this.aHistory[this.iHistoryPosition + 1] === sNewHash && this.aHistory[this.iHistoryPosition - 1] === sNewHash) {
        return HistoryDirection.Unknown;
    }
    if (this.aHistory[this.iHistoryPosition - 1] === sNewHash) {
        return HistoryDirection.Backwards;
    }
    if (this.aHistory[this.iHistoryPosition + 1] === sNewHash) {
        return HistoryDirection.Forwards;
    }
    return HistoryDirection.Unknown;
};
History.prototype._getDirectionWithState = function (sHash) {
    var oState = window.history.state === null ? {} : window.history.state, bBackward, sDirection;
    if (typeof oState === 'object') {
        if (oState.sap === undefined) {
            History._aStateHistory.push(sHash);
            oState.sap = {};
            oState.sap.history = History._aStateHistory;
            history.replaceState(oState, document.title);
            sDirection = HistoryDirection.NewEntry;
        } else {
            bBackward = oState.sap.history.every(function (sURL, index) {
                return sURL === History._aStateHistory[index];
            });
            if (bBackward && oState.sap.history.length === History._aStateHistory.length) {
                sDirection = undefined;
            } else {
                sDirection = bBackward ? HistoryDirection.Backwards : HistoryDirection.Forwards;
                History._aStateHistory = oState.sap.history;
            }
        }
    } else {
        Log.debug('Unable to determine HistoryDirection as history.state is already set: ' + window.history.state, 'sap.ui.core.routing.History');
    }
    return sDirection;
};
History.prototype._onHashChange = function (oParamMapping, oEvent) {
    var sNewHashParamName = oParamMapping.newHash || 'newHash', sOldHashParamName = oParamMapping.oldHash || 'oldHash', sFullHashParamName = oParamMapping.fullHash || 'fullHash';
    this._hashChange(oEvent.getParameter(sNewHashParamName), oEvent.getParameter(sOldHashParamName), oEvent.getParameter(sFullHashParamName));
};
History.prototype._hashChange = function (sNewHash, sOldHash, sFullHash) {
    var actualHistoryLength = window.history.length, sDirection;
    if (this._oNextHash && this._oNextHash.bWasReplaced && this._oNextHash.sHash === sNewHash) {
        this.aHistory[this.iHistoryPosition] = sNewHash;
        if (sFullHash !== undefined && !Device.browser.msie && this === History.getInstance()) {
            History._aStateHistory[History._aStateHistory.length - 1] = sFullHash;
            window.history.replaceState({ sap: { history: History._aStateHistory } }, window.document.title);
        }
        this._oNextHash = null;
        if (!this._bIsInitial) {
            this._sCurrentDirection = HistoryDirection.Unknown;
        }
        return;
    }
    this._bIsInitial = false;
    if (sFullHash && !Device.browser.msie && this === History.getInstance()) {
        sDirection = this._getDirectionWithState(sFullHash);
    }
    if (!sDirection) {
        sDirection = this._getDirection(sNewHash, this._iHistoryLength < window.history.length, true);
    }
    this._sCurrentDirection = sDirection;
    this._iHistoryLength = actualHistoryLength;
    if (this._oNextHash) {
        this._oNextHash = null;
    }
    if (sDirection === HistoryDirection.Unknown) {
        this._reset();
        return;
    }
    this._bUnknown = false;
    if (sDirection === HistoryDirection.NewEntry) {
        if (this.iHistoryPosition + 1 < this.aHistory.length) {
            this.aHistory = this.aHistory.slice(0, this.iHistoryPosition + 1);
        }
        this.aHistory.push(sNewHash);
        this.iHistoryPosition += 1;
        return;
    }
    if (sDirection === HistoryDirection.Forwards) {
        this.iHistoryPosition++;
        return;
    }
    if (sDirection === HistoryDirection.Backwards) {
        this.iHistoryPosition--;
    }
};
History.prototype._hashSet = function (oEvent) {
    this._hashChangedByApp(oEvent.getParameter('sHash'), false);
};
History.prototype._hashReplaced = function (oEvent) {
    this._hashChangedByApp(oEvent.getParameter('sHash'), true);
};
History.prototype._hashChangedByApp = function (sNewHash, bWasReplaced) {
    this._oNextHash = {
        sHash: sNewHash,
        bWasReplaced: bWasReplaced
    };
};
var instance = new History(HashChanger.getInstance());
History.getInstance = function () {
    return instance;
};
export default History;