import HashChangerBase from './HashChangerBase.js';
import RouterHashChanger from './RouterHashChanger.js';
import hasher from '../../thirdparty/hasher.js';
import Log from '../../../base/Log.js';
import ObjectPath from '../../../base/util/ObjectPath.js';
var HashChanger = HashChangerBase.extend('sap.ui.core.routing.HashChanger', {
    constructor: function () {
        HashChangerBase.apply(this);
    }
});
HashChanger.prototype.init = function () {
    if (this._initialized) {
        Log.info('this HashChanger instance has already been initialized.');
        return false;
    }
    this._initialized = true;
    hasher.changed.add(this.fireHashChanged, this);
    if (!hasher.isActive()) {
        hasher.initialized.addOnce(this.fireHashChanged, this);
        hasher.init();
    } else {
        this.fireHashChanged(hasher.getHash());
    }
    return this._initialized;
};
HashChanger.prototype.fireHashChanged = function (sNewHash, sOldHash) {
    this.fireEvent('hashChanged', {
        newHash: sNewHash,
        oldHash: sOldHash
    });
};
HashChanger.prototype.createRouterHashChanger = function () {
    if (!this._oRouterHashChanger) {
        this._oRouterHashChanger = new RouterHashChanger({ parent: this });
        this._registerListenerToRelevantEvents();
        this._oRouterHashChanger.attachEvent('hashSet', this._onHashModified, this);
        this._oRouterHashChanger.attachEvent('hashReplaced', this._onHashModified, this);
    }
    return this._oRouterHashChanger;
};
HashChanger.prototype._registerListenerToRelevantEvents = function () {
    if (!this._mEventListeners) {
        this._mEventListeners = {};
        this.getRelevantEventsInfo().forEach(function (oEventInfo) {
            var sEventName = oEventInfo.name, fnListener = this._onHashChangedForRouterHashChanger.bind(this, oEventInfo);
            this._mEventListeners[sEventName] = fnListener;
            this.attachEvent(sEventName, fnListener, this);
        }.bind(this));
    }
};
HashChanger.prototype._deregisterListenerFromRelevantEvents = function () {
    if (this._mEventListeners) {
        var aEventNames = Object.keys(this._mEventListeners);
        aEventNames.forEach(function (sEventName) {
            this.detachEvent(sEventName, this._mEventListeners[sEventName], this);
        }.bind(this));
        delete this._mEventListeners;
    }
};
HashChanger.prototype._onHashChangedForRouterHashChanger = function (oEventInfo, oEvent) {
    if (this._oRouterHashChanger) {
        var oParamMapping = oEventInfo.paramMapping || {}, sParamName = oParamMapping['newHash'] || 'newHash', sNewHash = oEvent.getParameter(sParamName) || '', oParsedHash = this._parseHash(sNewHash);
        this._oRouterHashChanger.fireHashChanged(oParsedHash.hash, oParsedHash.subHashMap, !!oEventInfo.updateHashOnly);
    }
};
HashChanger.prototype._onHashModified = function (oEvent) {
    var sEventName = oEvent.getId(), sHash = oEvent.getParameter('hash'), sKey = oEvent.getParameter('key'), aDeletePrefix = oEvent.getParameter('deletePrefix');
    if (sEventName === 'hashSet') {
        this._setSubHash(sKey, sHash, aDeletePrefix);
    } else {
        this._replaceSubHash(sKey, sHash, aDeletePrefix);
    }
};
HashChanger.prototype._setSubHash = function (sKey, sSubHash, aChildPrefix) {
    var sHash = this._reconstructHash(sKey, sSubHash, aChildPrefix);
    this.setHash(sHash);
};
HashChanger.prototype._replaceSubHash = function (sKey, sSubHash, aChildPrefix) {
    var sHash = this._reconstructHash(sKey, sSubHash, aChildPrefix);
    this.replaceHash(sHash);
};
HashChanger.prototype._reconstructHash = function (sKey, sValue, aDeleteKeys) {
    var aParts = this.getHash().split('&/'), sTopHash = aParts.shift();
    if (sKey === undefined) {
        sTopHash = sValue + '';
    } else {
        var bFound = aParts.some(function (sPart, i, aParts) {
            if (sPart.startsWith(sKey)) {
                if (sValue) {
                    aParts[i] = sKey + '/' + sValue;
                } else {
                    aDeleteKeys.push(sKey);
                }
                return true;
            }
        });
        if (!bFound) {
            aParts.push(sKey + '/' + sValue);
        }
    }
    aParts = aParts.filter(function (sPart) {
        return !aDeleteKeys.some(function (sPrefix) {
            return sPart.startsWith(sPrefix);
        });
    });
    aParts.unshift(sTopHash);
    return aParts.join('&/');
};
HashChanger.prototype._parseHash = function (sHash) {
    var aParts = sHash.split('&/');
    return {
        hash: aParts.shift(),
        subHashMap: aParts.reduce(function (oMap, sPart) {
            var iSlashPos = sPart.indexOf('/');
            oMap[sPart.substring(0, iSlashPos)] = sPart.substring(iSlashPos + 1);
            return oMap;
        }, {})
    };
};
HashChanger.prototype.setHash = function (sHash) {
    HashChangerBase.prototype.setHash.apply(this, arguments);
    hasher.setHash(sHash);
};
HashChanger.prototype.replaceHash = function (sHash) {
    HashChangerBase.prototype.replaceHash.apply(this, arguments);
    hasher.replaceHash(sHash);
};
HashChanger.prototype.getHash = function () {
    return hasher.getHash();
};
HashChanger.prototype.getRelevantEventsInfo = function () {
    return [{ name: 'hashChanged' }];
};
HashChanger.prototype.destroy = function () {
    if (this._oRouterHashChanger) {
        this._deregisterListenerFromRelevantEvents();
        this._oRouterHashChanger.destroy();
        this._oRouterHashChanger = undefined;
    }
    delete this._initialized;
    hasher.changed.remove(this.fireHashChanged, this);
    HashChangerBase.prototype.destroy.apply(this, arguments);
};
HashChanger.prototype.deregisterRouterHashChanger = function () {
    this._deregisterListenerFromRelevantEvents();
    delete this._oRouterHashChanger;
};
(function () {
    var _oHashChanger = null;
    HashChanger.getInstance = function () {
        if (!_oHashChanger) {
            _oHashChanger = new HashChanger();
        }
        return _oHashChanger;
    };
    function extendHashChangerEvents(oHashChanger) {
        var sEventName, aExistingEventListeners, aNewEventListeners;
        for (sEventName in _oHashChanger.mEventRegistry) {
            if (_oHashChanger.mEventRegistry.hasOwnProperty(sEventName)) {
                aExistingEventListeners = _oHashChanger.mEventRegistry[sEventName];
                aNewEventListeners = oHashChanger.mEventRegistry[sEventName];
                if (aNewEventListeners) {
                    oHashChanger.mEventRegistry[sEventName] = aExistingEventListeners.concat(aNewEventListeners);
                } else {
                    oHashChanger.mEventRegistry[sEventName] = aExistingEventListeners;
                }
            }
        }
    }
    HashChanger.replaceHashChanger = function (oHashChanger) {
        if (_oHashChanger && oHashChanger) {
            if (_oHashChanger._oRouterHashChanger) {
                _oHashChanger._oRouterHashChanger.detachEvent('hashSet', _oHashChanger._onHashModified, _oHashChanger);
                _oHashChanger._oRouterHashChanger.detachEvent('hashReplaced', _oHashChanger._onHashModified, _oHashChanger);
                _oHashChanger._deregisterListenerFromRelevantEvents();
                oHashChanger._oRouterHashChanger = _oHashChanger._oRouterHashChanger;
                oHashChanger._oRouterHashChanger.parent = oHashChanger;
                delete _oHashChanger._oRouterHashChanger;
                oHashChanger._oRouterHashChanger.attachEvent('hashSet', oHashChanger._onHashModified, oHashChanger);
                oHashChanger._oRouterHashChanger.attachEvent('hashReplaced', oHashChanger._onHashModified, oHashChanger);
                oHashChanger._registerListenerToRelevantEvents();
            }
            var fnGetHistoryInstance = ObjectPath.get('sap.ui.core.routing.History.getInstance'), oHistory;
            if (fnGetHistoryInstance) {
                oHistory = fnGetHistoryInstance();
                oHistory._unRegisterHashChanger();
            }
            extendHashChangerEvents(oHashChanger);
            _oHashChanger.destroy();
            if (oHistory) {
                oHistory._setHashChanger(oHashChanger);
            }
        }
        _oHashChanger = oHashChanger;
    };
}());
export default HashChanger;