import Control from '../Control.js';
import EventProvider from '../../base/EventProvider.js';
import View from '../mvc/View.js';
import asyncTarget from './async/Target.js';
import syncTarget from './sync/Target.js';
import UriParameters from '../../../base/util/UriParameters.js';
import Log from '../../../base/Log.js';
var Target = EventProvider.extend('sap.ui.core.routing.Target', {
    constructor: function (oOptions, oCache) {
        var sErrorMessage;
        function checkUrl() {
            if (new UriParameters(window.location.href).get('sap-ui-xx-asyncRouting') === 'true') {
                Log.warning('Activation of async view loading in routing via url parameter is only temporarily supported and may be removed soon', 'Target');
                return true;
            }
            return false;
        }
        if (oOptions._async === undefined) {
            oOptions._async = checkUrl();
        }
        if (oOptions.type === 'Component' && !oOptions._async) {
            sErrorMessage = 'sap.ui.core.routing.Target doesn\'t support loading component in synchronous mode, please switch routing to async';
            Log.error(sErrorMessage);
            throw new Error(sErrorMessage);
        }
        this._updateOptions(oOptions);
        this._oCache = oCache;
        EventProvider.apply(this, arguments);
        if (this._oOptions.title) {
            this._oTitleProvider = new TitleProvider({ target: this });
        }
        var TargetStub = this._oOptions._async ? asyncTarget : syncTarget;
        for (var fn in TargetStub) {
            this[fn] = TargetStub[fn];
        }
        this._bIsDisplayed = false;
    },
    destroy: function () {
        this._oParent = null;
        this._oOptions = null;
        this._oCache = null;
        if (this._oTitleProvider) {
            this._oTitleProvider.destroy();
        }
        this._oTitleProvider = null;
        EventProvider.prototype.destroy.apply(this, arguments);
        this.bIsDestroyed = true;
        return this;
    },
    attachDisplay: function (oData, fnFunction, oListener) {
        return this.attachEvent(this.M_EVENTS.DISPLAY, oData, fnFunction, oListener);
    },
    detachDisplay: function (fnFunction, oListener) {
        return this.detachEvent(this.M_EVENTS.DISPLAY, fnFunction, oListener);
    },
    fireDisplay: function (mArguments) {
        var sTitle = this._oTitleProvider && this._oTitleProvider.getTitle();
        if (sTitle) {
            this.fireTitleChanged({
                name: this._oOptions._name,
                title: sTitle
            });
        }
        this._bIsDisplayed = true;
        return this.fireEvent(this.M_EVENTS.DISPLAY, mArguments);
    },
    attachTitleChanged: function (oData, fnFunction, oListener) {
        var bHasListener = this.hasListeners('titleChanged'), sTitle = this._oTitleProvider && this._oTitleProvider.getTitle();
        this.attachEvent(this.M_EVENTS.TITLE_CHANGED, oData, fnFunction, oListener);
        if (!bHasListener && sTitle && this._bIsDisplayed) {
            this.fireTitleChanged({
                name: this._oOptions._name,
                title: sTitle
            });
        }
        return this;
    },
    detachTitleChanged: function (fnFunction, oListener) {
        return this.detachEvent(this.M_EVENTS.TITLE_CHANGED, fnFunction, oListener);
    },
    fireTitleChanged: function (mArguments) {
        return this.fireEvent(this.M_EVENTS.TITLE_CHANGED, mArguments);
    },
    _getEffectiveObjectName: function (sName) {
        var sPath = this._oOptions.path;
        if (sPath) {
            sName = sPath + '.' + sName;
        }
        return sName;
    },
    _updateOptions: function (oOptions) {
        if (oOptions.viewName) {
            if (oOptions.name) {
                oOptions._name = oOptions.name;
            }
            oOptions.type = 'View';
            oOptions.name = oOptions.viewName;
            if (oOptions.viewPath) {
                oOptions.path = oOptions.viewPath;
            }
            if (oOptions.viewId) {
                oOptions.id = oOptions.viewId;
            }
        }
        this._oOptions = oOptions;
    },
    _bindTitleInTitleProvider: function (oView) {
        if (this._oTitleProvider && oView instanceof View) {
            this._oTitleProvider.applySettings({ title: this._oOptions.title }, oView.getController());
        }
    },
    _addTitleProviderAsDependent: function (oView) {
        if (!this._oTitleProvider) {
            return;
        }
        var oOldParent = this._oTitleProvider.getParent();
        if (oOldParent) {
            oOldParent.removeDependent(this._oTitleProvider);
        }
        oView.addDependent(this._oTitleProvider);
    },
    _beforePlacingViewIntoContainer: function (mArguments) {
    },
    M_EVENTS: {
        DISPLAY: 'display',
        TITLE_CHANGED: 'titleChanged'
    }
});
var TitleProvider = Control.extend('sap.ui.core.routing.Target.TitleProvider', {
    metadata: {
        library: 'sap.ui.core',
        properties: {
            title: {
                type: 'string',
                group: 'Data',
                defaultValue: null
            }
        }
    },
    constructor: function (mSettings) {
        this._oTarget = mSettings.target;
        delete mSettings.target;
        Control.prototype.constructor.call(this, mSettings);
    },
    setTitle: function (sTitle) {
        this.setProperty('title', sTitle, true);
        if (this._oTarget._bIsDisplayed) {
            this._oTarget.fireTitleChanged({
                name: this._oTarget._oOptions._name,
                title: sTitle
            });
        }
    }
});
export default Target;