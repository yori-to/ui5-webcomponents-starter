import Log from '../../../../base/Log.js';
export default {
    display: function (vData) {
        var oParentInfo;
        if (this._oParent) {
            oParentInfo = this._oParent.display(vData);
        }
        return this._place(oParentInfo, vData);
    },
    _place: function (oParentInfo, vData) {
        var oOptions = this._oOptions;
        oParentInfo = oParentInfo || {};
        var oView, oControl = oParentInfo.oTargetControl, oViewContainingTheControl = oParentInfo.oTargetParent;
        if (!this._isValid(oParentInfo, true)) {
            return;
        }
        if (!oViewContainingTheControl && oOptions.rootView) {
            oViewContainingTheControl = sap.ui.getWCCore().byId(oOptions.rootView);
            if (!oViewContainingTheControl) {
                Log.error('Did not find the root view with the id ' + oOptions.rootView, this);
                return;
            }
        }
        if (oOptions.controlId) {
            if (oViewContainingTheControl) {
                oControl = oViewContainingTheControl.byId(oOptions.controlId);
            }
            if (!oControl) {
                oControl = sap.ui.getWCCore().byId(oOptions.controlId);
            }
            if (!oControl) {
                Log.error('Control with ID ' + oOptions.controlId + ' could not be found', this);
                return;
            }
        }
        var oAggregationInfo = oControl.getMetadata().getJSONKeys()[oOptions.controlAggregation];
        if (!oAggregationInfo) {
            Log.error('Control ' + oOptions.controlId + ' does not have an aggregation called ' + oOptions.controlAggregation, this);
            return;
        }
        var sViewName = this._getEffectiveObjectName(oOptions.viewName);
        var oViewOptions = {
            name: sViewName,
            type: oOptions.viewType,
            id: oOptions.viewId
        };
        oView = this._oCache._get(oViewOptions, 'View', this._bUseRawViewId);
        this._beforePlacingViewIntoContainer({
            container: oControl,
            view: oView,
            data: vData
        });
        this._bindTitleInTitleProvider(oView);
        this._addTitleProviderAsDependent(oView);
        if (oOptions.clearControlAggregation === true) {
            oControl[oAggregationInfo._sRemoveAllMutator]();
        }
        Log.info('Did place the view \'' + sViewName + '\' with the id \'' + oView.getId() + '\' into the aggregation \'' + oOptions.controlAggregation + '\' of a control with the id \'' + oControl.getId() + '\'', this);
        oControl[oAggregationInfo._sMutator](oView);
        this.fireDisplay({
            view: oView,
            control: oControl,
            config: this._oOptions,
            data: vData
        });
        return {
            oTargetParent: oView,
            oTargetControl: oControl
        };
    },
    _isValid: function (oParentInfo, bLog) {
        var oOptions = this._oOptions, oControl = oParentInfo && oParentInfo.oTargetControl, bHasTargetControl = oControl || oOptions.controlId, bIsValid = true, sLogMessage = '';
        if (!bHasTargetControl) {
            sLogMessage = 'The target ' + oOptions._name + ' has no controlId set and no parent so the target cannot be displayed.';
            bIsValid = false;
        }
        if (!oOptions.controlAggregation) {
            sLogMessage = 'The target ' + oOptions._name + ' has a control id or a parent but no \'controlAggregation\' was set, so the target could not be displayed.';
            bIsValid = false;
        }
        if (!oOptions.viewName) {
            sLogMessage = 'The target ' + oOptions._name + ' no viewName defined.';
            bIsValid = false;
        }
        if (bLog && sLogMessage) {
            Log.error(sLogMessage, this);
        }
        return bIsValid;
    }
};