import View from '../../mvc/View.js';
import Component from '../../Component.js';
import HashChanger from '../HashChanger.js';
export default {
    _getObjectWithGlobalId: function (oOptions, sType, bNoPromise, oInfo) {
        var that = this, vPromiseOrObject, sName, oInstanceCache, aWrittenIds = [];
        oInfo = oInfo || {};
        function fnCreateObjectAsync() {
            switch (sType) {
            case 'View':
                oOptions.viewName = oOptions.name;
                delete oOptions.name;
                if (bNoPromise) {
                    return sap.ui.view(oOptions);
                } else {
                    return View.create(oOptions);
                }
                break;
            case 'Component':
                var oRouterHashChanger = that._createRouterHashChanger(oInfo.prefix);
                if (oRouterHashChanger) {
                    oOptions.settings = oOptions.settings || {};
                    oOptions.settings._routerHashChanger = oRouterHashChanger;
                }
                return Component.create(oOptions);
            default:
            }
        }
        function afterLoaded(oObject) {
            if (that._oCache) {
                aWrittenIds.forEach(function (sId) {
                    oInstanceCache[sId] = oObject;
                });
                if (oInfo.afterCreate) {
                    oInfo.afterCreate(oObject);
                }
                that.fireCreated({
                    object: oObject,
                    type: sType,
                    options: oOptions
                });
            }
            return oObject;
        }
        if (oOptions.async === undefined) {
            oOptions.async = true;
        }
        sName = oOptions.name;
        this._checkName(sName, sType);
        oInstanceCache = this._oCache[sType.toLowerCase()][sName];
        vPromiseOrObject = oInstanceCache && oInstanceCache[oOptions.id];
        if (vPromiseOrObject) {
            return vPromiseOrObject;
        }
        if (this._oComponent) {
            vPromiseOrObject = this._oComponent.runAsOwner(fnCreateObjectAsync);
        } else {
            vPromiseOrObject = fnCreateObjectAsync();
        }
        if (vPromiseOrObject instanceof Promise) {
            vPromiseOrObject = vPromiseOrObject.then(afterLoaded);
        } else {
            vPromiseOrObject.loaded().then(afterLoaded);
        }
        if (!oInstanceCache) {
            oInstanceCache = this._oCache[sType.toLowerCase()][sName] = {};
            oInstanceCache[undefined] = vPromiseOrObject;
            aWrittenIds.push(undefined);
        }
        if (oOptions.id !== undefined) {
            oInstanceCache[oOptions.id] = vPromiseOrObject;
            aWrittenIds.push(oOptions.id);
        }
        return vPromiseOrObject;
    },
    _getViewWithGlobalId: function (oOptions) {
        if (oOptions && !oOptions.name) {
            oOptions.name = oOptions.viewName;
        }
        return this._getObjectWithGlobalId(oOptions, 'View', true);
    },
    _getComponentWithGlobalId: function (oOptions, oInfo) {
        return this._getObjectWithGlobalId(oOptions, 'Component', false, oInfo);
    },
    _createRouterHashChanger: function (sPrefix) {
        var oRouterHashChanger;
        var oRouter = this._oComponent && this._oComponent.getRouter();
        if (oRouter) {
            oRouterHashChanger = oRouter.getHashChanger();
            if (oRouterHashChanger && sPrefix) {
                oRouterHashChanger = oRouterHashChanger.createSubHashChanger(sPrefix);
            }
        }
        return oRouterHashChanger || HashChanger.getInstance().createRouterHashChanger();
    }
};