import EventProvider from '../../base/EventProvider.js';
import Target from './Target.js';
import asyncTargets from './async/Targets.js';
import syncTargets from './sync/Targets.js';
import UriParameters from '../../../base/util/UriParameters.js';
import Log from '../../../base/Log.js';
import jQuery from '../../thirdparty/jquery.js';
var Targets = EventProvider.extend('sap.ui.core.routing.Targets', {
    constructor: function (oOptions) {
        var sTargetOptions, sTargetName;
        EventProvider.apply(this);
        this._mTargets = {};
        this._oConfig = oOptions.config;
        this._oCache = oOptions.cache || oOptions.views;
        if (!this._oConfig) {
            this._oConfig = { _async: false };
        }
        function checkUrl() {
            if (new UriParameters(window.location.href).get('sap-ui-xx-asyncRouting') === 'true') {
                Log.warning('Activation of async view loading in routing via url parameter is only temporarily supported and may be removed soon', 'Targets');
                return true;
            }
            return false;
        }
        if (this._oConfig._async === undefined) {
            this._oConfig._async = this._oConfig.async === undefined ? checkUrl() : this._oConfig.async;
        }
        var TargetsStub = this._oConfig._async ? asyncTargets : syncTargets;
        for (var fn in TargetsStub) {
            this[fn] = TargetsStub[fn];
        }
        for (sTargetOptions in oOptions.targets) {
            if (oOptions.targets.hasOwnProperty(sTargetOptions)) {
                this._createTarget(sTargetOptions, oOptions.targets[sTargetOptions]);
            }
        }
        for (sTargetName in this._mTargets) {
            if (this._mTargets.hasOwnProperty(sTargetName)) {
                this._addParentTo(this._mTargets[sTargetName]);
            }
        }
    },
    destroy: function () {
        var sTargetName;
        EventProvider.prototype.destroy.apply(this);
        for (sTargetName in this._mTargets) {
            if (this._mTargets.hasOwnProperty(sTargetName)) {
                this._mTargets[sTargetName].destroy();
            }
        }
        this._mTargets = null;
        this._oCache = null;
        this._oConfig = null;
        this.bIsDestroyed = true;
        return this;
    },
    getViews: function () {
        return this._oCache;
    },
    getCache: function () {
        return this._oCache;
    },
    getTarget: function (vName) {
        var that = this, aResult = [];
        if (Array.isArray(vName)) {
            vName.forEach(function (sName) {
                var oTarget = that._mTargets[sName];
                if (oTarget) {
                    aResult.push(oTarget);
                } else {
                    Log.error('The target you tried to get "' + sName + '" does not exist!', that);
                }
            });
            return aResult;
        }
        return this._mTargets[vName];
    },
    addTarget: function (sName, oTargetOptions) {
        var oOldTarget = this.getTarget(sName), oTarget;
        if (oOldTarget) {
            Log.error('Target with name ' + sName + ' already exists', this);
        } else {
            oTarget = this._createTarget(sName, oTargetOptions);
            this._addParentTo(oTarget);
        }
        return this;
    },
    attachDisplay: function (oData, fnFunction, oListener) {
        return this.attachEvent(this.M_EVENTS.DISPLAY, oData, fnFunction, oListener);
    },
    detachDisplay: function (fnFunction, oListener) {
        return this.detachEvent(this.M_EVENTS.DISPLAY, fnFunction, oListener);
    },
    fireDisplay: function (mArguments) {
        return this.fireEvent(this.M_EVENTS.DISPLAY, mArguments);
    },
    attachTitleChanged: function (oData, fnFunction, oListener) {
        this.attachEvent(this.M_EVENTS.TITLE_CHANGED, oData, fnFunction, oListener);
        return this;
    },
    detachTitleChanged: function (fnFunction, oListener) {
        return this.detachEvent(this.M_EVENTS.TITLE_CHANGED, fnFunction, oListener);
    },
    fireTitleChanged: function (mArguments) {
        return this.fireEvent(this.M_EVENTS.TITLE_CHANGED, mArguments);
    },
    M_EVENTS: {
        DISPLAY: 'display',
        TITLE_CHANGED: 'titleChanged'
    },
    _createTarget: function (sName, oTargetOptions) {
        var oTarget, oOptions;
        oOptions = jQuery.extend(true, { _name: sName }, this._oConfig, oTargetOptions);
        oTarget = this._constructTarget(oOptions);
        oTarget.attachDisplay(function (oEvent) {
            var oParameters = oEvent.getParameters();
            this.fireDisplay({
                name: sName,
                view: oParameters.view,
                control: oParameters.control,
                config: oParameters.config,
                data: oParameters.data
            });
        }, this);
        this._mTargets[sName] = oTarget;
        return oTarget;
    },
    _addParentTo: function (oTarget) {
        var oParentTarget, sParent = oTarget._oOptions.parent;
        if (!sParent) {
            return;
        }
        oParentTarget = this._mTargets[sParent];
        if (!oParentTarget) {
            Log.error('The target \'' + oTarget._oOptions._name + ' has a parent \'' + sParent + '\' defined, but it was not found in the other targets', this);
            return;
        }
        oTarget._oParent = oParentTarget;
    },
    _constructTarget: function (oOptions, oParent) {
        return new Target(oOptions, this._oCache, oParent);
    },
    _setRootViewId: function (sId) {
        var sTargetName, oTargetOptions;
        for (sTargetName in this._mTargets) {
            if (this._mTargets.hasOwnProperty(sTargetName)) {
                oTargetOptions = this._mTargets[sTargetName]._oOptions;
                if (oTargetOptions.rootView === undefined) {
                    oTargetOptions.rootView = sId;
                }
            }
        }
    },
    _getTitleTargetName: function (vTargetNames, sProvidedTitleTargetName) {
        var oTarget, sTitleTargetName;
        sTitleTargetName = sProvidedTitleTargetName || typeof vTargetNames === 'string' && vTargetNames;
        if (!sTitleTargetName) {
            vTargetNames.some(function (sTargetName) {
                oTarget = this.getTarget(sTargetName);
                while (oTarget && oTarget._oParent && oTarget._oParent._oOptions.title) {
                    oTarget = oTarget._oParent;
                }
                if (oTarget && oTarget._oOptions.title) {
                    sTitleTargetName = oTarget._oOptions._name;
                    return true;
                }
            }.bind(this));
        }
        return sTitleTargetName;
    },
    _forwardTitleChanged: function (oEvent) {
        this.fireTitleChanged({
            name: oEvent.getParameter('name'),
            title: oEvent.getParameter('title')
        });
    },
    _attachTitleChanged: function (vTargets, sTitleTarget) {
        var oTitleTarget;
        sTitleTarget = this._getTitleTargetName(vTargets, sTitleTarget);
        oTitleTarget = this.getTarget(sTitleTarget);
        if (this._oLastTitleTarget) {
            this._oLastTitleTarget.detachTitleChanged(this._forwardTitleChanged, this);
            this._oLastTitleTarget._bIsDisplayed = false;
        }
        if (oTitleTarget) {
            oTitleTarget.attachTitleChanged({ name: oTitleTarget._oOptions._name }, this._forwardTitleChanged, this);
            this._oLastTitleTarget = oTitleTarget;
        } else if (sTitleTarget) {
            Log.error('The target with the name "' + sTitleTarget + '" where the titleChanged event should be fired does not exist!', this);
        }
    }
});
export default Targets;