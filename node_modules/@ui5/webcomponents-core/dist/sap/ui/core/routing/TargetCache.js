import EventProvider from '../../base/EventProvider.js';
import asyncCache from './async/TargetCache.js';
import syncCache from './sync/TargetCache.js';
import assert from '../../../base/assert.js';
import Log from '../../../base/Log.js';
import jQuery from '../../thirdparty/jquery.js';
var TargetCache = EventProvider.extend('sap.ui.core.routing.TargetCache', {
    constructor: function (oOptions) {
        if (!oOptions) {
            oOptions = {};
        }
        this._oCache = {
            view: {},
            component: {}
        };
        this._oComponent = oOptions.component;
        if (this._oComponent) {
            assert(this._oComponent.isA('sap.ui.core.UIComponent'), this + ' - the component passed to the constructor needs to be an instance of UIComponent');
        }
        EventProvider.apply(this, arguments);
        this.async = oOptions.async;
        if (this.async === undefined) {
            this.async = true;
        }
        var CacheStub = this.async ? asyncCache : syncCache;
        for (var fn in CacheStub) {
            this[fn] = CacheStub[fn];
        }
    },
    metadata: {
        publicMethods: [
            'get',
            'set'
        ]
    },
    get: function (oOptions, sType) {
        var oObject;
        try {
            if (sType === 'Component' && !this.async) {
                Log.error('sap.ui.core.routing.Target doesn\'t support loading component in synchronous mode, please switch routing to async');
                throw new Error('sap.ui.core.routing.Target doesn\'t support loading component in synchronous mode, please switch routing to async');
            }
            if (!oOptions) {
                Log.error('the oOptions parameter of getObject is mandatory', this);
                throw new Error('the oOptions parameter of getObject is mandatory');
            }
            oObject = this._get(oOptions, sType);
        } catch (e) {
            return Promise.reject(e);
        }
        if (oObject instanceof Promise) {
            return oObject;
        } else if (oObject.isA('sap.ui.core.mvc.View')) {
            return oObject.loaded();
        } else {
            return Promise.resolve(oObject);
        }
    },
    set: function (sName, sType, oObject) {
        var oInstanceCache;
        this._checkName(sName, sType);
        assert(sType === 'View' || sType === 'Component', 'sType must be either \'View\' or \'Component\'');
        oInstanceCache = this._oCache[sType.toLowerCase()][sName];
        if (!oInstanceCache) {
            oInstanceCache = this._oCache[sType.toLowerCase()][sName] = {};
        }
        oInstanceCache[undefined] = oObject;
        return this;
    },
    destroy: function () {
        EventProvider.prototype.destroy.apply(this);
        if (this.bIsDestroyed) {
            return this;
        }
        function destroyObject(oObject) {
            if (oObject && oObject.destroy) {
                oObject.destroy();
            }
        }
        Object.keys(this._oCache).forEach(function (sType) {
            var oTypeCache = this._oCache[sType];
            Object.keys(oTypeCache).forEach(function (sKey) {
                var oInstanceCache = oTypeCache[sKey];
                Object.keys(oInstanceCache).forEach(function (sId) {
                    var vObject = oInstanceCache[sId];
                    if (vObject instanceof Promise) {
                        vObject.then(destroyObject);
                    } else {
                        destroyObject(vObject);
                    }
                });
            });
        }.bind(this));
        this._oCache = undefined;
        this.bIsDestroyed = true;
        return this;
    },
    attachCreated: function (oData, fnFunction, oListener) {
        return this.attachEvent('created', oData, fnFunction, oListener);
    },
    detachCreated: function (fnFunction, oListener) {
        return this.detachEvent('created', fnFunction, oListener);
    },
    fireCreated: function (mArguments) {
        return this.fireEvent('created', mArguments);
    },
    _get: function (oOptions, sType, bGlobalId, oInfo) {
        var oObject;
        switch (sType) {
        case 'View':
            oObject = this._getView(oOptions, bGlobalId);
            break;
        case 'Component':
            oObject = this._getComponent(oOptions, bGlobalId, oInfo);
            break;
        default:
            throw Error('The given sType: ' + sType + ' isn\'t supported by TargetCache.getObject');
        }
        return oObject;
    },
    _getView: function (oOptions, bGlobalId) {
        if (!bGlobalId) {
            oOptions = this._createId(oOptions);
        }
        return this._getViewWithGlobalId(oOptions);
    },
    _getComponent: function (oOptions, bGlobalId, oInfo) {
        if (!bGlobalId) {
            oOptions = this._createId(oOptions);
        }
        return this._getComponentWithGlobalId(oOptions, oInfo);
    },
    _createId: function (oOptions) {
        if (this._oComponent && oOptions.id) {
            oOptions = jQuery.extend({}, oOptions, { id: this._oComponent.createId(oOptions.id) });
        }
        return oOptions;
    },
    _checkName: function (sName, sType) {
        if (!sName) {
            var sMessage = 'A name for the ' + sType.toLowerCase() + ' has to be defined';
            Log.error(sMessage, this);
            throw Error(sMessage);
        }
    }
});
export default TargetCache;