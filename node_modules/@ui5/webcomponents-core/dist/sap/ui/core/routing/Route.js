import EventProvider from '../../base/EventProvider.js';
import Target from './Target.js';
import asyncRoute from './async/Route.js';
import syncRoute from './sync/Route.js';
import Component from '../Component.js';
import Log from '../../../base/Log.js';
import assert from '../../../base/assert.js';
import jQuery from '../../thirdparty/jquery.js';
var Route = EventProvider.extend('sap.ui.core.routing.Route', {
    metadata: {
        publicMethods: [
            'getURL',
            'getPattern'
        ]
    },
    constructor: function (oRouter, oConfig, oParent) {
        EventProvider.apply(this, arguments);
        this._validateConfig(oConfig);
        this._aPattern = [];
        this._aRoutes = [];
        this._oParent = oParent;
        this._oConfig = oConfig;
        this._oRouter = oRouter;
        var that = this, vRoute = oConfig.pattern, aSubRoutes, RouteStub, async = oRouter._isAsync();
        RouteStub = async ? asyncRoute : syncRoute;
        for (var fn in RouteStub) {
            this[fn] = RouteStub[fn];
        }
        if (!Array.isArray(vRoute)) {
            vRoute = [vRoute];
        }
        if (oConfig.parent) {
            var oRoute = this._getParentRoute(oConfig.parent);
            if (!oRoute) {
                Log.error('No parent route with \'' + oConfig.parent + '\' could be found', this);
            } else if (oRoute._aPattern.length > 1) {
                Log.error('Routes with multiple patterns cannot be used as parent for nested routes', this);
                return;
            } else {
                this._oNestingParent = oRoute;
                vRoute.forEach(function (sRoute, i) {
                    var sNestingRoute = oRoute._aPattern[0];
                    sNestingRoute = sNestingRoute.charAt(sNestingRoute.length) === '/' ? sNestingRoute : sNestingRoute + '/';
                    vRoute[i] = sNestingRoute + sRoute;
                });
            }
        }
        if (Array.isArray(oConfig.subroutes)) {
            aSubRoutes = oConfig.subroutes;
            oConfig.subroutes = {};
            jQuery.each(aSubRoutes, function (iSubrouteIndex, oSubRoute) {
                oConfig.subroutes[oSubRoute.name] = oSubRoute;
            });
        }
        if (!oConfig.target) {
            var oTargetConfig = this._convertToTargetOptions(oConfig);
            oTargetConfig._async = async;
            this._oTarget = new Target(oTargetConfig, oRouter._oViews, oParent && oParent._oTarget);
            this._oTarget._bUseRawViewId = true;
        }
        if (oConfig.subroutes) {
            jQuery.each(oConfig.subroutes, function (sRouteName, oSubRouteConfig) {
                if (oSubRouteConfig.name === undefined) {
                    oSubRouteConfig.name = sRouteName;
                }
                oRouter.addRoute(oSubRouteConfig, that);
            });
        }
        if (oConfig.pattern === undefined) {
            return;
        }
        jQuery.each(vRoute, function (iIndex, sRoute) {
            that._aPattern[iIndex] = sRoute;
            that._aRoutes[iIndex] = oRouter._oRouter.addRoute(sRoute);
            that._aRoutes[iIndex].greedy = oConfig.greedy;
            that._aRoutes[iIndex].matched.add(function () {
                var oArguments = {};
                jQuery.each(arguments, function (iArgumentIndex, sArgument) {
                    oArguments[that._aRoutes[iIndex]._paramsIds[iArgumentIndex]] = sArgument;
                });
                that._routeMatched(oArguments, true);
            });
            that._aRoutes[iIndex].switched.add(function () {
                that._routeSwitched();
            });
        });
    },
    _routeSwitched: function () {
        this.fireEvent('switched', { name: this._oConfig.name });
    },
    destroy: function () {
        EventProvider.prototype.destroy.apply(this);
        this._aPattern = null;
        this._aRoutes = null;
        this._oParent = null;
        this._oConfig = null;
        this.bIsDestroyed = true;
        return this;
    },
    getURL: function (oParameters) {
        return this._aRoutes[0].interpolate(oParameters);
    },
    getPattern: function () {
        return this._aPattern[0];
    },
    match: function (sHash) {
        return this._aRoutes.some(function (oRoute) {
            return oRoute.match(sHash);
        });
    },
    attachMatched: function (oData, fnFunction, oListener) {
        return this.attachEvent('matched', oData, fnFunction, oListener);
    },
    detachMatched: function (fnFunction, oListener) {
        return this.detachEvent('matched', fnFunction, oListener);
    },
    attachBeforeMatched: function (oData, fnFunction, oListener) {
        return this.attachEvent('beforeMatched', oData, fnFunction, oListener);
    },
    detachBeforeMatched: function (fnFunction, oListener) {
        return this.detachEvent('beforeMatched', fnFunction, oListener);
    },
    fireBeforeMatched: function (mArguments) {
        this.fireEvent('beforeMatched', mArguments);
        return this;
    },
    attachPatternMatched: function (oData, fnFunction, oListener) {
        return this.attachEvent('patternMatched', oData, fnFunction, oListener);
    },
    detachPatternMatched: function (fnFunction, oListener) {
        return this.detachEvent('patternMatched', fnFunction, oListener);
    },
    _validateConfig: function (oConfig) {
        if (!oConfig.name) {
            Log.error('A name has to be specified for every route', this);
        }
        if (oConfig.viewName) {
            Log.error('The \'viewName\' option shouldn\'t be used in Route. please use \'view\' instead', this);
        }
    },
    _convertToTargetOptions: function (oOptions) {
        return jQuery.extend(true, {}, oOptions, {
            rootView: oOptions.targetParent,
            controlId: oOptions.targetControl,
            controlAggregation: oOptions.targetAggregation,
            clearControlAggregation: oOptions.clearTarget,
            viewName: oOptions.view,
            viewType: oOptions.viewType,
            viewId: oOptions.viewId
        });
    },
    _getParentRoute: function (sParent) {
        var aParts = sParent.split(':');
        if (aParts.length === 1 || aParts.length === 2 && !aParts[0]) {
            return this._oRouter.getRoute(aParts[aParts.length - 1]);
        } else {
            assert(this._oRouter._oOwner, 'No owner component for ' + this._oRouter._oOwner.getId());
            var oOwnerComponent = Component.getOwnerComponentFor(this._oRouter._oOwner);
            while (oOwnerComponent) {
                if (oOwnerComponent.getMetadata().getName() === aParts[0]) {
                    var oRouter = oOwnerComponent.getRouter();
                    return oRouter.getRoute(aParts[1]);
                }
                oOwnerComponent = Component.getOwnerComponentFor(oOwnerComponent);
            }
            return null;
        }
    }
});
Route.M_EVENTS = {
    BeforeMatched: 'beforeMatched',
    Matched: 'matched',
    PatternMatched: 'patternMatched'
};
export default Route;