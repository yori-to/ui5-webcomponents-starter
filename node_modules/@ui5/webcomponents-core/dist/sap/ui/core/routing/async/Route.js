import Device from '../../../Device.js';
import Log from '../../../../base/Log.js';
import jQuery from '../../../thirdparty/jquery.js';
export default {
    _routeMatched: function (oArguments, oSequencePromise, oNestingChild) {
        var oRouter = this._oRouter, oTarget, oConfig, oEventData, oView = null, oTargetControl = null, bInitial, oTargetData, oCurrentPromise, that = this;
        oRouter._matchedRoute = this;
        if (!oSequencePromise || oSequencePromise === true) {
            bInitial = true;
            oSequencePromise = Promise.resolve();
        }
        if (this._oParent) {
            oSequencePromise = this._oParent._routeMatched(oArguments, oSequencePromise);
        } else if (this._oNestingParent) {
            this._oNestingParent._routeMatched(oArguments, oSequencePromise, this);
        }
        oConfig = jQuery.extend({}, oRouter._oConfig, this._oConfig);
        oTargetData = jQuery.extend({}, oArguments);
        oTargetData.routeConfig = oConfig;
        oEventData = {
            name: oConfig.name,
            arguments: oArguments,
            config: oConfig
        };
        if (oNestingChild) {
            oEventData.nestedRoute = oNestingChild;
        }
        this.fireBeforeMatched(oEventData);
        oRouter.fireBeforeRouteMatched(oEventData);
        if (this._oTarget) {
            oTarget = this._oTarget;
            oTarget._updateOptions(this._convertToTargetOptions(oConfig));
            oSequencePromise = oTarget._place(oSequencePromise);
            if (this._oRouter._oTargetHandler && this._oRouter._oTargetHandler._chainNavigation) {
                oCurrentPromise = oSequencePromise;
                oSequencePromise = this._oRouter._oTargetHandler._chainNavigation(function () {
                    return oCurrentPromise;
                });
            }
        } else {
            if (!this._oConfig.afterCreateHook) {
                this._oConfig.afterCreateHook = function (oTargetObject) {
                    if (oTargetObject.isA('sap.ui.core.UIComponent')) {
                        var oRouter = oTargetObject.getRouter();
                        if (oRouter) {
                            that.attachEvent('switched', function () {
                                oRouter.stop();
                            });
                        }
                    }
                };
            }
            if (Device.browser.msie || Device.browser.edge) {
                oCurrentPromise = oSequencePromise;
                oSequencePromise = new Promise(function (resolve, reject) {
                    setTimeout(function () {
                        var oDisplayPromise = oRouter._oTargets._display(that._oConfig.target, oTargetData, that._oConfig.titleTarget, oCurrentPromise, that._oConfig.afterCreateHook);
                        oDisplayPromise.then(resolve, reject);
                    }, 0);
                });
            } else {
                oSequencePromise = oRouter._oTargets._display(this._oConfig.target, oTargetData, this._oConfig.titleTarget, oSequencePromise, this._oConfig.afterCreateHook);
            }
        }
        return oSequencePromise.then(function (oResult) {
            oResult = oResult || {};
            oView = oResult.view;
            oTargetControl = oResult.control;
            oEventData.view = oView;
            oEventData.targetControl = oTargetControl;
            if (oConfig.callback) {
                oConfig.callback(this, oArguments, oConfig, oTargetControl, oView);
            }
            this.fireEvent('matched', oEventData);
            oRouter.fireRouteMatched(oEventData);
            if (bInitial) {
                Log.info('The route named \'' + oConfig.name + '\' did match with its pattern', this);
                this.fireEvent('patternMatched', oEventData);
                oRouter.fireRoutePatternMatched(oEventData);
            }
            return oResult;
        }.bind(this));
    }
};