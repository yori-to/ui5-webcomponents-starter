import URI from '../../thirdparty/URI.js';
import Element from '../Element.js';
import UriParameters from '../../../base/util/UriParameters.js';
import Log from '../../../base/Log.js';
import jQuery from '../../thirdparty/jquery.js';
var oCfgData = window['sap-ui-config'] || {};
var syncCallBehavior = 0;
if (oCfgData['xx-nosync'] === 'warn' || /(?:\?|&)sap-ui-xx-nosync=(?:warn)/.exec(window.location.search)) {
    syncCallBehavior = 1;
}
if (oCfgData['xx-nosync'] === true || oCfgData['xx-nosync'] === 'true' || /(?:\?|&)sap-ui-xx-nosync=(?:x|X|true)/.exec(window.location.search)) {
    syncCallBehavior = 2;
}
var Parameters = {};
var mParameters = null;
var sTheme = null;
var aParametersToLoad = [];
var rCssUrl = /url[\s]*\('?"?([^\'")]*)'?"?\)/;
var bUseInlineParameters = new UriParameters(window.location.href).get('sap-ui-xx-no-inline-theming-parameters') !== 'true';
function resetParameters() {
    mParameters = null;
}
function checkAndResolveRelativeUrl(sUrl, sThemeBaseUrl) {
    var aMatch = rCssUrl.exec(sUrl);
    if (aMatch) {
        var oUri = new URI(aMatch[1]);
        if (oUri.is('relative')) {
            var sNormalizedUrl = oUri.absoluteTo(sThemeBaseUrl).normalize().path();
            sUrl = 'url(\'' + sNormalizedUrl + '\')';
        }
    }
    return sUrl;
}
function mergeParameterSet(mCurrent, mNew, sThemeBaseUrl) {
    for (var sParam in mNew) {
        if (typeof mCurrent[sParam] === 'undefined') {
            mCurrent[sParam] = checkAndResolveRelativeUrl(mNew[sParam], sThemeBaseUrl);
        }
    }
    return mCurrent;
}
function mergeParameters(mNewParameters, sThemeBaseUrl) {
    if (typeof mNewParameters['default'] !== 'object') {
        mNewParameters = {
            'default': mNewParameters,
            'scopes': {}
        };
    }
    mParameters = mParameters || {};
    mParameters['default'] = mParameters['default'] || {};
    mParameters['scopes'] = mParameters['scopes'] || {};
    mergeParameterSet(mParameters['default'], mNewParameters['default'], sThemeBaseUrl);
    if (typeof mNewParameters['scopes'] === 'object') {
        for (var sScopeName in mNewParameters['scopes']) {
            mParameters['scopes'][sScopeName] = mParameters['scopes'][sScopeName] || {};
            mergeParameterSet(mParameters['scopes'][sScopeName], mNewParameters['scopes'][sScopeName], sThemeBaseUrl);
        }
    }
}
function forEachStyleSheet(fnCallback) {
    jQuery('link[id^=sap-ui-theme-]').each(function () {
        fnCallback(this.getAttribute('id'));
    });
}
function loadParameters(sId) {
    var oLink = document.getElementById(sId);
    if (!oLink) {
        Log.warning('Could not find stylesheet element with ID', sId, 'sap.ui.core.theming.Parameters');
        return;
    }
    var sStyleSheetUrl = oLink.href;
    var sThemeBaseUrl = new URI(sStyleSheetUrl).filename('').query('').toString();
    var bThemeApplied = sap.ui.getWCCore().isThemeApplied();
    if (!bThemeApplied) {
        Log.warning('Parameters have been requested but theme is not applied, yet.', 'sap.ui.core.theming.Parameters');
    }
    if (bThemeApplied && bUseInlineParameters) {
        var $link = jQuery(oLink);
        var sDataUri = $link.css('background-image');
        var aParams = /\(["']?data:text\/plain;utf-8,(.*?)['"]?\)$/i.exec(sDataUri);
        if (aParams && aParams.length >= 2) {
            var sParams = aParams[1];
            if (sParams.charAt(0) !== '{' && sParams.charAt(sParams.length - 1) !== '}') {
                try {
                    sParams = decodeURIComponent(sParams);
                } catch (ex) {
                    Log.warning('Could not decode theme parameters URI from ' + sStyleSheetUrl);
                }
            }
            try {
                var oParams = jQuery.parseJSON(sParams);
                mergeParameters(oParams, sThemeBaseUrl);
                return;
            } catch (ex) {
                Log.warning('Could not parse theme parameters from ' + sStyleSheetUrl + '. Loading library-parameters.json as fallback solution.');
            }
        }
    }
    var sUrl = sStyleSheetUrl.replace(/\/library([^\/.]*)\.(?:css|less)($|[?#])/, function ($0, $1, $2) {
        return '/library-parameters.json' + ($2 ? $2 : '');
    });
    if (syncCallBehavior === 2) {
        Log.error('[nosync] Loading library-parameters.json ignored', sUrl, 'sap.ui.core.theming.Parameters');
        return;
    } else if (syncCallBehavior === 1) {
        Log.error('[nosync] Loading library-parameters.json with sync XHR', sUrl, 'sap.ui.core.theming.Parameters');
    }
    jQuery.ajax({
        url: sUrl,
        dataType: 'json',
        async: false,
        success: function (data, textStatus, xhr) {
            if (Array.isArray(data)) {
                for (var j = 0; j < data.length; j++) {
                    var oParams = data[j];
                    mergeParameters(oParams, sThemeBaseUrl);
                }
            } else {
                mergeParameters(data, sThemeBaseUrl);
            }
        },
        error: function (xhr, textStatus, error) {
            Log.error('Could not load theme parameters from: ' + sUrl, error);
        }
    });
}
function getParameters() {
    if (!mParameters) {
        mergeParameters({}, '');
        sTheme = sap.ui.getWCCore().getConfiguration().getTheme();
        forEachStyleSheet(loadParameters);
    }
    return mParameters;
}
function loadPendingLibraryParameters() {
    aParametersToLoad.forEach(loadParameters);
    aParametersToLoad = [];
}
Parameters._addLibraryTheme = function (sLibId) {
    if (mParameters) {
        aParametersToLoad.push('sap-ui-theme-' + sLibId);
    }
};
function getParam(mOptions) {
    var oParams = getParameters();
    if (mOptions.scopeName) {
        oParams = oParams['scopes'][mOptions.scopeName];
    } else {
        oParams = oParams['default'];
    }
    var sParam = oParams[mOptions.parameterName];
    if (typeof sParam === 'undefined' && typeof mOptions.parameterName === 'string') {
        var iIndex = mOptions.parameterName.indexOf(':');
        if (iIndex !== -1) {
            mOptions.parameterName = mOptions.parameterName.substr(iIndex + 1);
        }
        sParam = oParams[mOptions.parameterName];
    }
    if (mOptions.loadPendingParameters && typeof sParam === 'undefined') {
        loadPendingLibraryParameters();
        sParam = getParam({
            parameterName: mOptions.parameterName,
            scopeName: mOptions.scopeName,
            loadPendingParameters: false
        });
    }
    return sParam;
}
function getParamForActiveScope(sParamName, aScopeChain) {
    for (var i = 0; i < aScopeChain.length; i++) {
        var aCurrentScopes = aScopeChain[i];
        for (var k = 0; k < aCurrentScopes.length; k++) {
            var sScopeName = aCurrentScopes[k];
            var sParamValue = getParam({
                parameterName: sParamName,
                scopeName: sScopeName
            });
            if (sParamValue) {
                return sParamValue;
            }
        }
    }
    return getParam({ parameterName: sParamName });
}
Parameters._getScopes = function (bAvoidLoading) {
    if (bAvoidLoading && !mParameters) {
        return;
    }
    var oParams = getParameters();
    var aScopes = Object.keys(oParams['scopes']);
    return aScopes;
};
Parameters.getActiveScopesFor = function (oElement) {
    var aScopeChain = [];
    if (oElement instanceof Element) {
        var domRef = oElement.getDomRef();
        loadPendingLibraryParameters();
        var aScopes = this._getScopes();
        if (domRef) {
            var fnNodeHasStyleClass = function (sScopeName) {
                var scopeList = domRef.classList;
                return scopeList && scopeList.contains(sScopeName);
            };
            while (domRef) {
                var aFoundScopeClasses = aScopes.filter(fnNodeHasStyleClass);
                if (aFoundScopeClasses.length > 0) {
                    aScopeChain.push(aFoundScopeClasses);
                }
                domRef = domRef.parentNode;
            }
        } else {
            var fnControlHasStyleClass = function (sScopeName) {
                return typeof oElement.hasStyleClass === 'function' && oElement.hasStyleClass(sScopeName);
            };
            while (oElement) {
                var aFoundScopeClasses = aScopes.filter(fnControlHasStyleClass);
                if (aFoundScopeClasses.length > 0) {
                    aScopeChain.push(aFoundScopeClasses);
                }
                oElement = typeof oElement.getParent === 'function' && oElement.getParent();
            }
        }
    }
    return aScopeChain;
};
Parameters.get = function (vName, oElement) {
    var sParam;
    if (!sap.ui.getWCCore().isInitialized()) {
        Log.warning('Called sap.ui.core.theming.Parameters.get() before core has been initialized. ' + 'This could lead to bad performance and sync XHR as inline parameters might not be available, yet. ' + 'Consider using the API only when required, e.g. onBeforeRendering.');
    }
    if (arguments.length === 0) {
        loadPendingLibraryParameters();
        var oParams = getParameters();
        return jQuery.extend({}, oParams['default']);
    }
    if (!vName) {
        return undefined;
    }
    if (oElement instanceof Element) {
        loadPendingLibraryParameters();
        var aScopeChain = this.getActiveScopesFor(oElement);
        if (typeof vName === 'string') {
            return getParamForActiveScope(vName, aScopeChain);
        } else if (Array.isArray(vName)) {
            var mParams = {};
            for (var j = 0; j < vName.length; j++) {
                var sParamName = vName[j];
                mParams[sParamName] = getParamForActiveScope(sParamName, aScopeChain);
            }
            return mParams;
        }
    } else {
        if (typeof vName === 'string') {
            sParam = getParam({
                parameterName: vName,
                loadPendingParameters: true
            });
            return sParam;
        } else if (Array.isArray(vName)) {
            var mParams = {};
            for (var i = 0; i < vName.length; i++) {
                var sParamName = vName[i];
                mParams[sParamName] = Parameters.get(sParamName);
            }
            return mParams;
        }
    }
};
Parameters._setOrLoadParameters = function (mLibraryParameters) {
    mParameters = {
        'default': {},
        'scopes': {}
    };
    sTheme = sap.ui.getWCCore().getConfiguration().getTheme();
    forEachStyleSheet(function (sId) {
        var sLibname = sId.substr(13);
        if (mLibraryParameters[sLibname]) {
            jQuery.extend(mParameters['default'], mLibraryParameters[sLibname]);
        } else {
            loadParameters(sId);
        }
    });
};
Parameters.reset = function () {
    var bOnlyWhenNecessary = arguments[0] === true;
    if (!bOnlyWhenNecessary || sap.ui.getWCCore().getConfiguration().getTheme() !== sTheme) {
        resetParameters();
    }
};
Parameters._getThemeImage = function (sParamName, bForce) {
    sParamName = sParamName || 'sapUiGlobalLogo';
    var logo = Parameters.get(sParamName);
    if (logo) {
        var match = rCssUrl.exec(logo);
        if (match) {
            logo = match[1];
        } else if (logo === '\'\'' || logo === 'none') {
            logo = null;
        }
    }
    if (!!bForce && !logo) {
        return sap.ui.resource('sap.ui.core', 'themes/base/img/1x1.gif');
    }
    return logo;
};
export default Parameters;