import jQuery from '../thirdparty/jquery.js';
import DataType from '../base/DataType.js';
import ManagedObject from '../base/ManagedObject.js';
import CustomData from './CustomData.js';
import View from './mvc/View.js';
import EventHandlerResolver from './mvc/EventHandlerResolver.js';
import ExtensionPoint from './ExtensionPoint.js';
import StashedControlSupport from './StashedControlSupport.js';
import SyncPromise from '../base/SyncPromise.js';
import Log from '../../base/Log.js';
import ObjectPath from '../../base/util/ObjectPath.js';
import assert from '../../base/assert.js';
import encodeXML from '../../base/security/encodeXML.js';
import LoaderExtensions from '../../base/util/LoaderExtensions.js';
function parseScalarType(sType, sValue, sName, oController) {
    var oBindingInfo = ManagedObject.bindingParser(sValue, oController, true);
    if (oBindingInfo && typeof oBindingInfo === 'object') {
        return oBindingInfo;
    }
    var vValue = sValue = oBindingInfo || sValue;
    var oType = DataType.getType(sType);
    if (oType) {
        if (oType instanceof DataType) {
            vValue = oType.parseValue(sValue, { context: oController });
            if (!oType.isValid(vValue)) {
                Log.error('Value \'' + sValue + '\' is not valid for type \'' + oType.getName() + '\'.');
            }
        }
    } else {
        throw new Error('Property ' + sName + ' has unknown type ' + sType);
    }
    return typeof vValue === 'string' ? ManagedObject.bindingParser.escape(vValue) : vValue;
}
function localName(xmlNode) {
    return xmlNode.localName || xmlNode.baseName || xmlNode.nodeName;
}
function unwrapSyncPromise(pSyncPromise) {
    if (pSyncPromise.isRejected()) {
        throw pSyncPromise.getResult();
    }
    return pSyncPromise.getResult();
}
function getHandleChildrenStrategy(bAsync, fnCallback) {
    function syncStrategy(node, oAggregation, mAggregations) {
        var childNode, vChild, aChildren = [];
        for (childNode = node.firstChild; childNode; childNode = childNode.nextSibling) {
            vChild = fnCallback(node, oAggregation, mAggregations, childNode);
            if (vChild) {
                aChildren.push(unwrapSyncPromise(vChild));
            }
        }
        return SyncPromise.resolve(aChildren);
    }
    function asyncStrategy(node, oAggregation, mAggregations) {
        var childNode, pChain = Promise.resolve(), aChildPromises = [];
        for (childNode = node.firstChild; childNode; childNode = childNode.nextSibling) {
            pChain = pChain.then(fnCallback.bind(null, node, oAggregation, mAggregations, childNode));
            aChildPromises.push(pChain);
        }
        return Promise.all(aChildPromises);
    }
    return bAsync ? asyncStrategy : syncStrategy;
}
var XMLTemplateProcessor = {};
XMLTemplateProcessor.loadTemplate = function (sTemplateName, sExtension) {
    var sResourceName = sTemplateName.replace(/\./g, '/') + ('.' + (sExtension || 'view') + '.xml');
    return LoaderExtensions.loadResource(sResourceName).documentElement;
};
XMLTemplateProcessor.loadTemplatePromise = function (sTemplateName, sExtension) {
    var sResourceName = sTemplateName.replace(/\./g, '/') + ('.' + (sExtension || 'view') + '.xml');
    return LoaderExtensions.loadResource(sResourceName, { async: true }).then(function (oResult) {
        return oResult.documentElement;
    });
};
XMLTemplateProcessor.parseViewAttributes = function (xmlNode, oView, mSettings) {
    var mAllProperties = oView.getMetadata().getAllProperties();
    for (var i = 0; i < xmlNode.attributes.length; i++) {
        var attr = xmlNode.attributes[i];
        if (attr.name === 'controllerName') {
            oView._controllerName = attr.value;
        } else if (attr.name === 'resourceBundleName') {
            oView._resourceBundleName = attr.value;
        } else if (attr.name === 'resourceBundleUrl') {
            oView._resourceBundleUrl = attr.value;
        } else if (attr.name === 'resourceBundleLocale') {
            oView._resourceBundleLocale = attr.value;
        } else if (attr.name === 'resourceBundleAlias') {
            oView._resourceBundleAlias = attr.value;
        } else if (attr.name === 'class') {
            oView.addStyleClass(attr.value);
        } else if (!mSettings[attr.name] && mAllProperties[attr.name]) {
            mSettings[attr.name] = parseScalarType(mAllProperties[attr.name].type, attr.value, attr.name, oView._oContainingView.oController);
        }
    }
};
XMLTemplateProcessor.enrichTemplateIds = function (xmlNode, oView) {
    XMLTemplateProcessor.enrichTemplateIdsPromise(xmlNode, oView, false);
    return xmlNode;
};
XMLTemplateProcessor.enrichTemplateIdsPromise = function (xmlNode, oView, bAsync) {
    return parseTemplate(xmlNode, oView, true, bAsync).then(function () {
        return xmlNode;
    });
};
XMLTemplateProcessor.parseTemplate = function (xmlNode, oView) {
    return unwrapSyncPromise(XMLTemplateProcessor.parseTemplatePromise(xmlNode, oView, false));
};
XMLTemplateProcessor.parseTemplatePromise = function (xmlNode, oView, bAsync, oParseConfig) {
    return parseTemplate(xmlNode, oView, false, bAsync, oParseConfig);
};
function parseTemplate(xmlNode, oView, bEnrichFullIds, bAsync, oParseConfig) {
    var aResult = [], pResultChain = SyncPromise.resolve();
    bAsync = bAsync && oView._sProcessingMode === 'sequential';
    Log.debug('XML processing mode is ' + (bAsync ? 'sequential' : 'default'), '', 'XMLTemplateProcessor');
    var bDesignMode = sap.ui.getWCCore().getConfiguration().getDesignMode();
    if (bDesignMode) {
        oView._sapui_declarativeSourceInfo = {
            xmlNode: xmlNode,
            xmlRootNode: oView._oContainingView === oView ? xmlNode : oView._oContainingView._sapui_declarativeSourceInfo.xmlRootNode
        };
    }
    var sCurrentName = oView.sViewName || oView._sFragmentName;
    if (!sCurrentName) {
        var oTopView = oView;
        var iLoopCounter = 0;
        while (++iLoopCounter < 1000 && oTopView && oTopView !== oTopView._oContainingView) {
            oTopView = oTopView._oContainingView;
        }
        sCurrentName = oTopView.sViewName;
    }
    if (oView.isSubView()) {
        parseNode(xmlNode, true);
    } else {
        if (xmlNode.localName === 'View' && xmlNode.namespaceURI !== 'sap.ui.core.mvc') {
            Log.warning('XMLView root node must have the \'sap.ui.core.mvc\' namespace, not \'' + xmlNode.namespaceURI + '\'' + (sCurrentName ? ' (View name: ' + sCurrentName + ')' : ''));
        }
        parseChildren(xmlNode);
    }
    var i = 0;
    function resolveResultPromises() {
        for (; i < aResult.length; i++) {
            var vElement = aResult[i];
            if (vElement && typeof vElement.then === 'function') {
                return vElement.then(spliceContentIntoResult).then(resolveResultPromises);
            }
        }
        return aResult;
    }
    function spliceContentIntoResult(vContent) {
        var args = [
            i,
            1
        ].concat(vContent);
        Array.prototype.splice.apply(aResult, args);
    }
    return pResultChain.then(resolveResultPromises);
    function identity(sId) {
        return sId;
    }
    function createId(sId) {
        return oView._oContainingView.createId(sId);
    }
    function parseNode(xmlNode, bRoot, bIgnoreTopLevelTextNodes) {
        if (xmlNode.nodeType === 1) {
            var sLocalName = localName(xmlNode);
            if (xmlNode.namespaceURI === 'http://www.w3.org/1999/xhtml' || xmlNode.namespaceURI === 'http://www.w3.org/2000/svg') {
                aResult.push('<' + sLocalName + ' ');
                var bHasId = false;
                for (var i = 0; i < xmlNode.attributes.length; i++) {
                    var attr = xmlNode.attributes[i];
                    var value = attr.value;
                    if (attr.name === 'id') {
                        bHasId = true;
                        value = getId(oView, xmlNode);
                    }
                    aResult.push(attr.name + '="' + encodeXML(value) + '" ');
                }
                if (bRoot === true) {
                    aResult.push('data-sap-ui-preserve' + '="' + oView.getId() + '" ');
                    if (!bHasId) {
                        aResult.push('id' + '="' + oView.getId() + '" ');
                    }
                }
                aResult.push('>');
                var oContent = xmlNode;
                if (window.HTMLTemplateElement && xmlNode instanceof HTMLTemplateElement && xmlNode.content instanceof DocumentFragment) {
                    oContent = xmlNode.content;
                }
                parseChildren(oContent);
                aResult.push('</' + sLocalName + '>');
            } else if (sLocalName === 'FragmentDefinition' && xmlNode.namespaceURI === 'sap.ui.core') {
                parseChildren(xmlNode, false, true);
            } else {
                pResultChain = pResultChain.then(function () {
                    return createControlOrExtension(xmlNode).then(function (aChildControls) {
                        for (var i = 0; i < aChildControls.length; i++) {
                            var oChild = aChildControls[i];
                            if (oView.getMetadata().hasAggregation('content')) {
                                oView.addAggregation('content', oChild);
                            } else if (oView.getMetadata().hasAssociation('content')) {
                                oView.addAssociation('content', oChild);
                            }
                        }
                        return aChildControls;
                    });
                });
                aResult.push(pResultChain);
            }
        } else if (xmlNode.nodeType === 3 && !bIgnoreTopLevelTextNodes) {
            var text = xmlNode.textContent || xmlNode.text, parentName = localName(xmlNode.parentNode);
            if (text) {
                if (parentName != 'style') {
                    text = encodeXML(text);
                }
                aResult.push(text);
            }
        }
    }
    function parseChildren(xmlNode, bRoot, bIgnoreToplevelTextNodes) {
        var children = xmlNode.childNodes;
        for (var i = 0; i < children.length; i++) {
            parseNode(children[i], bRoot, bIgnoreToplevelTextNodes);
        }
    }
    function findControlClass(sNamespaceURI, sLocalName) {
        var sClassName;
        var mLibraries = sap.ui.getWCCore().getLoadedLibraries();
        jQuery.each(mLibraries, function (sLibName, oLibrary) {
            if (sNamespaceURI === oLibrary.namespace || sNamespaceURI === oLibrary.name) {
                sClassName = oLibrary.name + '.' + (oLibrary.tagNames && oLibrary.tagNames[sLocalName] || sLocalName);
            }
        });
        sClassName = sClassName || sNamespaceURI + '.' + sLocalName;
        function getObjectFallback(oClassObject) {
            if (!oClassObject) {
                Log.error('Control \'' + sClassName + '\' did not return a class definition from sap.ui.define.', '', 'XMLTemplateProcessor');
                oClassObject = ObjectPath.get(sClassName);
            }
            if (!oClassObject) {
                Log.error('Can\'t find object class \'' + sClassName + '\' for XML-view', '', 'XMLTemplateProcessor');
            }
            return oClassObject;
        }
        var sResourceName = sClassName.replace(/\./g, '/');
        var oClassObject = sap.ui.require(sResourceName);
        if (!oClassObject) {
            if (bAsync) {
                return new Promise(function (resolve) {
                    sap.ui.require([sResourceName], function (oClassObject) {
                        oClassObject = getObjectFallback(oClassObject);
                        resolve(oClassObject);
                    });
                });
            } else {
                oClassObject = sap.ui.requireSync(sResourceName);
                oClassObject = getObjectFallback(oClassObject);
            }
        }
        return oClassObject;
    }
    function createControls(node) {
        if (node.namespaceURI === 'http://www.w3.org/1999/xhtml' || node.namespaceURI === 'http://www.w3.org/2000/svg') {
            var id = node.attributes['id'] ? node.attributes['id'].textContent || node.attributes['id'].text : null;
            if (bEnrichFullIds) {
                return XMLTemplateProcessor.enrichTemplateIdsPromise(node, oView, bAsync).then(function () {
                    return [];
                });
            } else {
                var fnCreateView = function (oViewClass) {
                    var mViewParameters = {
                        id: id ? getId(oView, node, id) : undefined,
                        xmlNode: node,
                        containingView: oView._oContainingView,
                        processingMode: oView._sProcessingMode
                    };
                    if (oView.fnScopedRunWithOwner) {
                        return oView.fnScopedRunWithOwner(function () {
                            return new oViewClass(mViewParameters);
                        });
                    }
                    return new oViewClass(mViewParameters);
                };
                if (bAsync) {
                    return new Promise(function (resolve, reject) {
                        sap.ui.require(['sap/ui/core/mvc/XMLView'], function (XMLView) {
                            resolve([fnCreateView(XMLView)]);
                        });
                    });
                } else {
                    var XMLView = sap.ui.requireSync('sap/ui/core/mvc/XMLView');
                    return SyncPromise.resolve([fnCreateView(XMLView)]);
                }
            }
        } else {
            return createControlOrExtension(node);
        }
    }
    function createControlOrExtension(node) {
        if (localName(node) === 'ExtensionPoint' && node.namespaceURI === 'sap.ui.core') {
            if (bEnrichFullIds) {
                return SyncPromise.resolve([]);
            } else {
                var oContainer = oView instanceof View ? oView._oContainingView : oView;
                return SyncPromise.resolve(ExtensionPoint._factory(oContainer, node.getAttribute('name'), function () {
                    var pChild = SyncPromise.resolve();
                    var aChildControlPromises = [];
                    var children = node.childNodes;
                    for (var i = 0; i < children.length; i++) {
                        var oChildNode = children[i];
                        if (oChildNode.nodeType === 1) {
                            pChild = pChild.then(createControls.bind(null, oChildNode));
                            aChildControlPromises.push(pChild);
                        }
                    }
                    return SyncPromise.all(aChildControlPromises).then(function (aChildControl) {
                        var aDefaultContent = [];
                        aChildControl.forEach(function (aControls) {
                            aDefaultContent = aDefaultContent.concat(aControls);
                        });
                        return aDefaultContent;
                    });
                }));
            }
        } else {
            var vClass = findControlClass(node.namespaceURI, localName(node));
            if (vClass && typeof vClass.then === 'function') {
                return vClass.then(function (fnClass) {
                    return createRegularControls(node, fnClass);
                });
            } else {
                return createRegularControls(node, vClass);
            }
        }
    }
    function createRegularControls(node, oClass) {
        var ns = node.namespaceURI, mSettings = {}, sStyleClasses = '', aCustomData = [], mCustomSettings = null, sSupportData = null;
        if (!oClass) {
            return SyncPromise.resolve([]);
        }
        var oMetadata = oClass.getMetadata();
        var mKnownSettings = oMetadata.getAllSettings();
        if (!bEnrichFullIds) {
            for (var i = 0; i < node.attributes.length; i++) {
                var attr = node.attributes[i], sName = attr.name, oInfo = mKnownSettings[sName], sValue = attr.value;
                if (sName === 'id') {
                    mSettings[sName] = getId(oView, node, sValue);
                } else if (sName === 'class') {
                    sStyleClasses += sValue;
                } else if (sName === 'viewName') {
                    mSettings[sName] = sValue;
                } else if (sName === 'fragmentName') {
                    mSettings[sName] = sValue;
                    mSettings['containingView'] = oView._oContainingView;
                } else if (sName === 'binding' && !oInfo || sName === 'objectBindings') {
                    var oBindingInfo = ManagedObject.bindingParser(sValue, oView._oContainingView.oController);
                    if (oBindingInfo) {
                        mSettings.objectBindings = mSettings.objectBindings || {};
                        mSettings.objectBindings[oBindingInfo.model || undefined] = oBindingInfo;
                    }
                } else if (sName === 'metadataContexts') {
                    var mMetaContextsInfo = null;
                    try {
                        mMetaContextsInfo = XMLTemplateProcessor._calculatedModelMapping(sValue, oView._oContainingView.oController, true);
                    } catch (e) {
                        Log.error(oView + ':' + e.message);
                    }
                    if (mMetaContextsInfo) {
                        mSettings.metadataContexts = mMetaContextsInfo;
                        if (XMLTemplateProcessor._preprocessMetadataContexts) {
                            XMLTemplateProcessor._preprocessMetadataContexts(oClass.getMetadata().getName(), mSettings, oView._oContainingView.oController);
                        }
                    }
                } else if (sName.indexOf(':') > -1) {
                    if (attr.namespaceURI === 'http://schemas.sap.com/sapui5/extension/sap.ui.core.CustomData/1') {
                        var sLocalName = localName(attr);
                        aCustomData.push(new CustomData({
                            key: sLocalName,
                            value: parseScalarType('any', sValue, sLocalName, oView._oContainingView.oController)
                        }));
                    } else if (attr.namespaceURI === 'http://schemas.sap.com/sapui5/extension/sap.ui.core.support.Support.info/1') {
                        sSupportData = sValue;
                    } else if (attr.namespaceURI && attr.namespaceURI.indexOf('http://schemas.sap.com/sapui5/preprocessorextension/') === 0) {
                        Log.debug(oView + ': XMLView parser ignored preprocessor attribute \'' + sName + '\' (value: \'' + sValue + '\')');
                    } else if (sName.indexOf('xmlns:') !== 0) {
                        if (!mCustomSettings) {
                            mCustomSettings = {};
                        }
                        if (!mCustomSettings.hasOwnProperty(attr.namespaceURI)) {
                            mCustomSettings[attr.namespaceURI] = {};
                        }
                        mCustomSettings[attr.namespaceURI][localName(attr)] = attr.nodeValue;
                        Log.debug(oView + ': XMLView parser encountered unknown attribute \'' + sName + '\' (value: \'' + sValue + '\') with unknown namespace, stored as sap-ui-custom-settings of customData');
                    }
                } else if (oInfo && oInfo._iKind === 0) {
                    mSettings[sName] = parseScalarType(oInfo.type, sValue, sName, oView._oContainingView.oController);
                } else if (oInfo && oInfo._iKind === 1 && oInfo.altTypes) {
                    mSettings[sName] = parseScalarType(oInfo.altTypes[0], sValue, sName, oView._oContainingView.oController);
                } else if (oInfo && oInfo._iKind === 2) {
                    var oBindingInfo = ManagedObject.bindingParser(sValue, oView._oContainingView.oController);
                    if (oBindingInfo) {
                        mSettings[sName] = oBindingInfo;
                    } else {
                        Log.error(oView + ': aggregations with cardinality 0..n only allow binding paths as attribute value (wrong value: ' + sName + '=\'' + sValue + '\')');
                    }
                } else if (oInfo && oInfo._iKind === 3) {
                    mSettings[sName] = createId(sValue);
                } else if (oInfo && oInfo._iKind === 4) {
                    mSettings[sName] = sValue.split(/[\s,]+/g).filter(identity).map(createId);
                } else if (oInfo && oInfo._iKind === 5) {
                    var vEventHandler = EventHandlerResolver.resolveEventHandler(sValue, oView._oContainingView.oController);
                    if (vEventHandler) {
                        mSettings[sName] = vEventHandler;
                    } else {
                        Log.warning(oView + ': event handler function "' + sValue + '" is not a function or does not exist in the controller.');
                    }
                } else if (oInfo && oInfo._iKind === -1) {
                    if (View.prototype.isPrototypeOf(oClass.prototype) && sName == 'async') {
                        mSettings[sName] = parseScalarType(oInfo.type, sValue, sName, oView._oContainingView.oController);
                    } else {
                        Log.warning(oView + ': setting \'' + sName + '\' for class ' + oMetadata.getName() + ' (value:\'' + sValue + '\') is not supported');
                    }
                } else {
                    assert(sName === 'xmlns', oView + ': encountered unknown setting \'' + sName + '\' for class ' + oMetadata.getName() + ' (value:\'' + sValue + '\')');
                    if (XMLTemplateProcessor._supportInfo) {
                        XMLTemplateProcessor._supportInfo({
                            context: node,
                            env: {
                                caller: 'createRegularControls',
                                error: true,
                                info: 'unknown setting \'' + sName + '\' for class ' + oMetadata.getName()
                            }
                        });
                    }
                }
            }
            if (mCustomSettings) {
                aCustomData.push(new CustomData({
                    key: 'sap-ui-custom-settings',
                    value: mCustomSettings
                }));
            }
            if (aCustomData.length > 0) {
                mSettings.customData = aCustomData;
            }
        }
        var handleChildren = getHandleChildrenStrategy(bAsync, handleChild);
        function handleChild(node, oAggregation, mAggregations, childNode, bActivate) {
            var oNamedAggregation;
            if (childNode.nodeType === 1) {
                if (childNode.namespaceURI === 'http://schemas.sap.com/sapui5/extension/sap.ui.core.xmlcomposite/1') {
                    mSettings[localName(childNode)] = childNode.querySelector('*');
                    return;
                }
                oNamedAggregation = childNode.namespaceURI === ns && mAggregations && mAggregations[localName(childNode)];
                if (oNamedAggregation) {
                    return handleChildren(childNode, oNamedAggregation);
                } else if (oAggregation) {
                    if (!bActivate && childNode.getAttribute('stashed') === 'true' && !bEnrichFullIds) {
                        StashedControlSupport.createStashedControl(getId(oView, childNode), {
                            sParentId: mSettings['id'],
                            sParentAggregationName: oAggregation.name,
                            fnCreate: function () {
                                var bPrevAsync = bAsync;
                                bAsync = false;
                                try {
                                    return unwrapSyncPromise(handleChild(node, oAggregation, mAggregations, childNode, true));
                                } finally {
                                    bAsync = bPrevAsync;
                                }
                            }
                        });
                        return;
                    }
                    return createControls(childNode).then(function (aControls) {
                        for (var j = 0; j < aControls.length; j++) {
                            var oControl = aControls[j];
                            var name = oAggregation.name;
                            if (oAggregation.multiple) {
                                if (!mSettings[name]) {
                                    mSettings[name] = [];
                                }
                                if (typeof mSettings[name].path === 'string') {
                                    assert(!mSettings[name].template, 'list bindings support only a single template object');
                                    mSettings[name].template = oControl;
                                } else {
                                    mSettings[name].push(oControl);
                                }
                            } else {
                                assert(!mSettings[name], 'multiple aggregates defined for aggregation with cardinality 0..1');
                                mSettings[name] = oControl;
                            }
                        }
                        return aControls;
                    });
                } else if (localName(node) !== 'FragmentDefinition' || node.namespaceURI !== 'sap.ui.core') {
                    throw new Error('Cannot add direct child without default aggregation defined for control ' + oMetadata.getElementName());
                }
            } else if (childNode.nodeType === 3) {
                if (jQuery.trim(childNode.textContent || childNode.text)) {
                    throw new Error('Cannot add text nodes as direct child of an aggregation. For adding text to an aggregation, a surrounding html tag is needed: ' + jQuery.trim(childNode.textContent || childNode.text));
                }
            }
        }
        var oAggregation = oMetadata.getDefaultAggregation();
        var mAggregations = oMetadata.getAllAggregations();
        return handleChildren(node, oAggregation, mAggregations).then(function () {
            var vNewControlInstance;
            if (bEnrichFullIds && node.hasAttribute('id')) {
                setId(oView, node);
            } else if (!bEnrichFullIds) {
                if (View.prototype.isPrototypeOf(oClass.prototype) && typeof oClass._sType === 'string') {
                    var fnCreateViewInstance = function () {
                        if (oClass.getMetadata().isA('sap.ui.core.mvc.XMLView') && oView._sProcessingMode === 'sequential') {
                            mSettings.processingMode = 'sequential';
                        }
                        return View._legacyCreate(mSettings, undefined, oClass._sType);
                    };
                    if (oView.fnScopedRunWithOwner) {
                        vNewControlInstance = oView.fnScopedRunWithOwner(fnCreateViewInstance);
                    } else {
                        vNewControlInstance = fnCreateViewInstance();
                    }
                } else {
                    var fnCreateInstance = function () {
                        if (oClass.getMetadata().isA('sap.ui.core.Fragment') && node.getAttribute('type') !== 'JS' && oView._sProcessingMode === 'sequential') {
                            mSettings.processingMode = 'sequential';
                        }
                        if (oView.fnScopedRunWithOwner) {
                            return oView.fnScopedRunWithOwner(function () {
                                return new oClass(mSettings);
                            });
                        } else {
                            return new oClass(mSettings);
                        }
                    };
                    if (oParseConfig && oParseConfig.fnRunWithPreprocessor) {
                        vNewControlInstance = oParseConfig.fnRunWithPreprocessor(fnCreateInstance);
                    } else {
                        vNewControlInstance = fnCreateInstance();
                    }
                }
                if (sStyleClasses && vNewControlInstance.addStyleClass) {
                    vNewControlInstance.addStyleClass(sStyleClasses);
                }
            }
            if (!vNewControlInstance) {
                vNewControlInstance = [];
            } else if (!Array.isArray(vNewControlInstance)) {
                vNewControlInstance = [vNewControlInstance];
            }
            if (XMLTemplateProcessor._supportInfo && vNewControlInstance) {
                for (var i = 0, iLength = vNewControlInstance.length; i < iLength; i++) {
                    var oInstance = vNewControlInstance[i];
                    if (oInstance && oInstance.getId()) {
                        var iSupportIndex = XMLTemplateProcessor._supportInfo({
                                context: node,
                                env: {
                                    caller: 'createRegularControls',
                                    nodeid: node.getAttribute('id'),
                                    controlid: oInstance.getId()
                                }
                            }), sData = sSupportData ? sSupportData + ',' : '';
                        sData += iSupportIndex;
                        XMLTemplateProcessor._supportInfo.addSupportInfo(oInstance.getId(), sData);
                    }
                }
            }
            if (bDesignMode) {
                vNewControlInstance.forEach(function (oInstance) {
                    if (oMetadata.getCompositeAggregationName) {
                        var aNodes = node.getElementsByTagName(oInstance.getMetadata().getCompositeAggregationName());
                        for (var i = 0; i < aNodes.length; i++) {
                            node.removeChild(aNodes[0]);
                        }
                    }
                    oInstance._sapui_declarativeSourceInfo = {
                        xmlNode: node,
                        xmlRootNode: oView._sapui_declarativeSourceInfo.xmlRootNode,
                        fragmentName: oMetadata.getName() === 'sap.ui.core.Fragment' ? mSettings['fragmentName'] : null
                    };
                });
            }
            return vNewControlInstance;
        });
    }
    function getId(oView, xmlNode, sId) {
        if (xmlNode.getAttributeNS('http://schemas.sap.com/sapui5/extension/sap.ui.core.Internal/1', 'id')) {
            return xmlNode.getAttribute('id');
        } else {
            return createId(sId ? sId : xmlNode.getAttribute('id'));
        }
    }
    function setId(oView, xmlNode) {
        xmlNode.setAttribute('id', createId(xmlNode.getAttribute('id')));
        xmlNode.setAttributeNS('http://schemas.sap.com/sapui5/extension/sap.ui.core.Internal/1', 'id', true);
    }
}
XMLTemplateProcessor._preprocessMetadataContexts = null;
XMLTemplateProcessor._calculatedModelMapping = function (sBinding, oContext, bAllowMultipleBindings) {
    var oCtx, mBinding = {}, oBinding = ManagedObject.bindingParser(sBinding, oContext);
    function checkFormatter(aFragments) {
        if (aFragments.length % 2 === 0) {
            throw new Error('The last entry is no binding');
        }
        for (var i = 1; i <= aFragments.length; i = i + 2) {
            if (typeof aFragments[i - 1] == 'string') {
                throw new Error('Binding expected not a string');
            }
            if (aFragments[i]) {
                if (typeof aFragments[i] != 'string' || aFragments[i] != ',') {
                    throw new Error('Missing delimiter \',\'');
                }
            }
        }
    }
    if (oBinding) {
        if (!oBinding.formatter) {
            oCtx = oBinding;
            oBinding = { parts: [oCtx] };
        } else {
            checkFormatter(oBinding.formatter.textFragments);
        }
        for (var i = 0; i < oBinding.parts.length; i++) {
            oCtx = oBinding.parts[i];
            mBinding[oCtx.model] = mBinding[oCtx.model] || (bAllowMultipleBindings ? [] : null);
            if (Array.isArray(mBinding[oCtx.model])) {
                mBinding[oCtx.model].push(oCtx);
            } else {
                mBinding[oCtx.model] = oCtx;
            }
        }
    }
    return mBinding;
};
export default XMLTemplateProcessor;