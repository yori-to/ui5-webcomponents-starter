import Element from './Element.js';
import Log from '../../base/Log.js';
import assert from '../../base/assert.js';
var StashedControlSupport = {}, stashedControls = {}, StashedControl = Element.extend('sap.ui.core._StashedControl', {
        constructor: function (sId, mSettings) {
            Element.apply(this, arguments);
            mSettings.stashed = true;
            Object.assign(this, mSettings);
            this._stash(mSettings.sParentId, mSettings.sParentAggregationName);
            return this;
        },
        metadata: {
            specialSettings: {
                stashed: {
                    type: 'boolean',
                    visibility: 'hidden'
                },
                sParentId: {
                    type: 'string',
                    visibility: 'hidden'
                },
                sParentAggregationName: {
                    type: 'string',
                    visibility: 'hidden'
                },
                fnCreate: {
                    type: 'function',
                    visibility: 'hidden'
                }
            }
        }
    });
StashedControl.prototype.setParent = function () {
    Log.error('Cannot set parent on a StashedControl', this.getId());
};
StashedControl.prototype.clone = function () {
    Log.error('Cannot clone a StashedControl', this.getId());
};
StashedControl.prototype.destroy = function () {
    delete stashedControls[this.getId()];
    Element.prototype.destroy.apply(this, arguments);
};
mixInto(StashedControl, true);
StashedControlSupport.mixInto = function (fnClass, bDefaultValue) {
    assert(!fnClass.getMetadata().hasProperty('stashed'), 'StashedControlSupport: fnClass already has property \'stashed\', sideeffects possible', fnClass.getMetadata().getName());
    assert(!fnClass.prototype.setStashed, 'StashedControlSupport: fnClass already has method \'setStashed\', sideeffects possible', fnClass.getMetadata().getName());
    mixInto(fnClass, bDefaultValue);
};
function mixInto(fnClass, bDefaultValue) {
    fnClass.getMetadata().addSpecialSetting('stashed', {
        type: 'boolean',
        defaultValue: !!bDefaultValue
    });
    fnClass.prototype.setStashed = function (bStashed) {
        if (this.stashed === true && !bStashed) {
            if (this.sParentId) {
                var oControl = unstash(this, sap.ui.getWCCore().byId(this.sParentId));
                oControl.stashed = false;
                return;
            }
        } else if (bStashed) {
            Log.warning('Cannot re-stash a control', this.getId());
        }
    };
    fnClass.prototype.getStashed = function () {
        return this.stashed;
    };
    var fnDestroy = fnClass.prototype.destroy;
    fnClass.prototype.destroy = function () {
        delete stashedControls[this.getId()];
        fnDestroy.apply(this, arguments);
    };
    fnClass.prototype._stash = function (sParentId, sParentAggregationName) {
        this.sParentId = sParentId;
        this.sParentAggregationName = sParentAggregationName;
        stashedControls[this.getId()] = this;
    };
}
function unstash(oControl, oParent) {
    if (oControl instanceof StashedControl) {
        var aControls, Component, oOwnerComponent, fnCreate = oControl.fnCreate, sParentAggregationName = oControl.sParentAggregationName;
        oControl.destroy();
        Component = sap.ui.require('sap/ui/core/Component');
        oOwnerComponent = Component && Component.getOwnerComponentFor(oParent);
        if (oOwnerComponent) {
            aControls = oOwnerComponent.runAsOwner(fnCreate);
        } else {
            aControls = fnCreate();
        }
        aControls.forEach(function (c) {
            oParent.getMetadata().getAggregation(sParentAggregationName).add(oParent, c);
        });
    }
    delete stashedControls[oControl.getId()];
    return oControl;
}
function getStashedControls(bAsInstance, sParentId) {
    var aStashedChildren = [];
    for (var sId in stashedControls) {
        var vInstanceOrId = bAsInstance ? stashedControls[sId] : stashedControls[sId].getId();
        if (!sParentId || stashedControls[sId].sParentId === sParentId) {
            aStashedChildren.push(vInstanceOrId);
        }
    }
    return aStashedChildren;
}
StashedControlSupport.getStashedControlIds = function (sParentId) {
    return getStashedControls(false, sParentId);
};
StashedControlSupport.getStashedControls = function (sParentId) {
    return getStashedControls(true, sParentId);
};
StashedControlSupport.createStashedControl = function (sId, mSettings) {
    if (!mSettings.sParentId) {
        Log.error('Cannot create a StashedControl without a parent with stable ID.', 'sap.ui.core.StashedControlSupport');
    } else {
        return new StashedControl(sId, mSettings);
    }
};
export default StashedControlSupport;