import BaseObject from '../base/Object.js';
import Storage from '../util/Storage.js';
var History = BaseObject.extend('sap.ui.core.History', {
    constructor: function (sId, mSettings) {
        BaseObject.apply(this);
        if (!mSettings) {
            mSettings = {};
        }
        var sHistoryPrefix = mSettings.prefix ? mSettings.prefix : document.location.pathname;
        this._iMaxHistory = mSettings.max ? mSettings.max : 100;
        this._sHistoryId = sHistoryPrefix + sId;
        this._oStorage = new Storage(Storage.Type.local);
        this._fFilter = mSettings.filter ? mSettings.filter : function (sHistoryValue, sValue) {
            return sHistoryValue && (!sValue || sValue && (typeof sValue == 'string' ? sHistoryValue.toLowerCase().startsWith(sValue.toLowerCase()) : false));
        };
        this._fCheckHistory = mSettings.checkHistory ? mSettings.checkHistory : function (aHistory) {
            return aHistory;
        };
    },
    _initHistory: function () {
        if (!this._aHistory) {
            var aHistory = this._oStorage.get(this._sHistoryId);
            if (typeof aHistory === 'string') {
                aHistory = aHistory.split(',');
            } else if (!aHistory) {
                aHistory = [];
            }
            this._aHistory = this._fCheckHistory(aHistory);
        }
        return this._aHistory;
    },
    get: function (sValue) {
        var aHistory = this._initHistory();
        var aResult = [];
        for (var i = 0; i < aHistory.length; i++) {
            if (this._fFilter(aHistory[i], sValue)) {
                aResult.push(aHistory[i]);
            }
        }
        return aResult;
    },
    remove: function (sValue) {
        var aHistory = this._initHistory();
        for (var i = 0; i < aHistory.length; i++) {
            if (aHistory[i] == sValue) {
                aHistory.splice(i, 1);
                break;
            }
        }
    },
    add: function (sValue) {
        var aHistory = this._initHistory();
        for (var i = 0; i < aHistory.length; i++) {
            if (aHistory[i] === sValue) {
                aHistory.splice(i, 1);
                break;
            }
        }
        aHistory.unshift(sValue);
        if (aHistory.length > this._iMaxHistory) {
            aHistory.splice(this._iMaxHistory);
        }
        this._oStorage.put(this._sHistoryId, aHistory);
    },
    clear: function () {
        this._oStorage.remove(this._sHistoryId);
        this._aHistory = null;
    }
});
export default History;