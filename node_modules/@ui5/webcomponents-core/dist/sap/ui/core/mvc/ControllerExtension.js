import BaseObject from '../../base/Object.js';
import Metadata from '../../base/Metadata.js';
import ControllerMetadata from './ControllerMetadata.js';
import OverrideExecution from './OverrideExecution.js';
import uid from '../../../base/util/uid.js';
import Log from '../../../base/Log.js';
var ControllerExtension = BaseObject.extend('sap.ui.core.mvc.ControllerExtension', {
    metadata: {
        stereotype: 'controllerextension',
        methods: {
            'byId': {
                'public': true,
                'final': true
            },
            'getView': {
                'public': true,
                'final': true
            },
            'getInterface': {
                'public': false,
                'final': true
            }
        }
    },
    _setController: function (oController) {
        this.base = oController;
    },
    byId: function (sId) {
        var sNamespace = this.getMetadata().getNamespace();
        sId = sNamespace + '.' + sId;
        return this.base ? this.base.byId(sId) : undefined;
    },
    getView: function () {
        return this.base.getView();
    },
    getInterface: function () {
        var mMethods = {};
        var oMetadata = this.getMetadata();
        var aPublicMethods = oMetadata.getAllPublicMethods();
        aPublicMethods.forEach(function (sMethod) {
            var fnFunction = this[sMethod];
            if (typeof fnFunction === 'function') {
                mMethods[sMethod] = function () {
                    var tmp = fnFunction.apply(this, arguments);
                    return tmp instanceof ControllerExtension ? tmp.getInterface() : tmp;
                }.bind(this);
            }
        }.bind(this));
        this.getInterface = function () {
            return mMethods;
        };
        return mMethods;
    }
}, ControllerMetadata);
ControllerExtension.override = function (oExtension) {
    var oClass = Metadata.createClass(this, 'anonymousExtension~' + uid(), {}, ControllerMetadata);
    oClass.getMetadata()._staticOverride = oExtension;
    oClass.getMetadata()._override = this.getMetadata()._override;
    return oClass;
};
ControllerExtension.overrideMethod = function (sMemberName, oOrigDef, oCustomDef, oContext, sOverrideExecution) {
    var fnOri = oOrigDef[sMemberName];
    var fnCust = oCustomDef[sMemberName];
    sOverrideExecution = sOverrideExecution || OverrideExecution.Instead;
    function wrapMethod(bBefore) {
        (function (fnCust, fnOri, oContext, bBefore) {
            oOrigDef[sMemberName] = function () {
                if (bBefore) {
                    fnCust.apply(oContext, arguments);
                    return fnOri.apply(oOrigDef, arguments);
                } else {
                    fnOri.apply(oOrigDef, arguments);
                    return fnCust.apply(oContext, arguments);
                }
            };
        }(fnCust, fnOri, oContext, bBefore));
    }
    if (typeof fnCust === 'function' && oContext) {
        fnCust = fnCust.bind(oContext);
    }
    switch (sOverrideExecution) {
    case OverrideExecution.Before:
        if (fnOri && typeof fnOri === 'function') {
            wrapMethod(true);
        } else if (typeof fnCust === 'function') {
            oOrigDef[sMemberName] = fnCust;
        } else {
            Log.error('Controller extension failed: lifecycleMethod \'' + sMemberName + '\', is not a function');
        }
        break;
    case OverrideExecution.After:
        if (fnOri && typeof fnOri === 'function') {
            wrapMethod(false);
        } else if (typeof fnCust === 'function') {
            oOrigDef[sMemberName] = fnCust;
        } else {
            Log.error('Controller extension failed: lifecycleMethod \'' + sMemberName + '\', is not a function');
        }
        break;
    case OverrideExecution.Instead:
    default:
        if (sMemberName in oOrigDef) {
            Log.debug('Overriding  member \'' + sMemberName + '\' of extension ' + this.getMetadata().getName());
            if (!this.getMetadata().isMethodFinal(sMemberName)) {
                oOrigDef[sMemberName] = fnCust;
            } else {
                Log.error('Error in ControllerExtension.override: Method \'' + sMemberName + '\' of extension \'' + this.getMetadata().getName() + '\' is flagged final and cannot be overridden!');
            }
        } else {
            oOrigDef[sMemberName] = fnCust;
        }
        break;
    }
};
export default ControllerExtension;