import jQuery from '../../thirdparty/jquery.js';
import View from './View.js';
import HTMLViewRenderer from './HTMLViewRenderer.js';
import merge from '../../../base/util/merge.js';
import ManagedObject from '../../base/ManagedObject.js';
import DeclarativeSupport from '../DeclarativeSupport.js';
import library from '../library.js';
import ResourceModel from '../../model/resource/ResourceModel.js';
import LoaderExtensions from '../../../base/util/LoaderExtensions.js';
var ViewType = library.mvc.ViewType;
var HTMLView = View.extend('sap.ui.core.mvc.HTMLView', { metadata: { library: 'sap.ui.core' } });
HTMLView.create = function (mOptions) {
    var mParameters = merge({}, mOptions);
    mParameters.type = ViewType.HTML;
    return View.create(mParameters);
};
sap.ui.htmlview = function (sId, vView) {
    return sap.ui.view(sId, vView, ViewType.HTML);
};
HTMLView._sType = ViewType.HTML;
HTMLView.asyncSupport = true;
HTMLView._mTemplates = {};
HTMLView._mAllowedSettings = {
    'viewName': true,
    'controller': true,
    'viewContent': true,
    'definition': true,
    'controllerName': true,
    'resourceBundleName': true,
    'resourceBundleUrl': true,
    'resourceBundleLocale': true,
    'resourceBundleAlias': true
};
HTMLView._getTemplate = function (sTemplateName, mOptions) {
    var sUrl = this._getViewUrl(sTemplateName);
    var sHTML = this._mTemplates[sUrl];
    if (!sHTML) {
        sHTML = this._loadTemplate(sTemplateName, mOptions);
        if (mOptions && mOptions.async) {
            var that = this;
            return sHTML.then(function (_sHTML) {
                that._mTemplates[sUrl] = _sHTML;
                return Promise.resolve(_sHTML);
            });
        } else {
            this._mTemplates[sUrl] = sHTML;
        }
    }
    return mOptions.async ? Promise.resolve(sHTML) : sHTML;
};
HTMLView.prototype.getControllerName = function () {
    return this._controllerName;
};
HTMLView._getViewUrl = function (sTemplateName) {
    return sap.ui.require.toUrl(sTemplateName.replace(/\./g, '/')) + '.view.html';
};
HTMLView._loadTemplate = function (sTemplateName, mOptions) {
    var sResourceName = sTemplateName.replace(/\./g, '/') + '.view.html';
    return LoaderExtensions.loadResource(sResourceName, mOptions);
};
HTMLView.prototype.initViewSettings = function (mSettings) {
    if (!mSettings) {
        throw new Error('mSettings must be given');
    }
    if (mSettings.viewName && mSettings.viewContent) {
        throw new Error('View name and view content are given. There is no point in doing this, so please decide.');
    } else if (!mSettings.viewName && !mSettings.viewContent) {
        throw new Error('Neither view name nor view content is given. One of them is required.');
    }
    var that = this;
    function fnInitViewSettings() {
        that._oTemplate = document.createElement('div');
        if (typeof vHTML === 'string') {
            that._oTemplate.innerHTML = vHTML;
        } else {
            var oNodeList = vHTML;
            var oFragment = document.createDocumentFragment();
            for (var i = 0; i < oNodeList.length; i++) {
                oFragment.appendChild(oNodeList.item(i));
            }
            that._oTemplate.appendChild(oFragment);
        }
        var oMetaElement = that._oTemplate.getElementsByTagName('template')[0];
        var oProperties = that.getMetadata().getAllProperties();
        if (oMetaElement) {
            jQuery.each(oMetaElement.attributes, function (iIndex, oAttr) {
                var sName = DeclarativeSupport.convertAttributeToSettingName(oAttr.name, that.getId());
                var sValue = oAttr.value;
                var oProperty = oProperties[sName];
                if (!mSettings[sName]) {
                    if (oProperty) {
                        mSettings[sName] = DeclarativeSupport.convertValueToType(DeclarativeSupport.getPropertyDataType(oProperty), sValue);
                    } else if (HTMLView._mAllowedSettings[sName]) {
                        mSettings[sName] = sValue;
                    }
                }
            });
            that._oTemplate = oMetaElement;
        }
        if (that._oTemplate.content) {
            var oFragment = that._oTemplate.content;
            that._oTemplate = document.createElement('div');
            that._oTemplate.appendChild(oFragment);
        }
        if (mSettings.controllerName) {
            that._controllerName = mSettings.controllerName;
        }
        if ((mSettings.resourceBundleName || mSettings.resourceBundleUrl) && (!mSettings.models || !mSettings.models[mSettings.resourceBundleAlias])) {
            var oModel = new ResourceModel({
                bundleName: mSettings.resourceBundleName,
                bundleUrl: mSettings.resourceBundleUrl,
                bundleLocale: mSettings.resourceBundleLocale,
                async: mSettings.async
            });
            var vBundle = oModel.getResourceBundle();
            if (vBundle instanceof Promise) {
                return vBundle.then(function () {
                    that.setModel(oModel, mSettings.resourceBundleAlias);
                });
            }
            that.setModel(oModel, mSettings.resourceBundleAlias);
        }
    }
    var vHTML = mSettings.viewContent;
    if (!vHTML) {
        vHTML = HTMLView._getTemplate(mSettings.viewName, { async: mSettings.async });
    }
    if (mSettings.async) {
        return vHTML.then(function (_vHTML) {
            vHTML = _vHTML;
            return fnInitViewSettings();
        });
    }
    fnInitViewSettings();
};
HTMLView.prototype.onControllerConnected = function (oController) {
    var that = this;
    ManagedObject.runWithPreprocessors(function () {
        DeclarativeSupport.compile(that._oTemplate, that);
    }, { settings: this._fnSettingsPreprocessor });
};
HTMLView.prototype.exit = function () {
    this._oTemplate = null;
    View.prototype.exit.call(this);
    if (this._connectedControls) {
        for (var i = 0; i < this._connectedControls.length; i++) {
            this._connectedControls[i].destroy();
        }
        this._connectedControls = null;
    }
};
HTMLView.prototype.connectControl = function (oControl) {
    this._connectedControls = this._connectedControls || [];
    this._connectedControls.push(oControl);
};
export default HTMLView;