import jQuery from '../../thirdparty/jquery.js';
import View from './View.js';
import JSViewRenderer from './JSViewRenderer.js';
import merge from '../../../base/util/merge.js';
import ManagedObject from '../../base/ManagedObject.js';
import library from '../library.js';
import Log from '../../../base/Log.js';
var JSView = View.extend('sap.ui.core.mvc.JSView', { metadata: { library: 'sap.ui.core' } });
var mRegistry = {};
JSView.asyncSupport = true;
var ViewType = library.mvc.ViewType;
JSView.create = function (mOptions) {
    var mParameters = merge({}, mOptions);
    for (var sOption in mParameters) {
        if (sOption === 'definition' || sOption === 'preprocessors') {
            delete mParameters[sOption];
            Log.warning('JSView.create does not support the options definition or preprocessor!');
        }
    }
    mParameters.type = ViewType.JS;
    return View.create(mParameters);
};
sap.ui.jsview = function (sId, vView, bAsync) {
    var fnLogDeprecation = function (sMethod) {
        Log[sMethod]('Do not use deprecated view factory functions.' + 'Use the static create function on the specific view module instead: [XML|JS|HTML|JSON]View.create().', 'sap.ui.view', null, function () {
            return {
                type: 'sap.ui.view',
                name: sId || vView && vView.name
            };
        });
    };
    if (vView && vView.async) {
        fnLogDeprecation('info');
    } else {
        fnLogDeprecation('warning');
    }
    return viewFactory.apply(this, arguments);
};
function viewFactory(sId, vView, bAsync) {
    var mSettings = {}, oView;
    if (vView && typeof vView == 'string') {
        mSettings.viewName = vView;
        if (typeof arguments[2] == 'boolean') {
            mSettings.async = bAsync;
        } else if (typeof arguments[2] == 'object') {
            mSettings.controller = arguments[2];
            mSettings.async = !!arguments[3];
        }
        oView = new JSView(sId, mSettings);
        return oView;
    } else if (vView && typeof vView == 'object') {
        mRegistry[sId] = vView;
        sap.ui.loader._.declareModule(sId.replace(/\./g, '/') + '.view.js');
        Log.info('For defining views use JSView.extend instead.');
    } else if (arguments.length == 1 && typeof sId == 'string' || arguments.length == 2 && typeof arguments[0] == 'string' && typeof arguments[1] == 'boolean') {
        mSettings.viewName = arguments[0];
        mSettings.async = !!arguments[1];
        oView = mSettings.id ? new JSView(mSettings.id, mSettings) : new JSView(mSettings);
        return oView;
    } else {
        throw new Error('Wrong arguments (\'' + sId + '\', \'' + vView + '\')! Either call sap.ui.jsview([sId,] sViewName) to instantiate a View or sap.ui.jsview(sViewName, oViewImpl) to define a View type.');
    }
}
JSView.prototype.initViewSettings = function (mSettings) {
    var oPromise;
    if (!mRegistry[mSettings.viewName]) {
        var sModuleName = mSettings.viewName.replace(/\./g, '/') + '.view';
        if (mSettings.async) {
            oPromise = new Promise(function (resolve) {
                sap.ui.require([sModuleName], resolve);
            });
        } else {
            sap.ui.requireSync(sModuleName);
        }
    }
    if (mSettings.async) {
        return Promise.resolve(oPromise).then(function () {
            jQuery.extend(this, mRegistry[mSettings.viewName]);
        }.bind(this));
    }
    jQuery.extend(this, mRegistry[mSettings.viewName]);
};
JSView.prototype.onControllerConnected = function (oController) {
    ManagedObject.runWithPreprocessors(function () {
        this.applySettings({ content: this.createContent(oController) });
    }, {
        id: this.getAutoPrefixId() ? this.createId.bind(this) : undefined,
        settings: this._fnSettingsPreprocessor
    }, this);
};
JSView.prototype.getAutoPrefixId = function () {
    return false;
};
export default JSView;