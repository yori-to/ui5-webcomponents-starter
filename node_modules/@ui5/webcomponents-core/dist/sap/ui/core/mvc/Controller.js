import ObjectPath from '../../../base/util/ObjectPath.js';
import EventProvider from '../../base/EventProvider.js';
import ManagedObject from '../../base/ManagedObject.js';
import ControllerMetadata from './ControllerMetadata.js';
import ControllerExtension from './ControllerExtension.js';
import OverrideExecution from './OverrideExecution.js';
import Log from '../../../base/Log.js';
import jQuery from '../../thirdparty/jquery.js';
var mRegistry = {};
var mExtensionProvider = {};
var Controller = EventProvider.extend('sap.ui.core.mvc.Controller', {
    metadata: {
        stereotype: 'controller',
        methods: {
            'byId': {
                'public': true,
                'final': true
            },
            'getView': {
                'public': true,
                'final': true
            },
            'getInterface': {
                'public': false,
                'final': true
            },
            'onInit': {
                'public': false,
                'final': false,
                'overrideExecution': OverrideExecution.After
            },
            'onExit': {
                'public': false,
                'final': false,
                'overrideExecution': OverrideExecution.Before
            },
            'onBeforeRendering': {
                'public': false,
                'final': false,
                'overrideExecution': OverrideExecution.Before
            },
            'onAfterRendering': {
                'public': false,
                'final': false,
                'overrideExecution': OverrideExecution.After
            }
        }
    },
    constructor: function (sName) {
        var oToExtend = null;
        if (typeof sName == 'string') {
            if (!mRegistry[sName]) {
                Log.warning('Do not call sap.ui.core.mvc.Controller constructor for non typed scenario!');
            }
            oToExtend = mRegistry[sName];
        }
        EventProvider.apply(this, arguments);
        if (oToExtend) {
            jQuery.extend(this, mRegistry[sName]);
        }
        if (this.extension) {
            throw new Error('The keyword \'extension\' cannot be used as a member of a controller');
        }
        this['_sapui_Extensions'] = {};
        Controller.extendByMember(this, false);
        this._sapui_isExtended = false;
    },
    _isExtended: function () {
        return this._sapui_isExtended;
    },
    getInterface: function () {
        var mMethods = {};
        var oMetadata = this.getMetadata();
        var aPublicMethods = oMetadata.getAllPublicMethods();
        aPublicMethods.forEach(function (sMethod) {
            var fnFunction = this[sMethod];
            if (typeof fnFunction === 'function') {
                mMethods[sMethod] = function () {
                    var tmp = fnFunction.apply(this, arguments);
                    return tmp instanceof Controller ? tmp.getInterface() : tmp;
                }.bind(this);
            }
        }.bind(this));
        this.getInterface = function () {
            return mMethods;
        };
        return mMethods;
    }
}, ControllerMetadata);
function applyExtension(oController, oExtension, sLocalNamespace) {
    var sNamespace = oExtension.getMetadata().getName();
    var oControllerMetadata = oController.getMetadata();
    var oExtensions = oController['_sapui_Extensions'];
    var oInterface = oController.getInterface();
    var mLifecycleConfig = ControllerExtension.getMetadata().getLifecycleConfiguration();
    var oExtensionInfo = {
        namespace: sNamespace,
        extension: oExtension,
        reloadNeeded: false
    };
    oExtension._setController(oInterface);
    if (oExtension.getMetadata().hasOverrides()) {
        var sExtensionOverride, oOrigExtensionInfo, oOrigExtensionMetadata, sOverrideMember, oOverrides = oExtension.getMetadata().getOverrides(), oStaticOverrides = oExtension.getMetadata().getStaticOverrides();
        for (sOverrideMember in oStaticOverrides) {
            oOrigExtensionMetadata = oExtension.getMetadata();
            if (!oOrigExtensionMetadata.isMethodFinal(sOverrideMember)) {
                ControllerExtension.overrideMethod(sOverrideMember, oExtension, oStaticOverrides, oExtension, oOrigExtensionMetadata.getOverrideExecution(sOverrideMember));
            } else {
                Log.error('Method \'' + sOverrideMember + '\' of extension \'' + sNamespace + '\' is flagged final and cannot be overridden by calling \'override\'');
            }
        }
        for (sOverrideMember in oOverrides) {
            if (sOverrideMember !== 'extension') {
                if (sOverrideMember in oExtension.base) {
                    Log.debug('Overriding  member \'' + sOverrideMember + '\' of original controller.');
                    var vMember = oOverrides[sOverrideMember];
                    var fnOriginal = oController[sOverrideMember];
                    if (typeof fnOriginal == 'object' && typeof vMember == 'object') {
                        oOrigExtensionInfo = oExtensions[sOverrideMember];
                        oOrigExtensionMetadata = oOrigExtensionInfo.extension.getMetadata();
                        for (sExtensionOverride in vMember) {
                            if (!oOrigExtensionMetadata.isMethodFinal(sExtensionOverride)) {
                                ControllerExtension.overrideMethod(sExtensionOverride, fnOriginal, vMember, oExtension, oOrigExtensionMetadata.getOverrideExecution(sExtensionOverride));
                            } else {
                                Log.error('Method \'' + sExtensionOverride + '\' of extension \'' + oOrigExtensionInfo.namespace + '\' is flagged final and cannot be overridden by extension \'' + sNamespace + '\'');
                            }
                        }
                    } else if (!oControllerMetadata.isMethodFinal(sOverrideMember)) {
                        ControllerExtension.overrideMethod(sOverrideMember, oController, oOverrides, oExtension, oControllerMetadata.getOverrideExecution(sOverrideMember));
                    } else {
                        Log.error('Method \'' + sOverrideMember + '\' of controller \'' + oController.getMetadata().getName() + '\' is flagged final and cannot be overridden by extension \'' + sNamespace + '\'');
                    }
                } else if (sOverrideMember in mLifecycleConfig) {
                    ControllerExtension.overrideMethod(sOverrideMember, oController, oOverrides, oExtension, oControllerMetadata.getOverrideExecution(sOverrideMember));
                } else {
                    Log.error('Method \'' + sExtensionOverride + '\' of extension \'' + oOrigExtensionInfo.namespace + ' does not exist in controller ' + oController.getMetadata().getName() + ' and cannot be overridden');
                }
            }
            if (oOverrides.extension) {
                for (var sExtensionNamespace in oOverrides.extension) {
                    oOrigExtensionMetadata = oExtensions[sExtensionNamespace].extension.getMetadata();
                    var oOrigExtensionInterface = ObjectPath.create(sExtensionNamespace, oController.extension);
                    var oOrigExtension = oExtensions[sExtensionNamespace].extension;
                    var oExtensionOverrides = oOverrides.extension[sExtensionNamespace];
                    for (sExtensionOverride in oExtensionOverrides) {
                        if (!oOrigExtensionMetadata.isMethodFinal(sExtensionOverride)) {
                            ControllerExtension.overrideMethod(sExtensionOverride, oOrigExtensionInterface, oExtensionOverrides, oExtension, oOrigExtensionMetadata.getOverrideExecution(sExtensionOverride));
                            ControllerExtension.overrideMethod(sExtensionOverride, oOrigExtension, oExtensionOverrides, oExtension, oOrigExtensionMetadata.getOverrideExecution(sExtensionOverride));
                        } else {
                            Log.error('Method \'' + sExtensionOverride + '\' of extension \'' + sExtensionNamespace + '\' is flagged final and cannot be overridden by extension \'' + sNamespace + '\'');
                        }
                    }
                }
            }
            oExtensionInfo.reloadNeeded = true;
        }
    }
    var oExtensionInterface = oExtension.getInterface();
    if (sLocalNamespace) {
        oExtensions[sLocalNamespace] = oExtensionInfo;
        oExtensionInfo.location = sLocalNamespace;
        oController[sLocalNamespace] = oExtensionInterface;
        oInterface[sLocalNamespace] = oExtensionInterface;
    } else {
        oExtensions[sNamespace] = oExtensionInfo;
        oExtensionInfo.location = 'extension.' + sNamespace;
        ObjectPath.set('extension.' + sNamespace, oExtensionInterface, oController);
        ObjectPath.set('extension.' + sNamespace, oExtensionInterface, oInterface);
    }
}
function mixinControllerDefinition(oController, CustomControllerDef, sLocalNameSpace) {
    if (CustomControllerDef instanceof ControllerExtension) {
        applyExtension(oController, CustomControllerDef, sLocalNameSpace);
    } else if (CustomControllerDef.getMetadata && CustomControllerDef.getMetadata().getStereotype() == 'controllerextension') {
        var oControllerExtension = new CustomControllerDef();
        applyExtension(oController, oControllerExtension, sLocalNameSpace);
    } else {
        var mLifecycleConfig = ControllerExtension.getMetadata().getLifecycleConfiguration();
        for (var sMemberName in CustomControllerDef) {
            if (sMemberName in mLifecycleConfig) {
                ControllerExtension.overrideMethod(sMemberName, oController, CustomControllerDef, oController, mLifecycleConfig[sMemberName].overrideExecution);
            } else {
                ControllerExtension.overrideMethod(sMemberName, oController, CustomControllerDef);
            }
        }
    }
}
function loadControllerClass(sName, bAsync) {
    if (!sName) {
        throw new Error('Controller name (\'sName\' parameter) is required');
    }
    var sControllerName = sName.replace(/\./g, '/') + '.controller', ControllerClass = resolveClass(sap.ui.require(sControllerName));
    function resolveClass(ControllerClass) {
        if (ControllerClass) {
            return ControllerClass;
        } else if (mRegistry[sName]) {
            return Controller;
        } else {
            return ObjectPath.get(sName);
        }
    }
    if (bAsync) {
        return new Promise(function (resolve, reject) {
            if (!ControllerClass) {
                sap.ui.require([sControllerName], function (ControllerClass) {
                    resolve(resolveClass(ControllerClass));
                });
            } else {
                resolve(ControllerClass);
            }
        });
    } else if (!ControllerClass) {
        ControllerClass = sap.ui.requireSync(sControllerName);
        return resolveClass(ControllerClass);
    } else {
        return ControllerClass;
    }
}
function loadExtensionProvider(oController, bAsync) {
    var sProviderName = Controller._sExtensionProvider.replace(/\./g, '/'), oProvider = mExtensionProvider[sProviderName];
    if (bAsync) {
        return new Promise(function (resolve, reject) {
            if (sProviderName) {
                if (oProvider) {
                    resolve(oProvider);
                } else {
                    sap.ui.require([sProviderName], function (ExtensionProvider) {
                        oProvider = new ExtensionProvider();
                        mExtensionProvider[sProviderName] = oProvider;
                        resolve(oProvider);
                    });
                }
            } else {
                resolve();
            }
        });
    } else if (sProviderName) {
        if (oProvider) {
            return oProvider;
        } else {
            var ExtensionProvider = sap.ui.requireSync(sProviderName);
            oProvider = new ExtensionProvider();
            mExtensionProvider[sProviderName] = oProvider;
            return oProvider;
        }
    }
}
function instantiateController(ControllerClass, sName) {
    var oController;
    if (mRegistry[sName]) {
        oController = new ControllerClass(sName);
    } else {
        oController = new ControllerClass();
    }
    if (!oController) {
        throw new Error('Controller ' + sName + ' couldn\'t be instantiated');
    }
    return oController;
}
Controller.extendByMember = function (oController, bAsync) {
    var sMember;
    for (sMember in oController) {
        if (oController[sMember] && oController[sMember].getMetadata && oController[sMember].getMetadata().getStereotype() == 'controllerextension') {
            oController[sMember] = new oController[sMember]();
        }
    }
    for (sMember in oController) {
        if (oController[sMember] && oController[sMember].getMetadata && oController[sMember].getMetadata().getStereotype() == 'controllerextension') {
            mixinControllerDefinition(oController, oController[sMember], sMember);
        }
    }
    if (bAsync) {
        return Promise.resolve(oController);
    } else {
        return oController;
    }
};
Controller.extendByCustomizing = function (oController, sName, bAsync) {
    var CustomizingConfiguration = sap.ui.require('sap/ui/core/CustomizingConfiguration');
    if (!CustomizingConfiguration) {
        return bAsync ? Promise.resolve(oController) : oController;
    }
    function extendAsync(sCustomControllerName, oController) {
        return loadControllerClass(sCustomControllerName, bAsync).then(function (oCustomControllerDef) {
            oCustomControllerDef = mRegistry[sCustomControllerName] || oCustomControllerDef;
            if (oCustomControllerDef !== undefined) {
                if (oCustomControllerDef.getMetadata && oCustomControllerDef.getMetadata().isA('sap.ui.core.mvc.Controller')) {
                    Log.warning('Attempt to load Extension Controller ' + sCustomControllerName + ' was not successful', 'Controller extension should be a plain object.', null, function () {
                        return {
                            type: 'ControllerExtension',
                            name: sCustomControllerName
                        };
                    });
                } else {
                    mixinControllerDefinition(oController, oCustomControllerDef);
                }
                return oController;
            }
        }, function (err) {
            Log.error('Attempt to load Extension Controller ' + sCustomControllerName + ' was not successful - is the Controller correctly defined in its file?');
        });
    }
    var oCustomControllerDef, aControllerNames = [], sExtControllerName, vController = bAsync ? Promise.resolve(oController) : oController, controllerExtensionConfig = CustomizingConfiguration.getControllerExtension(sName, ManagedObject._sOwnerId);
    if (controllerExtensionConfig) {
        sExtControllerName = typeof controllerExtensionConfig === 'string' ? controllerExtensionConfig : controllerExtensionConfig.controllerName;
        aControllerNames = controllerExtensionConfig.controllerNames || [];
        if (sExtControllerName) {
            aControllerNames.unshift(sExtControllerName);
        }
    }
    for (var i = 0, l = aControllerNames.length; i < l; i++) {
        var sControllerName = aControllerNames[i];
        if (typeof sControllerName === 'string') {
            Log.info('Customizing: Controller \'' + sName + '\' is now extended by \'' + sControllerName + '\'');
            if (bAsync) {
                vController = vController.then(extendAsync.bind(null, sControllerName, oController));
            } else {
                if (!mRegistry[sControllerName] && !sap.ui.require(sControllerName)) {
                    loadControllerClass(sControllerName);
                }
                if ((oCustomControllerDef = mRegistry[sControllerName]) !== undefined) {
                    mixinControllerDefinition(oController, oCustomControllerDef);
                } else {
                    Log.error('Attempt to load Extension Controller ' + sControllerName + ' was not successful - is the Controller correctly defined in its file?');
                }
            }
        }
    }
    return vController;
};
Controller.extendByProvider = function (oController, sName, sOwnerId, bAsync) {
    if (!Controller._sExtensionProvider) {
        return bAsync ? Promise.resolve(oController) : oController;
    }
    Log.info('Customizing: Controller \'' + sName + '\' is now extended by Controller Extension Provider \'' + Controller._sExtensionProvider + '\'');
    var oExtensions, oExtensionProvider;
    if (bAsync) {
        return loadExtensionProvider(oController, bAsync).then(function (oExtensionProvider) {
            return oExtensionProvider.getControllerExtensions(sName, sOwnerId, bAsync);
        }).then(function (aControllerExtensions) {
            if (aControllerExtensions && aControllerExtensions.length) {
                for (var i = 0, l = aControllerExtensions.length; i < l; i++) {
                    mixinControllerDefinition(oController, aControllerExtensions[i]);
                }
            }
            return oController;
        }, function (err) {
            Log.error('Controller Extension Provider: Error \'' + err + '\' thrown in ' + Controller._sExtensionProvider + '; extension provider ignored.');
            return oController;
        });
    } else {
        oExtensionProvider = loadExtensionProvider(oController, bAsync);
        oExtensions = oExtensionProvider.getControllerExtensions(sName, sOwnerId, bAsync);
        if (oExtensions && Array.isArray(oExtensions)) {
            for (var i = 0, l = oExtensions.length; i < l; i++) {
                mixinControllerDefinition(oController, oExtensions[i]);
            }
        } else {
            Log.error('Controller Extension Provider: Error in ExtensionProvider.getControllerExtensions: ' + Controller._sExtensionProvider + ' - no valid extensions returned');
        }
    }
    return oController;
};
Controller.create = function (mOptions) {
    return controllerFactory(mOptions.name, undefined, true);
};
sap.ui.controller = function (sName, oControllerImpl, bAsync) {
    if (bAsync) {
        Log.info('Do not use deprecated factory function \'sap.ui.controller(' + sName + ')\'. Use \'sap.ui.core.mvc.Controller.create(...)\' instead.', 'sap.ui.controller', null, function () {
            return {
                type: 'sap.ui.controller',
                name: sName
            };
        });
    } else {
        Log.warning('Do not use synchronous controller creation for controller \'' + sName + '\'! Use the new asynchronous factory \'sap.ui.core.mvc.Controller.create(...)\' instead.', 'sap.ui.controller', null, function () {
            return {
                type: 'sap.ui.controller',
                name: sName
            };
        });
    }
    return controllerFactory.apply(this, arguments);
};
function controllerFactory(sName, oControllerImpl, bAsync) {
    var oController, ControllerClass, sOwnerId = ManagedObject._sOwnerId;
    if (typeof oControllerImpl === 'boolean') {
        oControllerImpl = undefined;
    }
    if (!oControllerImpl) {
        if (bAsync) {
            return loadControllerClass(sName, bAsync).then(function (ControllerClass) {
                return instantiateController(ControllerClass, sName);
            }).then(function (oController) {
                return Controller.extendByCustomizing(oController, sName, bAsync);
            }).then(function (oController) {
                return Controller.extendByProvider(oController, sName, sOwnerId, bAsync);
            }).then(function (oController) {
                oController._sapui_isExtended = true;
                return oController;
            });
        } else {
            ControllerClass = loadControllerClass(sName, bAsync);
            oController = instantiateController(ControllerClass, sName);
            oController = Controller.extendByCustomizing(oController, sName, bAsync);
            oController = Controller.extendByProvider(oController, sName, sOwnerId, bAsync);
            oController._sapui_isExtended = true;
        }
        return oController;
    } else {
        mRegistry[sName] = oControllerImpl;
        Log.info('For defining controllers use Controller.extend instead');
    }
}
Controller.prototype.getPublicMethods = function () {
    var mPublicFunctions = {}, oControllerMetadata = this.getMetadata(), oControllerMethods = oControllerMetadata.getAllMethods(), oLifeCycleConfig = oControllerMetadata.getLifecycleConfiguration();
    Object.keys(oControllerMethods).forEach(function (sMethod) {
        if (oControllerMetadata.isMethodPublic(sMethod)) {
            mPublicFunctions[sMethod] = oControllerMethods[sMethod];
            mPublicFunctions[sMethod].reloadNeeded = !!(sMethod in oLifeCycleConfig);
        }
    });
    delete mPublicFunctions.extension;
    var oExtensions = this['_sapui_Extensions'];
    Object.keys(oExtensions).forEach(function (sNamespace) {
        var oExtensionInfo = oExtensions[sNamespace];
        var oExtensionInterface = oExtensionInfo.extension.getInterface();
        var mAllMethods = oExtensionInfo.extension.getMetadata().getAllMethods();
        Object.keys(oExtensionInterface).forEach(function (sMethod) {
            delete mPublicFunctions[oExtensionInfo.location];
            var oMethodMetadata = jQuery.extend({}, mAllMethods[sMethod], { reloadNeeded: oExtensionInfo.reloadNeeded });
            mPublicFunctions[oExtensionInfo.location + '.' + sMethod] = oMethodMetadata;
        });
    });
    return mPublicFunctions;
};
Controller.prototype.destroy = function () {
    Object.keys(this['_sapui_Extensions']).forEach(function (oExtensionInfo) {
        ObjectPath.set(oExtensionInfo.location, null, this);
    }.bind(this));
    delete this['_sapui_Extensions'];
    delete this['_sapui_Interface'];
    EventProvider.prototype.destroy.apply(this, arguments);
};
Controller.prototype.getView = function () {
    return this.oView;
};
Controller.prototype.byId = function (sId) {
    return this.oView ? this.oView.byId(sId) : undefined;
};
Controller.prototype.createId = function (sId) {
    return this.oView ? this.oView.createId(sId) : undefined;
};
Controller.prototype.getOwnerComponent = function () {
    var Component = sap.ui.requireSync('sap/ui/core/Component');
    return Component.getOwnerComponentFor(this.getView());
};
Controller.prototype.connectToView = function (oView) {
    this.oView = oView;
    if (this.onInit) {
        oView.attachAfterInit(this.onInit, this);
    }
    if (this.onExit) {
        oView.attachBeforeExit(this.onExit, this);
    }
    if (this.onAfterRendering) {
        oView.attachAfterRendering(this.onAfterRendering, this);
    }
    if (this.onBeforeRendering) {
        oView.attachBeforeRendering(this.onBeforeRendering, this);
    }
};
Controller._sExtensionProvider = null;
Controller.registerExtensionProvider = function (sExtensionProvider) {
    Controller._sExtensionProvider = sExtensionProvider;
};
export default Controller;