import jQuery from '../../thirdparty/jquery.js';
import View from './View.js';
import JSONViewRenderer from './JSONViewRenderer.js';
import EventHandlerResolver from './EventHandlerResolver.js';
import merge from '../../../base/util/merge.js';
import ManagedObject from '../../base/ManagedObject.js';
import library from '../library.js';
import ResourceModel from '../../model/resource/ResourceModel.js';
import Log from '../../../base/Log.js';
import LoaderExtensions from '../../../base/util/LoaderExtensions.js';
var ViewType = library.mvc.ViewType;
var JSONView = View.extend('sap.ui.core.mvc.JSONView', { metadata: { library: 'sap.ui.core' } });
JSONView.create = function (mOptions) {
    var mParameters = merge({}, mOptions);
    for (var sOption in mParameters) {
        if (sOption === 'preprocessors') {
            delete mParameters['preprocessors'];
            Log.warning('JSView.create does not support the option preprocessors!');
        }
    }
    mParameters.type = ViewType.JSON;
    return View.create(mParameters);
};
sap.ui.jsonview = function (sId, vView) {
    return sap.ui.view(sId, vView, ViewType.JSON);
};
JSONView._sType = ViewType.JSON;
JSONView.asyncSupport = true;
JSONView.prototype.initViewSettings = function (mSettings) {
    if (!mSettings) {
        throw new Error('mSettings must be given');
    }
    if (mSettings.viewName && mSettings.viewContent) {
        throw new Error('View name and view content are given. There is no point in doing this, so please decide.');
    } else if (!mSettings.viewName && !mSettings.viewContent) {
        throw new Error('Neither view name nor view content is given. One of them is required.');
    }
    var that = this;
    var fnInitModel = function () {
        if ((that._oJSONView.resourceBundleName || that._oJSONView.resourceBundleUrl) && (!mSettings.models || !mSettings.models[that._oJSONView.resourceBundleAlias])) {
            var oModel = new ResourceModel({
                bundleName: that._oJSONView.resourceBundleName,
                bundleUrl: that._oJSONView.resourceBundleUrl,
                async: mSettings.async
            });
            var vBundle = oModel.getResourceBundle();
            if (vBundle instanceof Promise) {
                return vBundle.then(function () {
                    that.setModel(oModel, that._oJSONView.resourceBundleAlias);
                });
            }
            that.setModel(oModel, that._oJSONView.resourceBundleAlias);
        }
    };
    if (mSettings.viewName) {
        if (mSettings.async) {
            return this._loadTemplate(mSettings.viewName, { async: true }).then(fnInitModel);
        } else {
            this._loadTemplate(mSettings.viewName);
            fnInitModel();
        }
    } else if (mSettings.viewContent) {
        this.mProperties['viewContent'] = mSettings.viewContent;
        if (typeof mSettings.viewContent === 'string') {
            this._oJSONView = jQuery.parseJSON(mSettings.viewContent);
            if (!this._oJSONView) {
                throw new Error('error when parsing viewContent: ' + mSettings.viewContent);
            }
        } else if (typeof mSettings.viewContent === 'object') {
            this._oJSONView = mSettings.viewContent;
        } else {
            throw new Error('viewContent must be a JSON string or object, but is a ' + typeof mSettings.viewContent);
        }
        if (mSettings.async) {
            return Promise.resolve().then(fnInitModel);
        } else {
            fnInitModel();
        }
    }
};
JSONView.prototype.onControllerConnected = function (oController) {
    var that = this;
    ManagedObject.runWithPreprocessors(function () {
        that.applySettings({ content: that._oJSONView.content }, oController);
    }, {
        id: function (sId) {
            return that.createId(sId);
        },
        settings: function (oSettings) {
            var oMetadata = this.getMetadata(), aValidKeys = oMetadata.getJSONKeys(), sKey, oValue, oKeyInfo;
            for (sKey in oSettings) {
                if ((oKeyInfo = aValidKeys[sKey]) !== undefined) {
                    oValue = oSettings[sKey];
                    switch (oKeyInfo._iKind) {
                    case 3:
                        if (typeof oValue === 'string') {
                            oSettings[sKey] = that.createId(oValue);
                        }
                        break;
                    case 5:
                        if (typeof oValue === 'string') {
                            oSettings[sKey] = EventHandlerResolver.resolveEventHandler(oValue, oController);
                        }
                        break;
                    }
                }
            }
        }
    });
};
JSONView.prototype._loadTemplate = function (sTemplateName, mOptions) {
    var sResourceName = sTemplateName.replace(/\./g, '/') + '.view.json';
    if (!mOptions || !mOptions.async) {
        this._oJSONView = LoaderExtensions.loadResource(sResourceName);
    } else {
        var that = this;
        return LoaderExtensions.loadResource(sResourceName, mOptions).then(function (oJSONView) {
            that._oJSONView = oJSONView;
        });
    }
};
JSONView.prototype.getControllerName = function () {
    return this._oJSONView.controllerName;
};
export default JSONView;