import ManagedObject from '../../base/ManagedObject.js';
import BindingParser from '../../base/BindingParser.js';
import Element from '../Element.js';
import BindingMode from '../../model/BindingMode.js';
import CompositeBinding from '../../model/CompositeBinding.js';
import JSONModel from '../../model/json/JSONModel.js';
import MOM from '../../model/base/ManagedObjectModel.js';
import ObjectPath from '../../../base/util/ObjectPath.js';
import Log from '../../../base/Log.js';
var EventHandlerResolver = {
    resolveEventHandler: function (sName, oController) {
        var fnHandler;
        sName = sName.trim();
        if (sap.ui.getWCCore().getConfiguration().getControllerCodeDeactivated()) {
            fnHandler = function () {
            };
        } else {
            var iStartBracket = sName.indexOf('('), sFunctionName = sName;
            if (iStartBracket > 0) {
                sFunctionName = sName.substring(0, iStartBracket).trim();
            } else if (iStartBracket === 0) {
                throw new Error('Event handler name starts with a bracket, must start with a function name ' + '(or with a dot followed by controller-local function name): ' + sName);
            }
            switch (sFunctionName.indexOf('.')) {
            case 0:
                fnHandler = oController && ObjectPath.get(sFunctionName.slice(1), oController);
                break;
            case -1:
                fnHandler = oController && oController[sFunctionName];
                if (fnHandler != null) {
                    break;
                }
            default:
                fnHandler = ObjectPath.get(sFunctionName);
            }
            if (fnHandler && iStartBracket > 0) {
                var iEndBracket = sName.lastIndexOf(')');
                if (iEndBracket > iStartBracket) {
                    if (sName.substring(iStartBracket).indexOf('{=') > -1) {
                        Log.warning('It looks like an event handler parameter contains a binding expression ({=...}). This is not allowed and will cause an error later on ' + 'because the entire event handler is already considered an expression: ' + sName);
                    }
                    fnHandler = function (sFunctionName, oController) {
                        return function (oEvent) {
                            var oParametersModel, oSourceModel, sExpression = sName;
                            if (sName.indexOf('$parameters') > -1) {
                                oParametersModel = new JSONModel(oEvent.mParameters);
                            }
                            if (sName.indexOf('$source') > -1) {
                                oSourceModel = new MOM(oEvent.getSource());
                            }
                            var mGlobals = {
                                '$controller': oController,
                                $event: oEvent
                            };
                            if (sFunctionName.indexOf('.') > 0) {
                                var sGlobal = sFunctionName.split('.')[0];
                                mGlobals[sGlobal] = window[sGlobal];
                            } else if (sFunctionName.indexOf('.') === -1) {
                                if (oController && oController[sFunctionName]) {
                                    sExpression = '$controller.' + sExpression;
                                } else if (window[sFunctionName]) {
                                    mGlobals[sFunctionName] = window[sFunctionName];
                                }
                            }
                            var oExpressionParserResult = BindingParser.parseExpression(sExpression.replace(/^\./, '$controller.'), 0, { oContext: oController }, mGlobals);
                            if (oExpressionParserResult.result) {
                                try {
                                    getBindingValue(oExpressionParserResult.result, oEvent.getSource(), oController, oParametersModel, oSourceModel);
                                } catch (e) {
                                    e.message = 'Error when evaluating event handler \'' + sName + '\': ' + e.message;
                                    throw e;
                                }
                            }
                            if (oParametersModel) {
                                oParametersModel.destroy();
                            }
                            if (oSourceModel) {
                                oSourceModel.destroy();
                            }
                        };
                    }(sFunctionName, oController);
                } else {
                    Log.error('Syntax error in event handler \'' + sName + '\': arguments must be enclosed in a pair of brackets');
                }
            }
        }
        if (typeof fnHandler === 'function') {
            fnHandler._sapui_handlerName = sName;
            return [
                fnHandler,
                oController
            ];
        }
        Log.warning('Event handler name \'' + sName + '\' could not be resolved to an event handler function');
    }
};
function getBindingValue(oBindingInfo, oElement, oController, oParametersModel, oSourceModel) {
    var oType;
    oBindingInfo.mode = BindingMode.OneWay;
    if (!oBindingInfo.parts) {
        oBindingInfo.parts = [];
        oBindingInfo.parts[0] = {
            path: oBindingInfo.path,
            targetType: oBindingInfo.targetType,
            type: oBindingInfo.type,
            suspended: oBindingInfo.suspended,
            formatOptions: oBindingInfo.formatOptions,
            constraints: oBindingInfo.constraints,
            model: oBindingInfo.model,
            mode: oBindingInfo.mode
        };
        delete oBindingInfo.path;
        delete oBindingInfo.targetType;
        delete oBindingInfo.mode;
        delete oBindingInfo.model;
    }
    for (var i = 0; i < oBindingInfo.parts.length; i++) {
        var oPart = oBindingInfo.parts[i];
        if (typeof oPart == 'string') {
            oPart = { path: oPart };
            oBindingInfo.parts[i] = oPart;
        }
        if (!oPart.path && oPart.parts) {
            throw new Error('Bindings in event handler parameters cannot use parts. Just use one single path.');
        }
        var iSeparatorPos = oPart.path.indexOf('>');
        if (iSeparatorPos > 0) {
            oPart.model = oPart.path.substr(0, iSeparatorPos);
            oPart.path = oPart.path.substr(iSeparatorPos + 1);
        }
    }
    var oContext, oBinding, aBindings = [];
    oBindingInfo.parts.forEach(function (oPart) {
        var oModel;
        if (oPart.model === '$parameters') {
            oModel = oParametersModel;
            oContext = oParametersModel.createBindingContext('/');
        } else if (oPart.model === '$source') {
            oModel = oSourceModel;
            oContext = oSourceModel.createBindingContext('/');
        } else {
            oModel = oElement.getModel(oPart.model);
            oContext = oElement.getBindingContext(oPart.model);
        }
        oType = oPart.type;
        if (typeof oType == 'string') {
            clType = ObjectPath.get(oType);
            if (typeof clType !== 'function') {
                throw new Error('Cannot find type "' + oType + '" used for binding "' + oPart.path + '"!');
            }
            oType = new clType(oPart.formatOptions, oPart.constraints);
        }
        oBinding = oModel.bindProperty(oPart.path, oContext, oBindingInfo.parameters);
        oBinding.setType(oType, oPart.targetType || 'any');
        oBinding.setFormatter(oPart.formatter);
        oBinding.setBindingMode(BindingMode.OneTime);
        aBindings.push(oBinding);
    });
    if (aBindings.length > 1 || oBindingInfo.formatter && oBindingInfo.formatter.textFragments) {
        oType = oBindingInfo.type;
        if (typeof oType == 'string') {
            var clType = ObjectPath.get(oType);
            oType = new clType(oBindingInfo.formatOptions, oBindingInfo.constraints);
        }
        oBinding = new CompositeBinding(aBindings, oBindingInfo.useRawValues, oBindingInfo.useInternalValues);
        oBinding.setType(oType, oPart.targetType || 'any');
        oBinding.setBindingMode(BindingMode.OneTime);
    } else {
        oBinding = aBindings[0];
    }
    oBinding.setFormatter(oBindingInfo.formatter);
    oBinding.initialize();
    return oBinding.getExternalValue();
}
export default EventHandlerResolver;