import jQuery from '../../thirdparty/jquery.js';
import View from './View.js';
import XMLViewRenderer from './XMLViewRenderer.js';
import merge from '../../../base/util/merge.js';
import ManagedObject from '../../base/ManagedObject.js';
import XMLTemplateProcessor from '../XMLTemplateProcessor.js';
import library from '../library.js';
import Control from '../Control.js';
import RenderManager from '../RenderManager.js';
import Cache from '../cache/CacheManager.js';
import ResourceModel from '../../model/resource/ResourceModel.js';
import XMLHelper from '../../util/XMLHelper.js';
import hash from '../../../base/strings/hash.js';
import Log from '../../../base/Log.js';
import LoaderExtensions from '../../../base/util/LoaderExtensions.js';
var RenderPrefixes = RenderManager.RenderPrefixes, ViewType = library.mvc.ViewType, sXMLViewCacheError = 'XMLViewCacheError', notCacheRelevant = {};
var XMLView = View.extend('sap.ui.core.mvc.XMLView', {
    metadata: {
        library: 'sap.ui.core',
        specialSettings: {
            containingView: {
                type: 'sap.ui.core.mvc.XMLView',
                visibility: 'hidden'
            },
            xmlNode: {
                type: 'Element',
                visibility: 'hidden'
            },
            cache: 'Object',
            processingMode: {
                type: 'string',
                visibility: 'hidden'
            }
        },
        designtime: 'sap/ui/core/designtime/mvc/XMLView.designtime'
    }
});
sap.ui.xmlview = function (sId, vView) {
    return sap.ui.view(sId, vView, ViewType.XML);
};
XMLView.create = function (mOptions) {
    var mParameters = merge({}, mOptions);
    mParameters.viewContent = mParameters.definition;
    mParameters.async = true;
    mParameters.type = ViewType.XML;
    mParameters.processingMode = mParameters.processingMode || 'sequential';
    return View.create(mParameters);
};
XMLView._sType = ViewType.XML;
XMLView.asyncSupport = true;
XMLView._bUseCache = sap.ui.getWCCore().getConfiguration().getViewCache() && Cache._isSupportedEnvironment();
function validatexContent(xContent) {
    if (xContent.parseError.errorCode !== 0) {
        var oParseError = xContent.parseError;
        throw new Error('The following problem occurred: XML parse Error for ' + oParseError.url + ' code: ' + oParseError.errorCode + ' reason: ' + oParseError.reason + ' src: ' + oParseError.srcText + ' line: ' + oParseError.line + ' linepos: ' + oParseError.linepos + ' filepos: ' + oParseError.filepos);
    }
}
function validateViewSettings(oView, mSettings) {
    if (!mSettings) {
        throw new Error('mSettings must be given');
    } else if (mSettings.viewName && mSettings.viewContent) {
        throw new Error('View name and view content are given. There is no point in doing this, so please decide.');
    } else if ((mSettings.viewName || mSettings.viewContent) && mSettings.xmlNode) {
        throw new Error('View name/content AND an XML node are given. There is no point in doing this, so please decide.');
    } else if (!(mSettings.viewName || mSettings.viewContent) && !mSettings.xmlNode) {
        throw new Error('Neither view name/content nor an XML node is given. One of them is required.');
    } else if (mSettings.cache && !(mSettings.cache.keys && mSettings.cache.keys.length)) {
        throw new Error('No cache keys provided. At least one is required.');
    }
}
function getxContent(oView, mSettings) {
    oView.mProperties['viewContent'] = mSettings.viewContent;
    var xContent = XMLHelper.parse(mSettings.viewContent);
    validatexContent(xContent);
    return xContent.documentElement;
}
function setResourceModel(oView, mSettings) {
    if ((oView._resourceBundleName || oView._resourceBundleUrl) && (!mSettings.models || !mSettings.models[oView._resourceBundleAlias])) {
        var oModel = new ResourceModel({
            bundleName: oView._resourceBundleName,
            bundleUrl: oView._resourceBundleUrl,
            bundleLocale: oView._resourceBundleLocale,
            async: mSettings.async
        });
        var vBundle = oModel.getResourceBundle();
        if (vBundle instanceof Promise) {
            return vBundle.then(function () {
                oView.setModel(oModel, mSettings.resourceBundleAlias);
            });
        }
        oView.setModel(oModel, oView._resourceBundleAlias);
    }
}
function setAfterRenderingNotifier(oView) {
    oView.oAfterRenderingNotifier = new XMLAfterRenderingNotifier();
    oView.oAfterRenderingNotifier.addDelegate({
        onAfterRendering: function () {
            oView.onAfterRenderingBeforeChildren();
        }
    });
}
function getRootComponent(oSrcElement) {
    var Component = sap.ui.require('sap/ui/core/Component'), oComponent;
    while (oSrcElement && Component) {
        var oCandidateComponent = Component.getOwnerComponentFor(oSrcElement);
        if (oCandidateComponent) {
            oSrcElement = oComponent = oCandidateComponent;
        } else {
            if (oSrcElement instanceof Component) {
                oComponent = oSrcElement;
            }
            oSrcElement = oSrcElement.getParent && oSrcElement.getParent();
        }
    }
    return oComponent;
}
function getCacheInput(oView, mCacheSettings) {
    var oRootComponent = getRootComponent(oView), sManifest = oRootComponent ? JSON.stringify(oRootComponent.getManifest()) : null, aFutureKeyParts = [];
    aFutureKeyParts = aFutureKeyParts.concat(getCacheKeyPrefixes(oView, oRootComponent), getVersionInfo(), getCacheKeyProviders(oView), mCacheSettings.keys);
    return validateCacheKey(oView, aFutureKeyParts).then(function (sKey) {
        return {
            key: sKey + '(' + hash(sManifest || '') + ')',
            componentManifest: sManifest,
            additionalData: mCacheSettings.additionalData
        };
    });
}
function isValidKey(sKey) {
    return sKey;
}
function validateCacheKey(oView, aFutureKeyParts) {
    return Promise.all(aFutureKeyParts).then(function (aKeys) {
        aKeys = aKeys.filter(function (oElement) {
            return oElement !== notCacheRelevant;
        });
        if (aKeys.every(isValidKey)) {
            return aKeys.join('_');
        } else {
            var e = new Error('Provided cache keys may not be empty or undefined.');
            e.name = sXMLViewCacheError;
            return Promise.reject(e);
        }
    });
}
function getCacheKeyPrefixes(oView, oRootComponent) {
    var sComponentName = oRootComponent && oRootComponent.getMetadata().getName();
    return [
        sComponentName || window.location.host + window.location.pathname,
        oView.getId(),
        sap.ui.getWCCore().getConfiguration().getLanguageTag()
    ];
}
function getCacheKeyProviders(oView) {
    var mPreprocessors = oView.getPreprocessors(), oPreprocessorInfo = oView.getPreprocessorInfo(false), aFutureCacheKeys = [];
    function pushFutureKey(o) {
        aFutureCacheKeys.push(o.preprocessor.then(function (oPreprocessorImpl) {
            if (oPreprocessorImpl.getCacheKey) {
                return oPreprocessorImpl.getCacheKey(oPreprocessorInfo);
            } else {
                return notCacheRelevant;
            }
        }));
    }
    for (var sType in mPreprocessors) {
        mPreprocessors[sType].forEach(pushFutureKey);
    }
    return aFutureCacheKeys;
}
function getVersionInfo() {
    return sap.ui.getVersionInfo({ async: true }).then(function (oInfo) {
        var sTimestamp = '';
        if (!oInfo.libraries) {
            sTimestamp = sap.ui.buildinfo.buildtime;
        } else {
            oInfo.libraries.forEach(function (oLibrary) {
                sTimestamp += oLibrary.buildTimestamp;
            });
        }
        return sTimestamp;
    }).catch(function (error) {
        Log.warning('sap.ui.getVersionInfo could not be retrieved', 'sap.ui.core.mvc.XMLView');
        Log.debug(error);
        return '';
    });
}
function writeCache(mCacheInput, xContent) {
    var sKey = mCacheInput.key;
    delete mCacheInput.key;
    mCacheInput.xml = XMLHelper.serialize(xContent);
    return Cache.set(sKey, mCacheInput);
}
function readCache(mCacheInput) {
    return Cache.get(mCacheInput.key).then(function (mCacheOutput) {
        if (mCacheOutput && mCacheOutput.componentManifest == mCacheInput.componentManifest) {
            mCacheOutput.xml = XMLHelper.parse(mCacheOutput.xml, 'application/xml').documentElement;
            if (mCacheOutput.additionalData) {
                jQuery.extend(true, mCacheInput.additionalData, mCacheOutput.additionalData);
            }
            return mCacheOutput;
        }
    });
}
XMLView.prototype.initViewSettings = function (mSettings) {
    var that = this, _xContent;
    function processView(xContent) {
        that._xContent = xContent;
        if (View._supportInfo) {
            View._supportInfo({
                context: that._xContent,
                env: {
                    caller: 'view',
                    viewinfo: jQuery.extend(true, {}, that),
                    settings: jQuery.extend(true, {}, mSettings || {}),
                    type: 'xmlview'
                }
            });
        }
        if (!that.isSubView()) {
            var mSettingsFromXML = {};
            XMLTemplateProcessor.parseViewAttributes(xContent, that, mSettingsFromXML);
            if (!mSettings.async) {
                Object.assign(mSettings, mSettingsFromXML);
            } else {
                that.applySettings(mSettingsFromXML);
            }
        } else {
            delete mSettings.controller;
        }
        var vSetResourceModel = setResourceModel(that, mSettings);
        if (vSetResourceModel instanceof Promise) {
            return vSetResourceModel.then(function () {
                setAfterRenderingNotifier(that);
            });
        }
        setAfterRenderingNotifier(that);
    }
    function runViewxmlPreprocessor(xContent, bAsync) {
        if (that.hasPreprocessor('viewxml')) {
            return XMLTemplateProcessor.enrichTemplateIdsPromise(xContent, that, bAsync).then(function () {
                return that.runPreprocessor('viewxml', xContent, !bAsync);
            });
        }
        return xContent;
    }
    function runPreprocessorsAsync(xContent) {
        return that.runPreprocessor('xml', xContent).then(function (xContent) {
            return runViewxmlPreprocessor(xContent, true);
        });
    }
    function loadResourceAsync(sResourceName) {
        return LoaderExtensions.loadResource(sResourceName, { async: true }).then(function (oData) {
            return oData.documentElement;
        });
    }
    function processResource(sResourceName, mCacheInput) {
        return loadResourceAsync(sResourceName).then(runPreprocessorsAsync).then(function (xContent) {
            if (mCacheInput) {
                writeCache(mCacheInput, xContent);
            }
            return xContent;
        });
    }
    function processCache(sResourceName, mCacheSettings) {
        return getCacheInput(that, mCacheSettings).then(function (mCacheInput) {
            return readCache(mCacheInput).then(function (mCacheOutput) {
                if (!mCacheOutput) {
                    return processResource(sResourceName, mCacheInput);
                } else {
                    return mCacheOutput.xml;
                }
            });
        }).catch(function (error) {
            if (error.name === sXMLViewCacheError) {
                Log.debug(error.message, error.name, 'sap.ui.core.mvc.XMLView');
                Log.debug('Processing the View without caching.', 'sap.ui.core.mvc.XMLView');
                return processResource(sResourceName);
            } else {
                return Promise.reject(error);
            }
        });
    }
    this._oContainingView = mSettings.containingView || this;
    this._sProcessingMode = mSettings.processingMode;
    if (this.oAsyncState) {
        this.oAsyncState.suppressPreserve = true;
    }
    validateViewSettings(this, mSettings);
    if (mSettings.viewName) {
        var sResourceName = mSettings.viewName.replace(/\./g, '/') + '.view.xml';
        if (mSettings.async) {
            if (mSettings.cache && XMLView._bUseCache) {
                return processCache(sResourceName, mSettings.cache).then(processView);
            } else {
                return loadResourceAsync(sResourceName).then(runPreprocessorsAsync).then(processView);
            }
        } else {
            _xContent = LoaderExtensions.loadResource(sResourceName).documentElement;
        }
    } else if (mSettings.viewContent) {
        if (mSettings.viewContent.nodeType === window.Node.DOCUMENT_NODE) {
            _xContent = mSettings.viewContent.documentElement;
        } else {
            _xContent = getxContent(this, mSettings);
        }
    } else if (mSettings.xmlNode) {
        _xContent = mSettings.xmlNode;
    }
    if (mSettings.async) {
        return runPreprocessorsAsync(_xContent).then(processView);
    } else {
        _xContent = this.runPreprocessor('xml', _xContent, true);
        _xContent = runViewxmlPreprocessor(_xContent, false);
        if (_xContent && typeof _xContent.getResult === 'function') {
            if (_xContent.isRejected()) {
                throw _xContent.getResult();
            }
            _xContent = _xContent.getResult();
        }
        processView(_xContent);
    }
};
XMLView.prototype.exit = function () {
    if (this.oAfterRenderingNotifier) {
        this.oAfterRenderingNotifier.destroy();
    }
    View.prototype.exit.apply(this, arguments);
};
XMLView.prototype.onControllerConnected = function (oController) {
    var that = this;
    function fnRunWithPreprocessor(fn) {
        return ManagedObject.runWithPreprocessors(fn, { settings: that._fnSettingsPreprocessor });
    }
    if (!this.oAsyncState) {
        this._aParsedContent = fnRunWithPreprocessor(XMLTemplateProcessor.parseTemplate.bind(null, this._xContent, this));
    } else {
        return XMLTemplateProcessor.parseTemplatePromise(this._xContent, this, true, { fnRunWithPreprocessor: fnRunWithPreprocessor }).then(function (aParsedContent) {
            that._aParsedContent = aParsedContent;
            delete that.oAsyncState.suppressPreserve;
        });
    }
};
XMLView.prototype.getControllerName = function () {
    return this._controllerName;
};
XMLView.prototype.isSubView = function () {
    return this._oContainingView != this;
};
XMLView.prototype.onAfterRenderingBeforeChildren = function () {
    if (this._$oldContent.length !== 0) {
        var aChildren = this.getAggregation('content');
        if (aChildren) {
            for (var i = 0; i < aChildren.length; i++) {
                var oNewChildDOM = document.getElementById(RenderPrefixes.Temporary + aChildren[i].getId()) || aChildren[i].getDomRef() || document.getElementById(RenderPrefixes.Invisible + aChildren[i].getId());
                if (oNewChildDOM) {
                    jQuery(document.getElementById(RenderPrefixes.Dummy + aChildren[i].getId())).replaceWith(oNewChildDOM);
                }
            }
        }
        jQuery(document.getElementById(RenderPrefixes.Temporary + this.getId())).replaceWith(this._$oldContent);
    }
    this._$oldContent = undefined;
};
XMLView.prototype._onChildRerenderedEmpty = function (oControl, oElement) {
    jQuery(oElement).replaceWith('<div id="' + RenderPrefixes.Dummy + oControl.getId() + '" class="sapUiHidden"/>');
    return true;
};
XMLView.prototype.destroy = function (bSuppressInvalidate) {
    var $preservedContent = RenderManager.findPreservedContent(this.getId());
    if ($preservedContent) {
        $preservedContent.remove();
    }
    if (bSuppressInvalidate == 'KeepDom' && this.getDomRef()) {
        this.getDomRef().removeAttribute('data-sap-ui-preserve');
    }
    View.prototype.destroy.call(this, bSuppressInvalidate);
};
XMLView.registerPreprocessor = function (sType, vPreprocessor, bSyncSupport, bOnDemand, mSettings) {
    sType = sType.toUpperCase();
    if (XMLView.PreprocessorType[sType]) {
        View.registerPreprocessor(XMLView.PreprocessorType[sType], vPreprocessor, this.getMetadata().getClass()._sType, bSyncSupport, bOnDemand, mSettings);
    } else {
        Log.error('Preprocessor could not be registered due to unknown sType "' + sType + '"', this.getMetadata().getName());
    }
};
XMLView.PreprocessorType = {
    XML: 'xml',
    VIEWXML: 'viewxml',
    CONTROLS: 'controls'
};
var XMLAfterRenderingNotifier = Control.extend('sap.ui.core.mvc.XMLAfterRenderingNotifier', {
    metadata: { library: 'sap.ui.core' },
    renderer: function (oRM, oControl) {
        oRM.text('');
    }
});
XMLView.registerPreprocessor('xml', 'sap.ui.core.util.XMLPreprocessor', true, true);
export default XMLView;