import ManagedObject from '../../base/ManagedObject.js';
import Control from '../Control.js';
import Controller from './Controller.js';
import merge from '../../../base/util/merge.js';
import library from '../library.js';
import ViewRenderer from './ViewRenderer.js';
import assert from '../../../base/assert.js';
import Log from '../../../base/Log.js';
import jQuery from '../../thirdparty/jquery.js';
var ViewType = library.mvc.ViewType;
var View = Control.extend('sap.ui.core.mvc.View', {
    metadata: {
        interfaces: ['sap.ui.core.IDScope'],
        library: 'sap.ui.core',
        properties: {
            width: {
                type: 'sap.ui.core.CSSSize',
                group: 'Dimension',
                defaultValue: '100%'
            },
            height: {
                type: 'sap.ui.core.CSSSize',
                group: 'Dimension',
                defaultValue: null
            },
            viewName: {
                type: 'string',
                group: 'Misc',
                defaultValue: null
            },
            displayBlock: {
                type: 'boolean',
                group: 'Appearance',
                defaultValue: false
            }
        },
        aggregations: {
            content: {
                type: 'sap.ui.core.Control',
                multiple: true,
                singularName: 'content'
            }
        },
        events: {
            afterInit: {},
            beforeExit: {},
            afterRendering: {},
            beforeRendering: {}
        },
        specialSettings: {
            controller: 'sap.ui.core.mvc.Controller',
            controllerName: 'string',
            preprocessors: 'Object',
            resourceBundleName: 'string',
            resourceBundleUrl: 'sap.ui.core.URI',
            resourceBundleLocale: 'string',
            resourceBundleAlias: 'string',
            type: 'string',
            definition: 'any',
            viewContent: {
                type: 'any',
                deprecated: true
            },
            viewData: 'any',
            async: {
                type: 'boolean',
                defaultValue: false
            }
        },
        designtime: 'sap/ui/core/designtime/mvc/View.designtime'
    }
});
View._mPreprocessors = {};
function alignPreprocessorStructure(oPreprocessor) {
    oPreprocessor._settings = {};
    for (var sProp in oPreprocessor) {
        if (sProp.indexOf('_') !== 0) {
            oPreprocessor._settings[sProp] = oPreprocessor[sProp];
        }
    }
}
function initPreprocessor(oPreprocessor, bAsync) {
    var oPreprocessorImpl;
    if (typeof oPreprocessor.preprocessor === 'string') {
        var sPreprocessorName = oPreprocessor.preprocessor.replace(/\./g, '/');
        if (bAsync) {
            return new Promise(function (resolve, reject) {
                sap.ui.require([sPreprocessorName], function (oPreprocessorImpl) {
                    resolve(oPreprocessorImpl);
                });
            });
        } else {
            return sap.ui.requireSync(sPreprocessorName);
        }
    } else if (typeof oPreprocessor.preprocessor === 'function' && !oPreprocessor.preprocessor.process) {
        oPreprocessorImpl = { process: oPreprocessor.preprocessor };
    } else {
        oPreprocessorImpl = oPreprocessor.preprocessor;
    }
    if (bAsync) {
        return Promise.resolve(oPreprocessorImpl);
    } else {
        return oPreprocessorImpl;
    }
}
function getPreprocessorQueue(sViewType, sType) {
    var aLocalPreprocessors = this.mPreprocessors[sType] || [], aGlobalPreprocessors = [], i, l, oOnDemandPreprocessor, aPreprocessors = [];
    if (View._mPreprocessors[sViewType] && View._mPreprocessors[sViewType][sType]) {
        aGlobalPreprocessors = View._mPreprocessors[sViewType][sType].map(function (oProcessor) {
            return jQuery.extend({}, oProcessor);
        });
    }
    for (i = 0, l = aGlobalPreprocessors.length; i < l; i++) {
        if (aGlobalPreprocessors[i]._onDemand) {
            oOnDemandPreprocessor = aGlobalPreprocessors[i];
        } else {
            aPreprocessors.push(aGlobalPreprocessors[i]);
        }
    }
    for (i = 0, l = aLocalPreprocessors.length; i < l; i++) {
        var bIsOnDemand = !aLocalPreprocessors[i].preprocessor;
        if (bIsOnDemand && oOnDemandPreprocessor) {
            aPreprocessors.unshift(jQuery.extend(aLocalPreprocessors[i], oOnDemandPreprocessor));
        } else if (!bIsOnDemand) {
            aPreprocessors.push(aLocalPreprocessors[i]);
        }
    }
    return aPreprocessors;
}
function initPreprocessorQueues(oView, mSettings) {
    var oViewClass = oView.getMetadata().getClass();
    function resolvePreprocessors(oPreprocessor) {
        oPreprocessor.preprocessor = initPreprocessor(oPreprocessor, mSettings.async);
    }
    oView.mPreprocessors = jQuery.extend({}, mSettings.preprocessors);
    for (var _sType in oViewClass.PreprocessorType) {
        var sType = oViewClass.PreprocessorType[_sType];
        if (oView.mPreprocessors[sType] && !Array.isArray(oView.mPreprocessors[sType])) {
            oView.mPreprocessors[sType] = [oView.mPreprocessors[sType]];
        } else if (!oView.mPreprocessors[sType]) {
            oView.mPreprocessors[sType] = [];
        }
        oView.mPreprocessors[sType].forEach(alignPreprocessorStructure);
        oView.mPreprocessors[sType] = getPreprocessorQueue.call(oView, oViewClass._sType, sType);
        oView.mPreprocessors[sType].forEach(resolvePreprocessors);
    }
}
function initAsyncState(oView) {
    oView.oAsyncState = {};
    oView.oAsyncState.promise = null;
}
var createAndConnectController = function (oThis, mSettings) {
    if (!sap.ui.getWCCore().getConfiguration().getControllerCodeDeactivated()) {
        var oController = mSettings.controller, sName = oController && typeof oController.getMetadata === 'function' && oController.getMetadata().getName(), bAsync = mSettings.async;
        if (!oController && oThis.getControllerName) {
            var defaultController = oThis.getControllerName();
            if (defaultController) {
                var CustomizingConfiguration = sap.ui.require('sap/ui/core/CustomizingConfiguration');
                var sControllerReplacement = CustomizingConfiguration && CustomizingConfiguration.getControllerReplacement(defaultController, ManagedObject._sOwnerId);
                if (sControllerReplacement) {
                    defaultController = typeof sControllerReplacement === 'string' ? sControllerReplacement : sControllerReplacement.controllerName;
                }
                if (bAsync) {
                    oController = Controller.create({ name: defaultController });
                } else {
                    oController = sap.ui.controller(defaultController, true);
                }
            }
        } else if (oController) {
            var sOwnerId = ManagedObject._sOwnerId;
            if (!oController._isExtended()) {
                if (bAsync) {
                    oController = Controller.extendByCustomizing(oController, sName, bAsync).then(function (oController) {
                        return Controller.extendByProvider(oController, sName, sOwnerId, bAsync);
                    });
                } else {
                    oController = Controller.extendByCustomizing(oController, sName, bAsync);
                    oController = Controller.extendByProvider(oController, sName, sOwnerId, bAsync);
                }
            } else if (bAsync) {
                oController = Promise.resolve(oController);
            }
        }
        if (oController) {
            var connectToView = function (oController) {
                oThis.oController = oController;
                oController.oView = oThis;
            };
            if (bAsync) {
                if (!oThis.oAsyncState) {
                    throw new Error('The view ' + oThis.sViewName + ' runs in sync mode and therefore cannot use async controller extensions!');
                }
                return oController.then(connectToView);
            } else {
                connectToView(oController);
            }
        }
    } else {
        sap.ui.controller('sap.ui.core.mvc.EmptyControllerImpl', { '_sap.ui.core.mvc.EmptyControllerImpl': true });
        oThis.oController = sap.ui.controller('sap.ui.core.mvc.EmptyControllerImpl');
    }
};
View.prototype._initCompositeSupport = function (mSettings) {
    assert(!mSettings.preprocessors || this.getMetadata().getName().indexOf('XMLView'), 'Preprocessors only available for XMLView');
    this.oViewData = mSettings.viewData;
    this.sViewName = mSettings.viewName;
    var that = this;
    initPreprocessorQueues(this, mSettings);
    if (mSettings.async) {
        initAsyncState(this);
    }
    var CustomizingConfiguration = sap.ui.require('sap/ui/core/CustomizingConfiguration');
    if (CustomizingConfiguration && CustomizingConfiguration.hasCustomProperties(this.sViewName, this)) {
        this._fnSettingsPreprocessor = function (mSettings) {
            var sId = this.getId();
            if (CustomizingConfiguration && sId) {
                if (that.isPrefixedId(sId)) {
                    sId = sId.substring((that.getId() + '--').length);
                }
                var mCustomSettings = CustomizingConfiguration.getCustomProperties(that.sViewName, sId, that);
                if (mCustomSettings) {
                    mSettings = jQuery.extend(mSettings, mCustomSettings);
                }
            }
        };
    }
    var fnPropagateOwner = function (fnCallback, bAsync) {
        assert(typeof fnCallback === 'function', 'fn must be a function');
        var Component = sap.ui.require('sap/ui/core/Component');
        var oOwnerComponent = Component && Component.getOwnerComponentFor(that);
        if (oOwnerComponent) {
            if (bAsync) {
                that.fnScopedRunWithOwner = that.fnScopedRunWithOwner || function (fnCallbackToBeScoped) {
                    return oOwnerComponent.runAsOwner(fnCallbackToBeScoped);
                };
            }
            return oOwnerComponent.runAsOwner(fnCallback);
        }
        return fnCallback();
    };
    var fnAttachControllerToViewEvents = function (oView) {
        if (oView.oController && oView.oController.connectToView) {
            return oView.oController.connectToView(oView);
        }
    };
    var fnFireOnControllerConnected = function () {
        if (that.onControllerConnected) {
            return that.onControllerConnected(that.oController);
        }
    };
    if (this.initViewSettings) {
        if (mSettings.async) {
            this.oAsyncState.promise = this.initViewSettings(mSettings).then(function () {
                return fnPropagateOwner(createAndConnectController.bind(null, that, mSettings), true);
            }).then(function () {
                return fnPropagateOwner(fnFireOnControllerConnected, true);
            }).then(function () {
                return fnAttachControllerToViewEvents(that);
            }).then(function () {
                return that.runPreprocessor('controls', that, false);
            }).then(function () {
                return fnPropagateOwner(that.fireAfterInit.bind(that), true);
            }).then(function () {
                return that;
            });
        } else {
            this.initViewSettings(mSettings);
            createAndConnectController(this, mSettings);
            fnFireOnControllerConnected();
            fnAttachControllerToViewEvents(this);
            this.runPreprocessor('controls', this, true);
            this.fireAfterInit();
        }
    }
};
View.prototype.getController = function () {
    return this.oController;
};
View.prototype.byId = function (sId) {
    return sap.ui.getWCCore().byId(this.createId(sId));
};
View.prototype.createId = function (sId) {
    if (!this.isPrefixedId(sId)) {
        sId = this.getId() + '--' + sId;
    }
    return sId;
};
View.prototype.getLocalId = function (sId) {
    var sPrefix = this.getId() + '--';
    return sId && sId.indexOf(sPrefix) === 0 ? sId.slice(sPrefix.length) : null;
};
View.prototype.isPrefixedId = function (sId) {
    return !!(sId && sId.indexOf(this.getId() + '--') === 0);
};
View.prototype.getViewData = function () {
    return this.oViewData;
};
function deleteAsyncState() {
    this.oAsyncState = null;
}
View.prototype.exit = function () {
    this.fireBeforeExit();
    delete this.oController;
    delete this.oPreprocessorInfo;
    if (this.oAsyncState) {
        var fnDelete = deleteAsyncState.bind(this);
        this.oAsyncState.promise.then(fnDelete, fnDelete);
    }
};
View.prototype.onAfterRendering = function () {
    this.fireAfterRendering();
};
View.prototype.onBeforeRendering = function () {
    this.fireBeforeRendering();
};
View.prototype.clone = function (sIdSuffix, aLocalIds) {
    var mSettings = {}, sKey, oClone;
    for (sKey in this.mProperties && !(this.isBound && this.isBound(sKey))) {
        if (this.mProperties.hasOwnProperty(sKey)) {
            mSettings[sKey] = this.mProperties[sKey];
        }
    }
    oClone = Control.prototype.clone.call(this, sIdSuffix, aLocalIds, {
        cloneChildren: false,
        cloneBindings: true
    });
    var sEvent, aEventListeners, j;
    for (sEvent in oClone.mEventRegistry) {
        aEventListeners = oClone.mEventRegistry[sEvent];
        for (j = aEventListeners.length - 1; j >= 0; j--) {
            if (aEventListeners[j].oListener === this.getController()) {
                aEventListeners[j] = {
                    oListener: oClone.getController(),
                    fFunction: aEventListeners[j].fFunction,
                    oData: aEventListeners[j].oData
                };
            }
        }
    }
    oClone.applySettings(mSettings);
    return oClone;
};
View.prototype.getPreprocessors = function () {
    return this.mPreprocessors;
};
View.prototype.getPreprocessorInfo = function (bSync) {
    if (!this.oPreprocessorInfo) {
        this.oPreprocessorInfo = {
            name: this.sViewName,
            componentId: this._sOwnerId,
            id: this.getId(),
            caller: this + ' (' + this.sViewName + ')',
            sync: !!bSync
        };
    }
    if (View._supportInfo) {
        this.oPreprocessorInfo._supportInfo = View._supportInfo;
    }
    return this.oPreprocessorInfo;
};
View.prototype.runPreprocessor = function (sType, vSource, bSync) {
    var oViewInfo = this.getPreprocessorInfo(bSync), aPreprocessors = this.mPreprocessors && this.mPreprocessors[sType] || [], fnProcess, fnAppendPreprocessor, pChain;
    if (!bSync) {
        fnAppendPreprocessor = function (oViewInfo, oPreprocessor) {
            return function (vSource) {
                return oPreprocessor.preprocessor.then(function (oPreprocessorImpl) {
                    return oPreprocessorImpl.process(vSource, oViewInfo, oPreprocessor._settings);
                });
            };
        };
        pChain = Promise.resolve(vSource);
    }
    for (var i = 0, l = aPreprocessors.length; i < l; i++) {
        if (bSync && aPreprocessors[i]._syncSupport === true) {
            fnProcess = aPreprocessors[i].preprocessor.process;
            vSource = fnProcess(vSource, oViewInfo, aPreprocessors[i]._settings);
        } else if (!bSync) {
            pChain = pChain.then(fnAppendPreprocessor(oViewInfo, aPreprocessors[i]));
        } else {
            Log.debug('Async "' + sType + '"-preprocessor was skipped in sync view execution for ' + this.getMetadata().getClass()._sType + 'View', this.getId());
        }
    }
    return bSync ? vSource : pChain;
};
function initGlobalPreprocessorsRegistry(sType, sViewType) {
    if (!View._mPreprocessors[sViewType]) {
        View._mPreprocessors[sViewType] = {};
    }
    if (!View._mPreprocessors[sViewType][sType]) {
        View._mPreprocessors[sViewType][sType] = [];
    }
}
function onDemandPreprocessorExists(oView, sViewType, sType) {
    View._mPreprocessors[sViewType][sType].forEach(function (oPreprocessor) {
        if (oPreprocessor._onDemand) {
            Log.error('Registration for "' + sType + '" failed, only one on-demand-preprocessor allowed', oView.getMetadata().getName());
            return false;
        }
    });
    return true;
}
View.registerPreprocessor = function (sType, vPreprocessor, sViewType, bSyncSupport, bOnDemand, mSettings) {
    if (typeof bOnDemand !== 'boolean') {
        mSettings = bOnDemand;
        bOnDemand = false;
    }
    if (vPreprocessor) {
        initGlobalPreprocessorsRegistry(sType, sViewType);
        if (bOnDemand && !onDemandPreprocessorExists(this, sViewType, sType)) {
            return;
        }
        View._mPreprocessors[sViewType][sType].push({
            preprocessor: vPreprocessor,
            _onDemand: bOnDemand,
            _syncSupport: bSyncSupport,
            _settings: mSettings
        });
        Log.debug('Registered ' + (bOnDemand ? 'on-demand-' : '') + 'preprocessor for "' + sType + '"' + (bSyncSupport ? ' with syncSupport' : ''), this.getMetadata().getName());
    } else {
        Log.error('Registration for "' + sType + '" failed, no preprocessor specified', this.getMetadata().getName());
    }
};
View.prototype.hasPreprocessor = function (sType) {
    return !!this.mPreprocessors[sType].length;
};
View.create = function (mOptions) {
    var mParameters = merge({}, mOptions);
    mParameters.async = true;
    mParameters.viewContent = mParameters.definition;
    var Component = sap.ui.require('sap/ui/core/Component');
    var oOwnerComponent;
    if (Component && ManagedObject._sOwnerId) {
        oOwnerComponent = Component.get(ManagedObject._sOwnerId);
    }
    function createView() {
        return viewFactory(mParameters.id, mParameters, mParameters.type).loaded();
    }
    return new Promise(function (resolve, reject) {
        var sViewClass = getViewClassName(mParameters);
        sap.ui.require([sViewClass], function (ViewClass) {
            resolve(ViewClass);
        }, function (oError) {
            reject(oError);
        });
    }).then(function (ViewClass) {
        if (ViewClass.getMetadata().isA('sap.ui.core.mvc.XMLView')) {
            mParameters.processingMode = 'sequential';
        }
        if (oOwnerComponent) {
            return oOwnerComponent.runAsOwner(createView);
        } else {
            return createView();
        }
    });
};
View._legacyCreate = viewFactory;
sap.ui.view = function (sId, vView, sType) {
    var fnLogDeprecation = function (sMethod) {
        var sName = '';
        if (typeof sId == 'object') {
            sName = sId.viewName;
        }
        sName = sName || vView && vView.name;
        Log[sMethod]('Do not use deprecated view factory functions (' + sName + ').' + 'Use the static create function on the view module instead: [XML|JS|HTML|JSON|]View.create().', 'sap.ui.view', null, function () {
            return {
                type: 'sap.ui.view',
                name: sName
            };
        });
    };
    if (vView && vView.async) {
        fnLogDeprecation('info');
    } else {
        fnLogDeprecation('warning');
    }
    return viewFactory(sId, vView, sType);
};
function viewFactory(sId, vView, sType) {
    var view = null, oView = {};
    if (typeof sId === 'object' || typeof sId === 'string' && vView === undefined) {
        vView = sId;
        sId = undefined;
    }
    if (vView) {
        if (typeof vView === 'string') {
            oView.viewName = vView;
        } else {
            oView = vView;
        }
    }
    assert(!oView.async || typeof oView.async === 'boolean', 'sap.ui.view factory: Special setting async has to be of the type \'boolean\'!');
    if (sId) {
        oView.id = sId;
    }
    if (sType) {
        oView.type = sType;
    }
    var CustomizingConfiguration = sap.ui.require('sap/ui/core/CustomizingConfiguration');
    if (CustomizingConfiguration) {
        var customViewConfig = CustomizingConfiguration.getViewReplacement(oView.viewName, ManagedObject._sOwnerId);
        if (customViewConfig) {
            Log.info('Customizing: View replacement for view \'' + oView.viewName + '\' found and applied: ' + customViewConfig.viewName + ' (type: ' + customViewConfig.type + ')');
            jQuery.extend(oView, customViewConfig);
        } else {
            Log.debug('Customizing: no View replacement found for view \'' + oView.viewName + '\'.');
        }
    }
    var sViewClass = getViewClassName(oView);
    view = createView(sViewClass, oView);
    return view;
}
function getViewClassName(oViewSettings) {
    var sViewClass;
    if (!oViewSettings.type) {
        throw new Error('No view type specified.');
    } else if (oViewSettings.type === ViewType.JS) {
        sViewClass = 'sap/ui/core/mvc/JSView';
    } else if (oViewSettings.type === ViewType.JSON) {
        sViewClass = 'sap/ui/core/mvc/JSONView';
    } else if (oViewSettings.type === ViewType.XML) {
        sViewClass = 'sap/ui/core/mvc/XMLView';
    } else if (oViewSettings.type === ViewType.HTML) {
        sViewClass = 'sap/ui/core/mvc/HTMLView';
    } else if (oViewSettings.type === ViewType.Template) {
        sViewClass = 'sap/ui/core/mvc/TemplateView';
    } else {
        throw new Error('Unknown view type ' + oViewSettings.type + ' specified.');
    }
    return sViewClass;
}
function createView(sViewClass, oViewSettings) {
    var ViewClass = sap.ui.require(sViewClass);
    if (!ViewClass) {
        ViewClass = sap.ui.requireSync(sViewClass);
        if (oViewSettings.async) {
            Log.warning('sap.ui.view was called without requiring the according view class.');
        }
    }
    return new ViewClass(oViewSettings);
}
View.prototype.loaded = function () {
    if (this.oAsyncState && this.oAsyncState.promise) {
        return this.oAsyncState.promise;
    } else {
        return Promise.resolve(this);
    }
};
export default View;