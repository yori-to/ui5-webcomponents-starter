import jQuery from '../thirdparty/jquery.js';
import Device from '../Device.js';
import Global from '../Global.js';
import BaseObject from '../base/Object.js';
import CalendarType from './CalendarType.js';
import Locale from './Locale.js';
import URI from '../thirdparty/URI.js';
import UriParameters from '../../base/util/UriParameters.js';
import deepEqual from '../../base/util/deepEqual.js';
import Version from '../../base/util/Version.js';
import Log from '../../base/Log.js';
import assert from '../../base/assert.js';
import LocaleData from './LocaleData.js';
var Configuration = BaseObject.extend('sap.ui.core.Configuration', {
    constructor: function (oCore) {
        this._oCore = oCore;
        function detectLanguage() {
            function navigatorLanguage() {
                if (Device.os.android) {
                    var match = navigator.userAgent.match(/\s([a-z]{2}-[a-z]{2})[;)]/i);
                    if (match) {
                        return match[1];
                    }
                }
                return navigator.language;
            }
            return convertToLocaleOrNull(navigator.languages && navigator.languages[0] || navigatorLanguage() || navigator.userLanguage || navigator.browserLanguage) || new Locale('en');
        }
        var M_SETTINGS = {
            'theme': {
                type: 'string',
                defaultValue: 'base'
            },
            'language': {
                type: 'Locale',
                defaultValue: detectLanguage()
            },
            'formatLocale': {
                type: 'Locale',
                defaultValue: null
            },
            'calendarType': {
                type: 'string',
                defaultValue: null
            },
            'accessibility': {
                type: 'boolean',
                defaultValue: true
            },
            'autoAriaBodyRole': {
                type: 'boolean',
                defaultValue: true,
                noUrl: true
            },
            'animation': {
                type: 'boolean',
                defaultValue: true
            },
            'animationMode': {
                type: Configuration.AnimationMode,
                defaultValue: undefined
            },
            'rtl': {
                type: 'boolean',
                defaultValue: null
            },
            'debug': {
                type: 'boolean',
                defaultValue: false
            },
            'inspect': {
                type: 'boolean',
                defaultValue: false
            },
            'originInfo': {
                type: 'boolean',
                defaultValue: false
            },
            'noConflict': {
                type: 'boolean',
                defaultValue: false,
                noUrl: true
            },
            'noDuplicateIds': {
                type: 'boolean',
                defaultValue: true
            },
            'trace': {
                type: 'boolean',
                defaultValue: false,
                noUrl: true
            },
            'modules': {
                type: 'string[]',
                defaultValue: [],
                noUrl: true
            },
            'areas': {
                type: 'string[]',
                defaultValue: null,
                noUrl: true
            },
            'onInit': {
                type: 'code',
                defaultValue: undefined,
                noUrl: true
            },
            'uidPrefix': {
                type: 'string',
                defaultValue: '__',
                noUrl: true
            },
            'ignoreUrlParams': {
                type: 'boolean',
                defaultValue: false,
                noUrl: true
            },
            'preload': {
                type: 'string',
                defaultValue: 'auto'
            },
            'rootComponent': {
                type: 'string',
                defaultValue: '',
                noUrl: true
            },
            'preloadLibCss': {
                type: 'string[]',
                defaultValue: []
            },
            'application': {
                type: 'string',
                defaultValue: ''
            },
            'appCacheBuster': {
                type: 'string[]',
                defaultValue: []
            },
            'bindingSyntax': {
                type: 'string',
                defaultValue: 'default',
                noUrl: true
            },
            'versionedLibCss': {
                type: 'boolean',
                defaultValue: false
            },
            'manifestFirst': {
                type: 'boolean',
                defaultValue: false
            },
            'flexibilityServices': {
                type: 'string',
                defaultValue: '/sap/bc/lrep'
            },
            'whitelistService': {
                type: 'string',
                defaultValue: null,
                noUrl: true
            },
            'frameOptions': {
                type: 'string',
                defaultValue: 'default',
                noUrl: true
            },
            'frameOptionsConfig': {
                type: 'object',
                defaultValue: undefined,
                noUrl: true
            },
            'support': {
                type: 'string[]',
                defaultValue: null
            },
            'xx-wc-no-conflict': {
                type: 'object',
                defaultValue: undefined,
                noUrl: true
            },
            'xx-wc-force-default-gestures': {
                type: 'boolean',
                defaultValue: false
            },
            'compactSize': {
                type: 'boolean',
                defaultValue: false
            },
            'xx-rootComponentNode': {
                type: 'string',
                defaultValue: '',
                noUrl: true
            },
            'xx-appCacheBusterMode': {
                type: 'string',
                defaultValue: 'sync'
            },
            'xx-appCacheBusterHooks': {
                type: 'object',
                defaultValue: undefined,
                noUrl: true
            },
            'xx-disableCustomizing': {
                type: 'boolean',
                defaultValue: false,
                noUrl: true
            },
            'xx-viewCache': {
                type: 'boolean',
                defaultValue: true
            },
            'xx-test-mobile': {
                type: 'boolean',
                defaultValue: false
            },
            'xx-depCache': {
                type: 'boolean',
                defaultValue: false
            },
            'xx-domPatching': {
                type: 'boolean',
                defaultValue: false
            },
            'xx-libraryPreloadFiles': {
                type: 'string[]',
                defaultValue: []
            },
            'xx-componentPreload': {
                type: 'string',
                defaultValue: ''
            },
            'xx-designMode': {
                type: 'boolean',
                defaultValue: false
            },
            'xx-supportedLanguages': {
                type: 'string[]',
                defaultValue: []
            },
            'xx-bootTask': {
                type: 'function',
                defaultValue: undefined,
                noUrl: true
            },
            'xx-suppressDeactivationOfControllerCode': {
                type: 'boolean',
                defaultValue: false
            },
            'xx-lesssupport': {
                type: 'boolean',
                defaultValue: false
            },
            'xx-handleValidation': {
                type: 'boolean',
                defaultValue: false
            },
            'xx-fiori2Adaptation': {
                type: 'string[]',
                defaultValue: []
            },
            'xx-cache-use': {
                type: 'boolean',
                defaultValue: true
            },
            'xx-cache-excludedKeys': {
                type: 'string[]',
                defaultValue: []
            },
            'xx-cache-serialization': {
                type: 'boolean',
                defaultValue: false
            },
            'xx-nosync': {
                type: 'string',
                defaultValue: ''
            },
            'xx-waitForTheme': {
                type: 'boolean',
                defaultValue: false
            },
            'xx-xml-processing': {
                type: 'string',
                defaultValue: ''
            },
            'xx-avoidAriaApplicationRole': {
                type: 'boolean',
                defaultValue: false
            },
            'xx-hyphenation': {
                type: 'string',
                defaultValue: ''
            },
            'xx-flexBundleRequestForced': {
                type: 'boolean',
                defaultValue: false
            },
            'statistics': {
                type: 'boolean',
                defaultValue: false
            }
        };
        var M_COMPAT_FEATURES = {
            'xx-test': '1.15',
            'flexBoxPolyfill': '1.14',
            'sapMeTabContainer': '1.14',
            'sapMeProgessIndicator': '1.14',
            'sapMGrowingList': '1.14',
            'sapMListAsTable': '1.14',
            'sapMDialogWithPadding': '1.14',
            'sapCoreBindingSyntax': '1.24'
        };
        this.oFormatSettings = new Configuration.FormatSettings(this);
        var config = this;
        function setValue(sName, sValue) {
            if (typeof sValue === 'undefined' || sValue === null) {
                return;
            }
            switch (M_SETTINGS[sName].type) {
            case 'boolean':
                if (typeof sValue === 'string') {
                    if (M_SETTINGS[sName].defaultValue) {
                        config[sName] = sValue.toLowerCase() != 'false';
                    } else {
                        config[sName] = sValue.toLowerCase() === 'true' || sValue.toLowerCase() === 'x';
                    }
                } else {
                    config[sName] = !!sValue;
                }
                break;
            case 'string':
                config[sName] = '' + sValue;
                break;
            case 'code':
                config[sName] = typeof sValue === 'function' ? sValue : String(sValue);
                break;
            case 'function':
                if (typeof sValue !== 'function') {
                    throw new Error('unsupported value');
                }
                config[sName] = sValue;
                break;
            case 'string[]':
                if (Array.isArray(sValue)) {
                    config[sName] = sValue;
                } else if (typeof sValue === 'string') {
                    config[sName] = sValue.split(/[ ,;]/).map(function (s) {
                        return s.trim();
                    });
                } else {
                    throw new Error('unsupported value');
                }
                break;
            case 'object':
                if (typeof sValue !== 'object') {
                    throw new Error('unsupported value');
                }
                config[sName] = sValue;
                break;
            case 'Locale':
                var oLocale = convertToLocaleOrNull(sValue);
                if (oLocale || M_SETTINGS[sName].defaultValue == null) {
                    config[sName] = oLocale;
                } else {
                    throw new Error('unsupported value');
                }
                break;
            default:
                var vType = M_SETTINGS[sName].type;
                if (typeof vType === 'object') {
                    checkEnum(vType, sValue, sName);
                    config[sName] = sValue;
                } else {
                    throw new Error('illegal state');
                }
            }
        }
        function validateThemeRoot(sThemeRoot) {
            var oThemeRoot, sPath;
            try {
                oThemeRoot = new URI(sThemeRoot, window.location.href).normalize();
                sPath = oThemeRoot.path();
                return sPath + (sPath.slice(-1) === '/' ? '' : '/') + 'UI5/';
            } catch (e) {
            }
        }
        for (var n in M_SETTINGS) {
            config[n] = M_SETTINGS[n].defaultValue;
        }
        var oCfg = window['sap-ui-config'] || {};
        oCfg.oninit = oCfg.oninit || oCfg['evt-oninit'];
        for (var n in M_SETTINGS) {
            if (oCfg.hasOwnProperty(n.toLowerCase())) {
                setValue(n, oCfg[n.toLowerCase()]);
            } else if (!/^xx-/.test(n) && oCfg.hasOwnProperty('xx-' + n.toLowerCase())) {
                setValue(n, oCfg['xx-' + n.toLowerCase()]);
            }
        }
        if (oCfg.libs) {
            config.modules = oCfg.libs.split(',').map(function (lib) {
                return lib.trim() + '.library';
            }).concat(config.modules);
        }
        var PARAM_CVERS = 'compatversion';
        var DEFAULT_CVERS = oCfg[PARAM_CVERS];
        var BASE_CVERS = Version('1.14');
        this._compatversion = {};
        function _getCVers(key) {
            var v = !key ? DEFAULT_CVERS || BASE_CVERS.toString() : oCfg[PARAM_CVERS + '-' + key.toLowerCase()] || DEFAULT_CVERS || M_COMPAT_FEATURES[key] || BASE_CVERS.toString();
            v = Version(v.toLowerCase() === 'edge' ? Global.version : v);
            return Version(v.getMajor(), v.getMinor());
        }
        this._compatversion._default = _getCVers();
        for (var n in M_COMPAT_FEATURES) {
            this._compatversion[n] = _getCVers(n);
        }
        function getMetaTagValue(sName) {
            var oMetaTag = document.querySelector('META[name=\'' + sName + '\']'), sMetaContent = oMetaTag && oMetaTag.getAttribute('content');
            if (sMetaContent) {
                return sMetaContent;
            }
        }
        if (!config.ignoreUrlParams) {
            var sUrlPrefix = 'sap-ui-';
            var oUriParams = new UriParameters(window.location.href);
            if (oUriParams.mParams['sap-language']) {
                var sValue = config.sapLogonLanguage = oUriParams.get('sap-language');
                var oLocale = sValue && convertToLocaleOrNull(M_ABAP_LANGUAGE_TO_LOCALE[sValue.toUpperCase()] || sValue);
                if (oLocale) {
                    config.language = oLocale;
                } else if (sValue && !oUriParams.get('sap-locale') && !oUriParams.get('sap-ui-language')) {
                    Log.warning('sap-language \'' + sValue + '\' is not a valid BCP47 language tag and will only be used as SAP logon language');
                }
            }
            if (oUriParams.mParams['sap-locale']) {
                setValue('language', oUriParams.get('sap-locale'));
            }
            if (oUriParams.mParams['sap-rtl']) {
                var sValue = oUriParams.get('sap-rtl');
                if (sValue === 'X' || sValue === 'x') {
                    setValue('rtl', true);
                } else {
                    setValue('rtl', false);
                }
            }
            if (oUriParams.mParams['sap-theme']) {
                var sValue = oUriParams.get('sap-theme');
                if (sValue === '') {
                    config['theme'] = M_SETTINGS['theme'].defaultValue;
                } else {
                    setValue('theme', sValue);
                }
            }
            if (oUriParams.mParams['sap-statistics']) {
                var sValue = oUriParams.get('sap-statistics');
                setValue('statistics', sValue);
            }
            for (var n in M_SETTINGS) {
                if (M_SETTINGS[n].noUrl) {
                    continue;
                }
                var sValue = oUriParams.get(sUrlPrefix + n);
                if (sValue == null && !/^xx-/.test(n)) {
                    sValue = oUriParams.get(sUrlPrefix + 'xx-' + n);
                }
                if (sValue === '') {
                    config[n] = M_SETTINGS[n].defaultValue;
                } else {
                    setValue(n, sValue);
                }
            }
            if (oUriParams.mParams['sap-ui-legacy-date-format']) {
                this.oFormatSettings.setLegacyDateFormat(oUriParams.get('sap-ui-legacy-date-format'));
            }
            if (oUriParams.mParams['sap-ui-legacy-time-format']) {
                this.oFormatSettings.setLegacyTimeFormat(oUriParams.get('sap-ui-legacy-time-format'));
            }
            if (oUriParams.mParams['sap-ui-legacy-number-format']) {
                this.oFormatSettings.setLegacyNumberFormat(oUriParams.get('sap-ui-legacy-number-format'));
            }
        }
        config.sapparams = config.sapparams || {};
        config.sapparams['sap-language'] = this.getSAPLogonLanguage();
        [
            'sap-client',
            'sap-server',
            'sap-system'
        ].forEach(function (sName) {
            if (!config.ignoreUrlParams && oUriParams.get(sName)) {
                config.sapparams[sName] = oUriParams.get(sName);
            } else {
                config.sapparams[sName] = getMetaTagValue(sName);
            }
        });
        this.derivedRTL = Locale._impliesRTL(config.language);
        var sTheme = config.theme;
        var sThemeRoot;
        var iIndex = sTheme.indexOf('@');
        if (iIndex >= 0) {
            sThemeRoot = validateThemeRoot(sTheme.slice(iIndex + 1));
            if (sThemeRoot) {
                config.theme = sTheme.slice(0, iIndex);
                config.themeRoot = sThemeRoot;
            } else {
                config.theme = oCfg.theme && oCfg.theme !== sTheme ? oCfg.theme : 'base';
                iIndex = -1;
            }
        }
        config.theme = this._normalizeTheme(config.theme, sThemeRoot);
        var aCoreLangs = config['languagesDeliveredWithCore'] = Locale._coreI18nLocales;
        var aLangs = config['xx-supportedLanguages'];
        if (aLangs.length === 0 || aLangs.length === 1 && aLangs[0] === '*') {
            aLangs = [];
        } else if (aLangs.length === 1 && aLangs[0] === 'default') {
            aLangs = aCoreLangs || [];
        }
        config['xx-supportedLanguages'] = aLangs;
        var vAdaptations = config['xx-fiori2Adaptation'];
        if (vAdaptations.length === 0 || vAdaptations.length === 1 && vAdaptations[0] === 'false') {
            vAdaptations = false;
        } else if (vAdaptations.length === 1 && vAdaptations[0] === 'true') {
            vAdaptations = true;
        }
        config['xx-fiori2Adaptation'] = vAdaptations;
        if (config['bindingSyntax'] === 'default') {
            config['bindingSyntax'] = config.getCompatibilityVersion('sapCoreBindingSyntax').compareTo('1.26') < 0 ? 'simple' : 'complex';
        }
        if (!config['whitelistService']) {
            var sMetaTagValue = getMetaTagValue('sap.whitelistService');
            if (sMetaTagValue) {
                config['whitelistService'] = sMetaTagValue;
                if (config['frameOptions'] === 'default') {
                    config['frameOptions'] = 'trusted';
                }
            }
        }
        if (config['frameOptions'] === 'default' || config['frameOptions'] !== 'allow' && config['frameOptions'] !== 'deny' && config['frameOptions'] !== 'trusted') {
            config['frameOptions'] = 'allow';
        }
        var aCSSLibs = config['preloadLibCss'];
        if (aCSSLibs.length > 0) {
            aCSSLibs.appManaged = aCSSLibs[0].slice(0, 1) === '!';
            if (aCSSLibs.appManaged) {
                aCSSLibs[0] = aCSSLibs[0].slice(1);
            }
            if (aCSSLibs[0] === '*') {
                aCSSLibs.shift();
                config.modules.forEach(function (mod) {
                    var m = mod.match(/^(.*)\.library$/);
                    if (m) {
                        aCSSLibs.unshift(m[1]);
                    }
                });
            }
        }
        for (var n in M_SETTINGS) {
            if (config[n] !== M_SETTINGS[n].defaultValue) {
                Log.info('  ' + n + ' = ' + config[n]);
            }
        }
        if (this.getAnimationMode() === undefined) {
            if (this.animation) {
                this.setAnimationMode(Configuration.AnimationMode.full);
            } else {
                this.setAnimationMode(Configuration.AnimationMode.minimal);
            }
        } else {
            this.setAnimationMode(this.getAnimationMode());
        }
    },
    getVersion: function () {
        if (this._version) {
            return this._version;
        }
        this._version = new Version(Global.version);
        return this._version;
    },
    getCompatibilityVersion: function (sFeature) {
        if (typeof sFeature === 'string' && this._compatversion[sFeature]) {
            return this._compatversion[sFeature];
        }
        return this._compatversion._default;
    },
    getTheme: function () {
        return this.theme;
    },
    _setTheme: function (sTheme) {
        this.theme = sTheme;
        return this;
    },
    _normalizeTheme: function (sTheme, sThemeBaseUrl) {
        if (sTheme && sThemeBaseUrl == null && sTheme.match(/^sap_corbu$/i)) {
            return 'sap_goldreflection';
        }
        return sTheme;
    },
    getLanguage: function () {
        return this.language.sLocaleId;
    },
    getLanguageTag: function () {
        return this.language.toString();
    },
    getSAPLogonLanguage: function () {
        return this.sapLogonLanguage || this.language.getSAPLogonLanguage();
    },
    setLanguage: function (sLanguage, sSAPLogonLanguage) {
        var oLocale = convertToLocaleOrNull(sLanguage), bOldRTL = this.getRTL(), mChanges;
        check(oLocale, 'Configuration.setLanguage: sLanguage must be a valid BCP47 language tag');
        check(sSAPLogonLanguage == null || typeof sSAPLogonLanguage === 'string' && /[A-Z0-9]{2,2}/i.test(sSAPLogonLanguage), 'Configuration.setLanguage: sSAPLogonLanguage must be null or be a string of length 2, consisting of digits and latin characters only', true);
        if (oLocale.toString() != this.getLanguageTag() || sSAPLogonLanguage !== this.sapLogonLanguage) {
            this.language = oLocale;
            this.sapLogonLanguage = sSAPLogonLanguage || undefined;
            this.sapparams['sap-language'] = this.getSAPLogonLanguage();
            mChanges = this._collect();
            mChanges.language = this.getLanguageTag();
            this.derivedRTL = Locale._impliesRTL(oLocale);
            if (bOldRTL != this.getRTL()) {
                mChanges.rtl = this.getRTL();
            }
            this._endCollect();
        }
        return this;
    },
    getLocale: function () {
        return this.language;
    },
    getSAPParam: function (sName) {
        return this.sapparams && this.sapparams[sName];
    },
    getXMLProcessingMode: function () {
        return this['xx-xml-processing'];
    },
    setXMLProcessingMode: function (sMode) {
        this['xx-xml-processing'] = sMode;
        return this;
    },
    isUI5CacheOn: function () {
        return this['xx-cache-use'];
    },
    setUI5CacheOn: function (on) {
        this['xx-cache-use'] = on;
        return this;
    },
    isUI5CacheSerializationSupportOn: function () {
        return this['xx-cache-serialization'];
    },
    setUI5CacheSerializationSupport: function (on) {
        this['xx-cache-serialization'] = on;
        return this;
    },
    getUI5CacheExcludedKeys: function () {
        return this['xx-cache-excludedKeys'];
    },
    getCalendarType: function () {
        var sName;
        if (!CalendarType) {
            Global.getCore().loadLibrary('sap.ui.core');
        }
        if (!LocaleData) {
        }
        if (this.calendarType) {
            for (sName in CalendarType) {
                if (sName.toLowerCase() === this.calendarType.toLowerCase()) {
                    this.calendarType = sName;
                    return this.calendarType;
                }
            }
            Log.warning('Parameter \'calendarType\' is set to ' + this.calendarType + ' which isn\'t a valid value and therefore ignored. The calendar type is determined from format setting and current locale');
        }
        var sLegacyDateFormat = this.oFormatSettings.getLegacyDateFormat();
        switch (sLegacyDateFormat) {
        case '1':
        case '2':
        case '3':
        case '4':
        case '5':
        case '6':
            return CalendarType.Gregorian;
        case '7':
        case '8':
        case '9':
            return CalendarType.Japanese;
        case 'A':
        case 'B':
            return CalendarType.Islamic;
        case 'C':
            return CalendarType.Persian;
        }
        return LocaleData.getInstance(this.getLocale()).getPreferredCalendarType();
    },
    setCalendarType: function (sCalendarType) {
        var mChanges;
        if (this.calendarType !== sCalendarType) {
            mChanges = this._collect();
            this.calendarType = mChanges.calendarType = sCalendarType;
            this._endCollect();
        }
        return this;
    },
    getFormatLocale: function () {
        return (this.formatLocale || this.language).toString();
    },
    setFormatLocale: function (sFormatLocale) {
        var oFormatLocale = convertToLocaleOrNull(sFormatLocale), mChanges;
        check(sFormatLocale == null || typeof sFormatLocale === 'string' && oFormatLocale, 'sFormatLocale must be a BCP47 language tag or Java Locale id or null');
        if (toLanguageTag(oFormatLocale) !== toLanguageTag(this.formatLocale)) {
            this.formatLocale = oFormatLocale;
            mChanges = this._collect();
            mChanges.formatLocale = toLanguageTag(oFormatLocale);
            this._endCollect();
        }
        return this;
    },
    getLanguagesDeliveredWithCore: function () {
        return this['languagesDeliveredWithCore'];
    },
    getSupportedLanguages: function () {
        return this['xx-supportedLanguages'];
    },
    getAccessibility: function () {
        return this.accessibility;
    },
    getAutoAriaBodyRole: function () {
        return this.autoAriaBodyRole;
    },
    getAvoidAriaApplicationRole: function () {
        return this.getAutoAriaBodyRole() && this['xx-avoidAriaApplicationRole'];
    },
    getAnimation: function () {
        return this.animation;
    },
    getAnimationMode: function () {
        return this.animationMode;
    },
    setAnimationMode: function (sAnimationMode) {
        checkEnum(Configuration.AnimationMode, sAnimationMode, 'animationMode');
        this.animation = sAnimationMode !== Configuration.AnimationMode.minimal && sAnimationMode !== Configuration.AnimationMode.none;
        this.animationMode = sAnimationMode;
        if (this._oCore && this._oCore._setupAnimation) {
            this._oCore._setupAnimation();
        }
    },
    getRTL: function () {
        return this.rtl === null ? this.derivedRTL : this.rtl;
    },
    getFiori2Adaptation: function () {
        return this['xx-fiori2Adaptation'];
    },
    getWCNoConflict: function () {
        return this['xx-wc-no-conflict'];
    },
    getWCForceDefaultGestures: function () {
        return this['xx-wc-force-default-gestures'];
    },
    getCompactSize: function () {
        return this['compactSize'];
    },
    setRTL: function (bRTL) {
        check(bRTL === null || typeof bRTL === 'boolean', 'bRTL must be null or a boolean');
        var oldRTL = this.getRTL(), mChanges;
        this.rtl = bRTL;
        if (oldRTL != this.getRTL()) {
            mChanges = this._collect();
            mChanges.rtl = this.getRTL();
            this._endCollect();
        }
        return this;
    },
    getDebug: function () {
        return this.debug;
    },
    getInspect: function () {
        return this.inspect;
    },
    getOriginInfo: function () {
        return this.originInfo;
    },
    getNoDuplicateIds: function () {
        return this.noDuplicateIds;
    },
    getTrace: function () {
        return this.trace;
    },
    getUIDPrefix: function () {
        return this.uidPrefix;
    },
    getDesignMode: function () {
        return this['xx-designMode'];
    },
    getSuppressDeactivationOfControllerCode: function () {
        return this['xx-suppressDeactivationOfControllerCode'];
    },
    getControllerCodeDeactivated: function () {
        return this.getDesignMode() && !this.getSuppressDeactivationOfControllerCode();
    },
    getApplication: function () {
        return this.application;
    },
    getRootComponent: function () {
        return this.rootComponent;
    },
    getAppCacheBuster: function () {
        return this.appCacheBuster;
    },
    getAppCacheBusterMode: function () {
        return this['xx-appCacheBusterMode'];
    },
    getAppCacheBusterHooks: function () {
        return this['xx-appCacheBusterHooks'];
    },
    getDisableCustomizing: function () {
        return this['xx-disableCustomizing'];
    },
    getViewCache: function () {
        return this['xx-viewCache'];
    },
    getDomPatching: function () {
        return this['xx-domPatching'];
    },
    getPreload: function () {
        return this.preload;
    },
    getDepCache: function () {
        return this['xx-depCache'];
    },
    getManifestFirst: function () {
        return this.manifestFirst;
    },
    isFlexBundleRequestForced: function () {
        return this['xx-flexBundleRequestForced'];
    },
    getFlexibilityServices: function () {
        return this.flexibilityServices;
    },
    getComponentPreload: function () {
        return this['xx-componentPreload'] || this.preload;
    },
    getFormatSettings: function () {
        return this.oFormatSettings;
    },
    getFrameOptions: function () {
        return this.frameOptions;
    },
    getWhitelistService: function () {
        return this.whitelistService;
    },
    getSupportMode: function () {
        return this.support;
    },
    _collect: function () {
        var mChanges = this.mChanges || (this.mChanges = { __count: 0 });
        mChanges.__count++;
        return mChanges;
    },
    _endCollect: function () {
        var mChanges = this.mChanges;
        if (mChanges && --mChanges.__count === 0) {
            delete mChanges.__count;
            this._oCore && this._oCore.fireLocalizationChanged(mChanges);
            delete this.mChanges;
        }
    },
    getStatistics: function () {
        var result = this.statistics;
        try {
            result = result || window.localStorage.getItem('sap-ui-statistics') == 'X';
        } catch (e) {
        }
        return result;
    },
    getNoNativeScroll: function () {
        return false;
    },
    getHandleValidation: function () {
        return this['xx-handleValidation'];
    },
    getHyphenation: function () {
        return this['xx-hyphenation'];
    },
    applySettings: function (mSettings) {
        function applyAll(ctx, m) {
            var sName, sMethod;
            for (sName in m) {
                sMethod = 'set' + sName.slice(0, 1).toUpperCase() + sName.slice(1);
                if (sName === 'formatSettings' && ctx.oFormatSettings) {
                    applyAll(ctx.oFormatSettings, m[sName]);
                } else if (typeof ctx[sMethod] === 'function') {
                    ctx[sMethod](m[sName]);
                } else {
                    Log.warning('Configuration.applySettings: unknown setting \'' + sName + '\' ignored');
                }
            }
        }
        assert(typeof mSettings === 'object', 'mSettings must be an object');
        this._collect();
        applyAll(this, mSettings);
        this._endCollect();
        return this;
    }
});
Configuration.AnimationMode = {
    full: 'full',
    basic: 'basic',
    minimal: 'minimal',
    none: 'none'
};
function convertToLocaleOrNull(sLanguage) {
    try {
        if (sLanguage && typeof sLanguage === 'string') {
            return new Locale(sLanguage);
        }
    } catch (e) {
    }
}
function toLanguageTag(oLocale) {
    return oLocale ? oLocale.toString() : null;
}
var M_ABAP_LANGUAGE_TO_LOCALE = {
    'ZH': 'zh-Hans',
    'ZF': 'zh-Hant',
    '1Q': 'en-US-x-saptrc',
    '2Q': 'en-US-x-sappsd'
};
var M_ABAP_DATE_FORMAT_PATTERN = {
    '': { pattern: null },
    '1': { pattern: 'dd.MM.yyyy' },
    '2': { pattern: 'MM/dd/yyyy' },
    '3': { pattern: 'MM-dd-yyyy' },
    '4': { pattern: 'yyyy.MM.dd' },
    '5': { pattern: 'yyyy/MM/dd' },
    '6': { pattern: 'yyyy-MM-dd' },
    '7': { pattern: 'Gyy.MM.dd' },
    '8': { pattern: 'Gyy/MM/dd' },
    '9': { pattern: 'Gyy-MM-dd' },
    'A': { pattern: 'yyyy/MM/dd' },
    'B': { pattern: 'yyyy/MM/dd' },
    'C': { pattern: 'yyyy/MM/dd' }
};
var M_ABAP_TIME_FORMAT_PATTERN = {
    '': {
        'short': null,
        medium: null,
        dayPeriods: null
    },
    '0': {
        'short': 'HH:mm',
        medium: 'HH:mm:ss',
        dayPeriods: null
    },
    '1': {
        'short': 'hh:mm a',
        medium: 'hh:mm:ss a',
        dayPeriods: [
            'AM',
            'PM'
        ]
    },
    '2': {
        'short': 'hh:mm a',
        medium: 'hh:mm:ss a',
        dayPeriods: [
            'am',
            'pm'
        ]
    },
    '3': {
        'short': 'KK:mm a',
        medium: 'KK:mm:ss a',
        dayPeriods: [
            'AM',
            'PM'
        ]
    },
    '4': {
        'short': 'KK:mm a',
        medium: 'KK:mm:ss a',
        dayPeriods: [
            'am',
            'pm'
        ]
    }
};
var M_ABAP_NUMBER_FORMAT_SYMBOLS = {
    '': {
        groupingSeparator: null,
        decimalSeparator: null
    },
    ' ': {
        groupingSeparator: '.',
        decimalSeparator: ','
    },
    'X': {
        groupingSeparator: ',',
        decimalSeparator: '.'
    },
    'Y': {
        groupingSeparator: ' ',
        decimalSeparator: ','
    }
};
function check(bCondition, sMessage) {
    if (!bCondition) {
        throw new Error(sMessage);
    }
}
function checkEnum(oEnum, sValue, sPropertyName) {
    var aValidValues = [];
    for (var sKey in oEnum) {
        if (oEnum.hasOwnProperty(sKey)) {
            if (oEnum[sKey] === sValue) {
                return;
            }
            aValidValues.push(oEnum[sKey]);
        }
    }
    throw new Error('Unsupported Enumeration value for ' + sPropertyName + ', valid values are: ' + aValidValues.join(', '));
}
BaseObject.extend('sap.ui.core.Configuration.FormatSettings', {
    constructor: function (oConfiguration) {
        this.oConfiguration = oConfiguration;
        this.mSettings = {};
        this.sLegacyDateFormat = undefined;
        this.sLegacyTimeFormat = undefined;
        this.sLegacyNumberFormatSymbolSet = undefined;
    },
    getFormatLocale: function () {
        function fallback(that) {
            var oLocale = that.oConfiguration.language;
            if (!jQuery.isEmptyObject(that.mSettings)) {
                var l = oLocale.toString();
                if (l.indexOf('-x-') < 0) {
                    l = l + '-x-sapufmt';
                } else if (l.indexOf('-sapufmt') <= l.indexOf('-x-')) {
                    l = l + '-sapufmt';
                }
                oLocale = new Locale(l);
            }
            return oLocale;
        }
        return this.oConfiguration.formatLocale || fallback(this);
    },
    _set: function (sKey, oValue) {
        var oOldValue = this.mSettings[sKey];
        if (oValue != null) {
            this.mSettings[sKey] = oValue;
        } else {
            delete this.mSettings[sKey];
        }
        if ((oOldValue != null || oValue != null) && !deepEqual(oOldValue, oValue)) {
            var mChanges = this.oConfiguration._collect();
            mChanges[sKey] = oValue;
            this.oConfiguration._endCollect();
        }
    },
    getCustomUnits: function () {
        return this.mSettings['units'] ? this.mSettings['units']['short'] : undefined;
    },
    setCustomUnits: function (mUnits) {
        var mUnitsshort = null;
        if (mUnits) {
            mUnitsshort = { 'short': mUnits };
        }
        this._set('units', mUnitsshort);
        return this;
    },
    addCustomUnits: function (mUnits) {
        var mExistingUnits = this.getCustomUnits();
        if (mExistingUnits) {
            mUnits = jQuery.extend({}, mExistingUnits, mUnits);
        }
        this.setCustomUnits(mUnits);
        return this;
    },
    setUnitMappings: function (mUnitMappings) {
        this._set('unitMappings', mUnitMappings);
        return this;
    },
    addUnitMappings: function (mUnitMappings) {
        var mExistingUnits = this.getUnitMappings();
        if (mExistingUnits) {
            mUnitMappings = jQuery.extend({}, mExistingUnits, mUnitMappings);
        }
        this.setUnitMappings(mUnitMappings);
        return this;
    },
    getUnitMappings: function () {
        return this.mSettings['unitMappings'];
    },
    getDatePattern: function (sStyle) {
        assert(sStyle == 'short' || sStyle == 'medium' || sStyle == 'long' || sStyle == 'full', 'sStyle must be short, medium, long or full');
        return this.mSettings['dateFormats-' + sStyle];
    },
    setDatePattern: function (sStyle, sPattern) {
        check(sStyle == 'short' || sStyle == 'medium' || sStyle == 'long' || sStyle == 'full', 'sStyle must be short, medium, long or full');
        this._set('dateFormats-' + sStyle, sPattern);
        return this;
    },
    getTimePattern: function (sStyle) {
        assert(sStyle == 'short' || sStyle == 'medium' || sStyle == 'long' || sStyle == 'full', 'sStyle must be short, medium, long or full');
        return this.mSettings['timeFormats-' + sStyle];
    },
    setTimePattern: function (sStyle, sPattern) {
        check(sStyle == 'short' || sStyle == 'medium' || sStyle == 'long' || sStyle == 'full', 'sStyle must be short, medium, long or full');
        this._set('timeFormats-' + sStyle, sPattern);
        return this;
    },
    getNumberSymbol: function (sType) {
        assert(sType == 'decimal' || sType == 'group' || sType == 'plusSign' || sType == 'minusSign', 'sType must be decimal, group, plusSign or minusSign');
        return this.mSettings['symbols-latn-' + sType];
    },
    setNumberSymbol: function (sType, sSymbol) {
        check(sType == 'decimal' || sType == 'group' || sType == 'plusSign' || sType == 'minusSign', 'sType must be decimal, group, plusSign or minusSign');
        this._set('symbols-latn-' + sType, sSymbol);
        return this;
    },
    getCustomCurrencies: function () {
        return this.mSettings['currency'];
    },
    setCustomCurrencies: function (mCurrencies) {
        check(typeof mCurrencies === 'object' || mCurrencies == null, 'mCurrencyDigits must be an object');
        Object.keys(mCurrencies || {}).forEach(function (sCurrencyDigit) {
            check(typeof sCurrencyDigit === 'string');
            check(typeof mCurrencies[sCurrencyDigit] === 'object');
        });
        this._set('currency', mCurrencies);
        return this;
    },
    addCustomCurrencies: function (mCurrencies) {
        var mExistingCurrencies = this.getCustomCurrencies();
        if (mExistingCurrencies) {
            mCurrencies = jQuery.extend({}, mExistingCurrencies, mCurrencies);
        }
        this.setCustomCurrencies(mCurrencies);
        return this;
    },
    setFirstDayOfWeek: function (iValue) {
        check(typeof iValue == 'number' && iValue >= 0 && iValue <= 6, 'iValue must be an integer value between 0 and 6');
        this._set('weekData-firstDay', iValue);
        return this;
    },
    _setDayPeriods: function (sWidth, aTexts) {
        assert(sWidth == 'narrow' || sWidth == 'abbreviated' || sWidth == 'wide', 'sWidth must be narrow, abbreviated or wide');
        this._set('dayPeriods-format-' + sWidth, aTexts);
        return this;
    },
    getLegacyDateFormat: function () {
        return this.sLegacyDateFormat || undefined;
    },
    setLegacyDateFormat: function (sFormatId) {
        sFormatId = sFormatId ? String(sFormatId).toUpperCase() : '';
        check(!sFormatId || M_ABAP_DATE_FORMAT_PATTERN.hasOwnProperty(sFormatId), 'sFormatId must be one of [\'1\',\'2\',\'3\',\'4\',\'5\',\'6\',\'7\',\'8\',\'9\',\'A\',\'B\',\'C\'] or empty');
        var mChanges = this.oConfiguration._collect();
        this.sLegacyDateFormat = mChanges.legacyDateFormat = sFormatId;
        this.setDatePattern('short', M_ABAP_DATE_FORMAT_PATTERN[sFormatId].pattern);
        this.setDatePattern('medium', M_ABAP_DATE_FORMAT_PATTERN[sFormatId].pattern);
        this.oConfiguration._endCollect();
        return this;
    },
    getLegacyTimeFormat: function () {
        return this.sLegacyTimeFormat || undefined;
    },
    setLegacyTimeFormat: function (sFormatId) {
        check(!sFormatId || M_ABAP_TIME_FORMAT_PATTERN.hasOwnProperty(sFormatId), 'sFormatId must be one of [\'0\',\'1\',\'2\',\'3\',\'4\'] or empty');
        var mChanges = this.oConfiguration._collect();
        this.sLegacyTimeFormat = mChanges.legacyTimeFormat = sFormatId = sFormatId || '';
        this.setTimePattern('short', M_ABAP_TIME_FORMAT_PATTERN[sFormatId]['short']);
        this.setTimePattern('medium', M_ABAP_TIME_FORMAT_PATTERN[sFormatId]['medium']);
        this._setDayPeriods('abbreviated', M_ABAP_TIME_FORMAT_PATTERN[sFormatId].dayPeriods);
        this.oConfiguration._endCollect();
        return this;
    },
    getLegacyNumberFormat: function () {
        return this.sLegacyNumberFormat || undefined;
    },
    setLegacyNumberFormat: function (sFormatId) {
        sFormatId = sFormatId ? sFormatId.toUpperCase() : '';
        check(!sFormatId || M_ABAP_NUMBER_FORMAT_SYMBOLS.hasOwnProperty(sFormatId), 'sFormatId must be one of [\' \',\'X\',\'Y\'] or empty');
        var mChanges = this.oConfiguration._collect();
        this.sLegacyNumberFormat = mChanges.legacyNumberFormat = sFormatId;
        this.setNumberSymbol('group', M_ABAP_NUMBER_FORMAT_SYMBOLS[sFormatId].groupingSeparator);
        this.setNumberSymbol('decimal', M_ABAP_NUMBER_FORMAT_SYMBOLS[sFormatId].decimalSeparator);
        this.oConfiguration._endCollect();
        return this;
    },
    setLegacyDateCalendarCustomizing: function (aMappings) {
        check(Array.isArray(aMappings), 'aMappings must be an Array');
        var mChanges = this.oConfiguration._collect();
        this.aLegacyDateCalendarCustomizing = mChanges.legacyDateCalendarCustomizing = aMappings;
        this.oConfiguration._endCollect();
        return this;
    },
    getLegacyDateCalendarCustomizing: function () {
        return this.aLegacyDateCalendarCustomizing;
    },
    getCustomLocaleData: function () {
        return this.mSettings;
    }
});
export default Configuration;