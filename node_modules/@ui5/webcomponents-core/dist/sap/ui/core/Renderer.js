import jQuery from '../thirdparty/jquery.js';
import ObjectPath from '../../base/util/ObjectPath.js';
import assert from '../../base/assert.js';
var Renderer = {};
var sapUiCore;
function createExtendFunction(oBaseRenderer) {
    return function (sName, oRendererInfo) {
        assert(typeof sName === 'string' && sName, 'Renderer.extend must be called with a non-empty name for the new renderer');
        assert(oRendererInfo == null || typeof oRendererInfo === 'object', 'oRendererInfo must be an object or can be omitted');
        var oChildRenderer = Object.create(oBaseRenderer);
        oChildRenderer.extend = createExtendFunction(oChildRenderer);
        if (oRendererInfo) {
            jQuery.extend(oChildRenderer, oRendererInfo);
        }
        ObjectPath.set(sName, oChildRenderer);
        return oChildRenderer;
    };
}
var extend = createExtendFunction(Renderer);
Renderer.extend = function (vName, oRendererInfo) {
    if (typeof vName === 'string') {
        return extend(vName, oRendererInfo);
    } else {
        var oChildRenderer = Object.create(vName || null);
        oChildRenderer._super = vName;
        oChildRenderer.extend = createExtendFunction(oChildRenderer);
        return oChildRenderer;
    }
};
Renderer.getTextAlign = function (oTextAlign, oTextDirection) {
    if (!sapUiCore) {
        sapUiCore = sap.ui.requireSync('sap/ui/core/library');
    }
    var TextAlign = sapUiCore.TextAlign;
    var TextDirection = sapUiCore.TextDirection;
    var sTextAlign = '', bRTL = sap.ui.getWCCore().getConfiguration().getRTL();
    switch (oTextAlign) {
    case TextAlign.End:
        switch (oTextDirection) {
        case TextDirection.LTR:
            sTextAlign = 'right';
            break;
        case TextDirection.RTL:
            sTextAlign = 'left';
            break;
        default:
            sTextAlign = bRTL ? 'left' : 'right';
            break;
        }
        break;
    case TextAlign.Begin:
        switch (oTextDirection) {
        case TextDirection.LTR:
            sTextAlign = 'left';
            break;
        case TextDirection.RTL:
            sTextAlign = 'right';
            break;
        default:
            sTextAlign = bRTL ? 'right' : 'left';
            break;
        }
        break;
    case TextAlign.Right:
        if (!bRTL || oTextDirection == TextDirection.LTR) {
            sTextAlign = 'right';
        }
        break;
    case TextAlign.Center:
        sTextAlign = 'center';
        break;
    case TextAlign.Left:
        if (bRTL || oTextDirection == TextDirection.RTL) {
            sTextAlign = 'left';
        }
        break;
    }
    return sTextAlign;
};
export default Renderer;