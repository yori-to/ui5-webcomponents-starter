import jQuery from '../thirdparty/jquery.js';
import BaseObject from '../base/Object.js';
import URI from '../thirdparty/URI.js';
import Version from '../../base/util/Version.js';
import Log from '../../base/Log.js';
import includeStylesheet from '../dom/includeStylesheet.js';
import ResourceBundle from '../../base/i18n/ResourceBundle.js';
import uid from '../../base/util/uid.js';
import isPlainObject from '../../base/util/isPlainObject.js';
import LoaderExtensions from '../../base/util/LoaderExtensions.js';
var rManifestTemplate = /\{\{([^\}\}]+)\}\}/g;
function getVersionWithoutSuffix(sVersion) {
    var oVersion = Version(sVersion);
    return oVersion.getSuffix() ? Version(oVersion.getMajor() + '.' + oVersion.getMinor() + '.' + oVersion.getPatch()) : oVersion;
}
function processObject(oObject, fnCallback) {
    for (var sKey in oObject) {
        if (!oObject.hasOwnProperty(sKey)) {
            continue;
        }
        var vValue = oObject[sKey];
        switch (typeof vValue) {
        case 'object':
            if (vValue) {
                processObject(vValue, fnCallback);
            }
            break;
        case 'string':
            fnCallback(oObject, sKey, vValue);
            break;
        default:
        }
    }
}
function getObject(oObject, sPath) {
    if (oObject && sPath && typeof sPath === 'string' && sPath[0] === '/') {
        var aPaths = sPath.substring(1).split('/'), sPathSegment;
        for (var i = 0, l = aPaths.length; i < l; i++) {
            sPathSegment = aPaths[i];
            oObject = oObject.hasOwnProperty(sPathSegment) ? oObject[sPathSegment] : undefined;
            if (oObject === null || typeof oObject !== 'object') {
                if (i + 1 < l && oObject !== undefined) {
                    oObject = undefined;
                }
                break;
            }
        }
        return oObject;
    }
    return oObject && oObject[sPath];
}
function deepFreeze(oObject) {
    if (oObject && typeof oObject === 'object' && !Object.isFrozen(oObject)) {
        Object.freeze(oObject);
        for (var sKey in oObject) {
            if (oObject.hasOwnProperty(sKey)) {
                deepFreeze(oObject[sKey]);
            }
        }
    }
}
var Manifest = BaseObject.extend('sap.ui.core.Manifest', {
    constructor: function (oManifest, mOptions) {
        BaseObject.apply(this, arguments);
        this._uid = uid();
        this._iInstanceCount = 0;
        this._bIncludesLoaded = false;
        this._oRawManifest = oManifest;
        this._bProcess = !(mOptions && mOptions.process === false);
        this._bAsync = !(mOptions && mOptions.async === false);
        this._sComponentName = mOptions && mOptions.componentName;
        var sComponentName = this.getComponentName(), sBaseUrl = mOptions && mOptions.baseUrl || sComponentName && sap.ui.require.toUrl(sComponentName.replace(/\./g, '/')) + '/';
        if (sBaseUrl) {
            this._oBaseUri = new URI(sBaseUrl).absoluteTo(new URI(document.baseURI).search(''));
        }
        if (mOptions && typeof mOptions.url === 'string') {
            this._oManifestBaseUri = new URI(mOptions.url).absoluteTo(new URI(document.baseURI).search('')).search('');
        } else {
            this._oManifestBaseUri = this._oBaseUri;
        }
        deepFreeze(this._oRawManifest);
        this._oManifest = jQuery.extend(true, {}, this._oRawManifest);
        if (this._bProcess) {
            this._processI18n();
        }
    },
    _processI18n: function (bAsync) {
        var aI18nProperties = [];
        processObject(this._oManifest, function (oObject, sKey, vValue) {
            var match = vValue.match(rManifestTemplate);
            if (match) {
                aI18nProperties.push({
                    object: oObject,
                    key: sKey
                });
            }
        });
        if (aI18nProperties.length > 0) {
            var fnReplaceI18n = function (oResourceBundle) {
                var fnReplaceI18nText = function (sMatch, sI18nKey) {
                    return oResourceBundle.getText(sI18nKey);
                };
                for (var i = 0, l = aI18nProperties.length; i < l; i++) {
                    var oProperty = aI18nProperties[i];
                    oProperty.object[oProperty.key] = oProperty.object[oProperty.key].replace(rManifestTemplate, fnReplaceI18nText);
                }
            };
            if (bAsync) {
                return this._loadI18n(bAsync).then(fnReplaceI18n);
            } else {
                fnReplaceI18n(this._loadI18n(bAsync));
            }
        } else {
            return bAsync ? Promise.resolve() : undefined;
        }
    },
    _loadI18n: function (bAsync) {
        var oManifest = this._oRawManifest, sI18n = oManifest['sap.app'] && oManifest['sap.app']['i18n'] || 'i18n/i18n.properties', oI18nURI = new URI(sI18n);
        return ResourceBundle.create({
            url: this._resolveUri(oI18nURI, 'manifest').toString(),
            async: bAsync
        });
    },
    getJson: function () {
        return this._oManifest;
    },
    getRawJson: function () {
        return this._oRawManifest;
    },
    getEntry: function (sPath) {
        if (!sPath || sPath.indexOf('.') <= 0) {
            Log.warning('Manifest entries with keys without namespace prefix can not be read via getEntry. Key: ' + sPath + ', Component: ' + this.getComponentName());
            return null;
        }
        var oManifest = this.getJson();
        var oEntry = getObject(oManifest, sPath);
        if (sPath && sPath[0] !== '/' && !isPlainObject(oEntry)) {
            Log.warning('Manifest entry with key \'' + sPath + '\' must be an object. Component: ' + this.getComponentName());
            return null;
        }
        return oEntry;
    },
    checkUI5Version: function () {
        var sMinUI5Version = this.getEntry('/sap.ui5/dependencies/minUI5Version');
        if (sMinUI5Version && Log.isLoggable(Log.Level.WARNING) && sap.ui.getWCCore().getConfiguration().getDebug()) {
            sap.ui.getVersionInfo({ async: true }).then(function (oVersionInfo) {
                var oMinVersion = getVersionWithoutSuffix(sMinUI5Version);
                var oVersion = getVersionWithoutSuffix(oVersionInfo && oVersionInfo.version);
                if (oMinVersion.compareTo(oVersion) > 0) {
                    Log.warning('Component "' + this.getComponentName() + '" requires at least version "' + oMinVersion.toString() + '" but running on "' + oVersion.toString() + '"!');
                }
            }.bind(this), function (e) {
                Log.warning('The validation of the version for Component "' + this.getComponentName() + '" failed! Reasion: ' + e);
            }.bind(this));
        }
    },
    loadIncludes: function () {
        if (this._bIncludesLoaded) {
            return;
        }
        var mResources = this.getEntry('/sap.ui5/resources');
        if (!mResources) {
            return;
        }
        var sComponentName = this.getComponentName();
        var aJSResources = mResources['js'];
        if (aJSResources) {
            for (var i = 0; i < aJSResources.length; i++) {
                var oJSResource = aJSResources[i];
                var sFile = oJSResource.uri;
                if (sFile) {
                    var m = sFile.match(/\.js$/i);
                    if (m) {
                        var sJsUrl = sComponentName.replace(/\./g, '/') + (sFile.slice(0, 1) === '/' ? '' : '/') + sFile.slice(0, m.index);
                        Log.info('Component "' + sComponentName + '" is loading JS: "' + sJsUrl + '"');
                        sap.ui.requireSync(sJsUrl);
                    }
                }
            }
        }
        var aCSSResources = mResources['css'];
        if (aCSSResources) {
            for (var j = 0; j < aCSSResources.length; j++) {
                var oCSSResource = aCSSResources[j];
                if (oCSSResource.uri) {
                    var sCssUrl = this.resolveUri(oCSSResource.uri);
                    Log.info('Component "' + sComponentName + '" is loading CSS: "' + sCssUrl + '"');
                    includeStylesheet(sCssUrl, {
                        id: oCSSResource.id,
                        'data-sap-ui-manifest-uid': this._uid
                    });
                }
            }
        }
        this._bIncludesLoaded = true;
    },
    removeIncludes: function () {
        if (!this._bIncludesLoaded) {
            return;
        }
        var mResources = this.getEntry('/sap.ui5/resources');
        if (!mResources) {
            return;
        }
        var sComponentName = this.getComponentName();
        var aCSSResources = mResources['css'];
        if (aCSSResources) {
            var aLinks = document.querySelectorAll('link[data-sap-ui-manifest-uid=\'' + this._uid + '\']');
            for (var i = 0; i < aLinks.length; i++) {
                var oLink = aLinks[i];
                Log.info('Component "' + sComponentName + '" is removing CSS: "' + oLink.href + '"');
                oLink.parentNode.removeChild(oLink);
            }
        }
        this._bIncludesLoaded = false;
    },
    loadDependencies: function () {
        var oDep = this.getEntry('/sap.ui5/dependencies'), sComponentName = this.getComponentName();
        if (oDep) {
            var mLibraries = oDep['libs'];
            if (mLibraries) {
                for (var sLib in mLibraries) {
                    if (!mLibraries[sLib].lazy) {
                        Log.info('Component "' + sComponentName + '" is loading library: "' + sLib + '"');
                        sap.ui.getWCCore().loadLibrary(sLib);
                    }
                }
            }
            var mComponents = oDep['components'];
            if (mComponents) {
                for (var sName in mComponents) {
                    if (!mComponents[sName].lazy) {
                        var sControllerModule = sName.replace(/\./g, '/') + '/Component';
                        var iModuleState = sap.ui.loader._.getModuleState(sControllerModule + '.js');
                        if (iModuleState === -1) {
                            sap.ui.requireSync(sControllerModule);
                        } else if (iModuleState === 0) {
                            Log.info('Component "' + sComponentName + '" is loading component: "' + sName + '.Component"');
                            sap.ui.requireSync('sap/ui/core/Component');
                            sap.ui.component.load({ name: sName });
                        }
                    }
                }
            }
        }
    },
    defineResourceRoots: function () {
        var mResourceRoots = this.getEntry('/sap.ui5/resourceRoots');
        if (mResourceRoots) {
            for (var sResourceRoot in mResourceRoots) {
                var sResourceRootPath = mResourceRoots[sResourceRoot];
                var oResourceRootURI = new URI(sResourceRootPath);
                if (oResourceRootURI.is('absolute') || oResourceRootURI.path() && oResourceRootURI.path()[0] === '/') {
                    Log.error('Resource root for "' + sResourceRoot + '" is absolute and therefore won\'t be registered! "' + sResourceRootPath + '"', this.getComponentName());
                    continue;
                }
                sResourceRootPath = this._resolveUri(oResourceRootURI).toString();
                var mPaths = {};
                mPaths[sResourceRoot.replace(/\./g, '/')] = sResourceRootPath;
                sap.ui.loader.config({ paths: mPaths });
            }
        }
    },
    getComponentName: function () {
        var oRawJson = this.getRawJson();
        return this._sComponentName || getObject(oRawJson, '/sap.ui5/componentName') || getObject(oRawJson, '/sap.app/id');
    },
    resolveUri: function (sUri, sRelativeTo) {
        var oUri = this._resolveUri(new URI(sUri), sRelativeTo);
        return oUri && oUri.toString();
    },
    _resolveUri: function (oUri, sRelativeTo) {
        return Manifest._resolveUriRelativeTo(oUri, sRelativeTo === 'manifest' ? this._oManifestBaseUri : this._oBaseUri);
    },
    init: function (oInstance) {
        if (this._iInstanceCount === 0) {
            this.checkUI5Version();
            this.defineResourceRoots();
            this.loadDependencies();
            this.loadIncludes();
            this.activateCustomizing();
        }
        if (oInstance) {
            this.activateCustomizing(oInstance);
        }
        this._iInstanceCount++;
    },
    exit: function (oInstance) {
        var iInstanceCount = Math.max(this._iInstanceCount - 1, 0);
        if (oInstance) {
            this.deactivateCustomizing(oInstance);
        }
        if (iInstanceCount === 0) {
            this.deactivateCustomizing();
            this.removeIncludes();
        }
        this._iInstanceCount = iInstanceCount;
    },
    activateCustomizing: function (oInstance) {
        var oUI5Manifest = this.getEntry('sap.ui5', true), mExtensions = oUI5Manifest && oUI5Manifest['extends'] && oUI5Manifest['extends'].extensions;
        if (!jQuery.isEmptyObject(mExtensions)) {
            var CustomizingConfiguration = sap.ui.requireSync('sap/ui/core/CustomizingConfiguration');
            if (!oInstance) {
                CustomizingConfiguration.activateForComponent(this.getComponentName());
            } else {
                CustomizingConfiguration.activateForComponentInstance(oInstance);
            }
        }
    },
    deactivateCustomizing: function (oInstance) {
        var CustomizingConfiguration = sap.ui.require('sap/ui/core/CustomizingConfiguration');
        if (CustomizingConfiguration) {
            if (!oInstance) {
                CustomizingConfiguration.deactivateForComponent(this.getComponentName());
            } else {
                CustomizingConfiguration.deactivateForComponentInstance(oInstance);
            }
        }
    }
});
Manifest._resolveUriRelativeTo = function (oUri, oBase) {
    if (oUri.is('absolute') || oUri.path() && oUri.path()[0] === '/') {
        return oUri;
    }
    var oPageBase = new URI(document.baseURI).search('');
    oBase = oBase.absoluteTo(oPageBase);
    return oUri.absoluteTo(oBase).relativeTo(oPageBase);
};
Manifest.load = function (mOptions) {
    var sManifestUrl = mOptions && mOptions.manifestUrl, sComponentName = mOptions && mOptions.componentName, bAsync = mOptions && mOptions.async, bFailOnError = mOptions && mOptions.failOnError;
    var oManifestUrl = new URI(sManifestUrl);
    [
        'sap-language',
        'sap-client'
    ].forEach(function (sName) {
        if (!oManifestUrl.hasQuery(sName)) {
            var sValue = sap.ui.getWCCore().getConfiguration().getSAPParam(sName);
            if (sValue) {
                oManifestUrl.addQuery(sName, sValue);
            }
        }
    });
    sManifestUrl = oManifestUrl.toString();
    Log.info('Loading manifest via URL: ' + sManifestUrl);
    if (!bAsync) {
        Log.warning('Synchronous loading of manifest, due to Manifest.load() call for \'' + sManifestUrl + '\'. Use parameter \'async\' true to avoid this.', 'SyncXHR', null, function () {
            return {
                type: 'SyncXHR',
                name: 'Manifest'
            };
        });
    }
    var oManifestJSON = LoaderExtensions.loadResource({
        url: sManifestUrl,
        dataType: 'json',
        async: typeof bAsync !== 'undefined' ? bAsync : false,
        headers: { 'Accept-Language': sap.ui.getWCCore().getConfiguration().getLanguageTag() },
        failOnError: typeof bFailOnError !== 'undefined' ? bFailOnError : true
    });
    var mSettings = {
        componentName: sComponentName,
        url: sManifestUrl,
        process: false
    };
    if (bAsync) {
        return oManifestJSON.then(function (oManifestJSON) {
            return new Manifest(oManifestJSON, mSettings);
        });
    }
    return new Manifest(oManifestJSON, mSettings);
};
export default Manifest;