import EventBus from '../EventBus.js';
import includes from '../../../base/util/includes.js';
import isPlainObject from '../../../base/util/isPlainObject.js';
import Log from '../../../base/Log.js';
var oInstance;
var s_UI5_MARKER = '______UI5______';
var PostMessageBus = EventBus.extend('sap.ui.core.postmessage.Bus', {
    constructor: function () {
        if (oInstance) {
            return oInstance;
        }
        oInstance = this;
        EventBus.apply(this, arguments);
        this._aAcceptedOrigins = [window.location.origin];
        this._aDeclinedOrigins = [];
        this._oPendingProcess = null;
        this._aEventQueue = [];
        this._receiver = this._receiver.bind(this);
        window.addEventListener('message', this._receiver);
    }
});
PostMessageBus.event = {
    CONNECT: '______CONNECT______',
    READY: '______READY______',
    ACCEPTED: '______ACCEPTED______',
    DECLINED: '______DECLINED______'
};
PostMessageBus.prototype.destroy = function () {
    window.removeEventListener('message', this._receiver);
    this._aEventQueue = [];
    EventBus.prototype.destroy.apply(this, arguments);
    oInstance = undefined;
    this.bIsDestroyed = true;
};
PostMessageBus.getInstance = function () {
    if (!oInstance) {
        oInstance = new PostMessageBus();
    }
    return oInstance;
};
PostMessageBus.prototype.publish = function (mParameters) {
    var oTarget = mParameters.target;
    var sOrigin = mParameters.origin;
    var sChannelId = mParameters.channelId;
    var sEventId = mParameters.eventId;
    var vData = mParameters.data;
    if (sEventId === PostMessageBus.event.READY) {
        if (!oTarget) {
            if (window.opener && window.opener !== window) {
                oTarget = window.opener;
            } else if (window.parent !== window) {
                oTarget = window.parent;
            } else {
                return;
            }
        }
        if (!sOrigin) {
            sOrigin = '*';
        }
    }
    if (typeof window === 'undefined' || !(oTarget != null && oTarget === oTarget.window) || oTarget === window) {
        throw TypeError('Target must be a window object and has to differ from current window');
    }
    if (typeof sOrigin !== 'string') {
        throw TypeError('Origin must be a string');
    }
    if (typeof sChannelId !== 'string') {
        throw TypeError('ChannelId must be a string');
    }
    if (typeof sEventId !== 'string') {
        throw TypeError('EventId must be a string');
    }
    if (!includes([
            PostMessageBus.event.READY,
            PostMessageBus.event.ACCEPTED,
            PostMessageBus.event.DECLINED
        ], sEventId) && sOrigin !== '*' && !includes(this._aAcceptedOrigins, sOrigin)) {
        this._aAcceptedOrigins.push(sOrigin);
    }
    var mMessage = {
        origin: sOrigin,
        channelId: sChannelId,
        eventId: sEventId,
        data: vData
    };
    mMessage[s_UI5_MARKER] = true;
    oTarget.postMessage(mMessage, sOrigin);
};
PostMessageBus.prototype._callListener = function (fnCallback, oListener, sChannelId, sEventId, mData) {
    fnCallback.call(oListener, mData);
};
PostMessageBus.prototype._getText = function (sKey, aParameters) {
    return sap.ui.getWCCore().getLibraryResourceBundle(true).then(function (oLibraryResourceBundle) {
        return oLibraryResourceBundle.getText(sKey, aParameters);
    });
};
PostMessageBus.prototype._receiver = function (oEvent) {
    var mData = oEvent.data;
    if (!isPlainObject(mData) || !mData.hasOwnProperty(s_UI5_MARKER)) {
        return;
    }
    if (this._oPendingProcess) {
        this._aEventQueue.push(oEvent);
    } else {
        this._oPendingProcess = this._processEvent(oEvent);
    }
};
PostMessageBus.prototype._processEvent = function (oEvent) {
    return new Promise(function (fnResolve) {
        var mData = oEvent.data;
        var sOrigin = oEvent.origin;
        if (includes(this._aDeclinedOrigins, sOrigin)) {
            fnResolve();
            return;
        }
        switch (mData.eventId) {
        case PostMessageBus.event.CONNECT: {
                if (typeof mData.data !== 'string') {
                    this.publish({
                        target: oEvent.source,
                        origin: oEvent.origin,
                        channelId: mData.channelId,
                        eventId: PostMessageBus.event.DECLINED
                    });
                    fnResolve();
                } else if (includes(this._aAcceptedOrigins, sOrigin)) {
                    this.publish({
                        target: oEvent.source,
                        origin: oEvent.origin,
                        channelId: mData.channelId,
                        eventId: PostMessageBus.event.ACCEPTED
                    });
                    fnResolve();
                } else {
                    sap.ui.require(['sap/ui/core/postmessage/confirmationDialog'], function (confirmationDialog) {
                        this._getText('PostMessage.Message', [
                            mData.data,
                            sOrigin
                        ]).then(function (sText) {
                            return confirmationDialog(sText);
                        }).then(function () {
                            this.addAcceptedOrigin(sOrigin);
                            this.publish({
                                target: oEvent.source,
                                origin: oEvent.origin,
                                channelId: mData.channelId,
                                eventId: PostMessageBus.event.ACCEPTED
                            });
                        }.bind(this), function () {
                            this.addDeclinedOrigin(sOrigin);
                            this.publish({
                                target: oEvent.source,
                                origin: oEvent.origin,
                                channelId: mData.channelId,
                                eventId: PostMessageBus.event.DECLINED
                            });
                        }.bind(this)).then(fnResolve);
                    }.bind(this));
                }
                break;
            }
        case PostMessageBus.event.ACCEPTED:
        case PostMessageBus.event.DECLINED:
        case PostMessageBus.event.READY: {
                oEvent.data.data = undefined;
                this._emitMessage(oEvent);
                fnResolve();
                break;
            }
        default: {
                if (includes(this._aAcceptedOrigins, sOrigin)) {
                    this._emitMessage(oEvent);
                }
                fnResolve();
            }
        }
    }.bind(this)).catch(function (vError) {
        var sMessage;
        var sDetail;
        if (typeof vError === 'string') {
            sMessage = vError;
        } else if (vError instanceof Error) {
            sMessage = vError.message;
            sDetail = vError.stack;
        } else {
            sMessage = 'Some unexpected error happened during post message processing';
        }
        Log.error(sMessage, sDetail, 'sap.ui.core.postmessage.Bus');
    }).then(function () {
        this._oPendingProcess = this._aEventQueue.length > 0 ? this._processEvent(this._aEventQueue.shift()) : null;
    }.bind(this));
};
PostMessageBus.prototype._emitMessage = function (oEvent) {
    var sChannelId = oEvent.data.channelId;
    var sEventId = oEvent.data.eventId;
    EventBus.prototype.publish.call(this, sChannelId, sEventId, {
        originalEvent: oEvent,
        channelId: sChannelId,
        eventId: sEventId,
        source: oEvent.source,
        origin: oEvent.origin,
        data: oEvent.data.data
    });
};
PostMessageBus.prototype.getAcceptedOrigins = function () {
    return this._aAcceptedOrigins.slice();
};
PostMessageBus.prototype.setAcceptedOrigins = function (aOrigins) {
    if (!Array.isArray(aOrigins)) {
        throw new TypeError('Expected an array, but got ' + typeof aOrigins);
    }
    this._aAcceptedOrigins = aOrigins.slice();
};
PostMessageBus.prototype.addAcceptedOrigin = function (sOrigin) {
    if (typeof sOrigin !== 'string') {
        throw new TypeError('Expected a string, but got ' + typeof sOrigin);
    }
    if (!includes(this._aAcceptedOrigins, sOrigin)) {
        this._aAcceptedOrigins.push(sOrigin);
    }
};
PostMessageBus.prototype.resetAcceptedOrigins = function () {
    this.setAcceptedOrigins([]);
};
PostMessageBus.prototype.getDeclinedOrigins = function () {
    return this._aDeclinedOrigins.slice();
};
PostMessageBus.prototype.setDeclinedOrigins = function (aOrigins) {
    if (!Array.isArray(aOrigins)) {
        throw new TypeError('Expected an array, but got ' + typeof aOrigins);
    }
    this._aDeclinedOrigins = aOrigins.slice();
};
PostMessageBus.prototype.addDeclinedOrigin = function (sOrigin) {
    if (typeof sOrigin !== 'string') {
        throw new TypeError('Expected a string, but got ' + typeof sOrigin);
    }
    if (!includes(this._aDeclinedOrigins, sOrigin)) {
        this._aDeclinedOrigins.push(sOrigin);
    }
};
PostMessageBus.prototype.resetDeclinedOrigins = function () {
    this.setDeclinedOrigins([]);
};
export default PostMessageBus;