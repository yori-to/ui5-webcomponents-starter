import BaseObject from '../base/Object.js';
import EventProvider from '../base/EventProvider.js';
import assert from '../../base/assert.js';
import Log from '../../base/Log.js';
var EventBus = BaseObject.extend('sap.ui.core.EventBus', {
    constructor: function () {
        BaseObject.apply(this);
        this._mChannels = {};
        this._defaultChannel = new EventProvider();
    }
});
EventBus.prototype.subscribe = function (sChannelId, sEventId, fnFunction, oListener) {
    if (typeof sEventId === 'function') {
        oListener = fnFunction;
        fnFunction = sEventId;
        sEventId = sChannelId;
        sChannelId = null;
    }
    assert(!sChannelId || typeof sChannelId === 'string', 'EventBus.subscribe: sChannelId must be empty or a non-empty string');
    assert(typeof sEventId === 'string' && sEventId, 'EventBus.subscribe: sEventId must be a non-empty string');
    assert(typeof fnFunction === 'function', 'EventBus.subscribe: fnFunction must be a function');
    assert(!oListener || typeof oListener === 'object', 'EventBus.subscribe: oListener must be empty or an object');
    var oChannel = getOrCreateChannel(this, sChannelId);
    oChannel.attachEvent(sEventId, fnFunction, oListener);
    return this;
};
EventBus.prototype.subscribeOnce = function (sChannelId, sEventId, fnFunction, oListener) {
    if (typeof sEventId === 'function') {
        oListener = fnFunction;
        fnFunction = sEventId;
        sEventId = sChannelId;
        sChannelId = null;
    }
    function fnOnce() {
        this.unsubscribe(sChannelId, sEventId, fnOnce, undefined);
        fnFunction.apply(oListener || this, arguments);
    }
    return this.subscribe(sChannelId, sEventId, fnOnce, undefined);
};
EventBus.prototype.unsubscribe = function (sChannelId, sEventId, fnFunction, oListener) {
    if (typeof sEventId === 'function') {
        oListener = fnFunction;
        fnFunction = sEventId;
        sEventId = sChannelId;
        sChannelId = null;
    }
    assert(!sChannelId || typeof sChannelId === 'string', 'EventBus.unsubscribe: sChannelId must be empty or a non-empty string');
    assert(typeof sEventId === 'string' && sEventId, 'EventBus.unsubscribe: sEventId must be a non-empty string');
    assert(typeof fnFunction === 'function', 'EventBus.unsubscribe: fnFunction must be a function');
    assert(!oListener || typeof oListener === 'object', 'EventBus.unsubscribe: oListener must be empty or an object');
    var oChannel = getChannel(this, sChannelId);
    if (!oChannel) {
        return this;
    }
    oChannel.detachEvent(sEventId, fnFunction, oListener);
    if (oChannel != this._defaultChannel) {
        var mEvents = EventProvider.getEventList(oChannel);
        var bIsEmpty = true;
        for (var sId in mEvents) {
            if (oChannel.hasListeners(sId)) {
                bIsEmpty = false;
                break;
            }
        }
        if (bIsEmpty) {
            delete this._mChannels[sChannelId];
        }
    }
    return this;
};
EventBus.prototype.publish = function (sChannelId, sEventId, oData) {
    if (arguments.length == 1) {
        oData = null;
        sEventId = sChannelId;
        sChannelId = null;
    } else if (arguments.length == 2) {
        if (typeof sEventId != 'string') {
            oData = sEventId;
            sEventId = sChannelId;
            sChannelId = null;
        }
    }
    oData = oData ? oData : {};
    assert(!sChannelId || typeof sChannelId === 'string', 'EventBus.publish: sChannelId must be empty or a non-empty string');
    assert(typeof sEventId === 'string' && sEventId, 'EventBus.publish: sEventId must be a non-empty string');
    assert(typeof oData === 'object', 'EventBus.publish: oData must be an object');
    var oChannel = getChannel(this, sChannelId);
    if (!oChannel) {
        if (Log.isLoggable(Log.Level.DEBUG, 'sap.ui.core.EventBus')) {
            Log.debug('Failed to publish into channel \'' + sChannelId + '\'.' + ' No such channel.', sChannelId, 'sap.ui.core.EventBus');
        }
        return;
    }
    var aEventListeners = EventProvider.getEventList(oChannel)[sEventId];
    if (Array.isArray(aEventListeners)) {
        aEventListeners = aEventListeners.slice();
        var oInfo;
        for (var i = 0, iL = aEventListeners.length; i < iL; i++) {
            oInfo = aEventListeners[i];
            this._callListener(oInfo.fFunction, oInfo.oListener || this, sChannelId, sEventId, oData);
        }
    } else if (Log.isLoggable(Log.Level.DEBUG, 'sap.ui.core.EventBus')) {
        Log.debug('Failed to publish Event \'' + sEventId + '\' in \'' + sChannelId + '\'.' + ' No listeners found.', sChannelId + '#' + sEventId, 'sap.ui.core.EventBus');
    }
};
EventBus.prototype.getInterface = function () {
    return this;
};
EventBus.prototype._callListener = function (fnCallback, oListener, sChannelId, sEventId, mData) {
    fnCallback.call(oListener, sChannelId, sEventId, mData);
};
EventBus.prototype.destroy = function () {
    this._defaultChannel.destroy();
    for (var channel in this._mChannels) {
        this._mChannels[channel].destroy();
    }
    this._mChannels = {};
    BaseObject.prototype.destroy.apply(this, arguments);
};
function getChannel(oEventBus, sChannelId) {
    if (!sChannelId) {
        return oEventBus._defaultChannel;
    }
    return oEventBus._mChannels[sChannelId];
}
function getOrCreateChannel(oEventBus, sChannelId) {
    var oChannel = getChannel(oEventBus, sChannelId);
    if (!oChannel && sChannelId) {
        oEventBus._mChannels[sChannelId] = new EventProvider();
        oChannel = oEventBus._mChannels[sChannelId];
    }
    return oChannel;
}
export default EventBus;