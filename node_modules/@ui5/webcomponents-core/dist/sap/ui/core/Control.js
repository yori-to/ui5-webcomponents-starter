import CustomStyleClassSupport from './CustomStyleClassSupport.js';
import Element from './Element.js';
import UIArea from './UIArea.js';
import RenderManager from './RenderManager.js';
import BusyIndicatorUtils from './BusyIndicatorUtils.js';
import BlockLayerUtils from './BlockLayerUtils.js';
import Log from '../../base/Log.js';
import jQuery from '../thirdparty/jquery.js';
var ResizeHandler;
var Control = Element.extend('sap.ui.core.Control', {
    metadata: {
        stereotype: 'control',
        'abstract': true,
        publicMethods: [
            'placeAt',
            'attachBrowserEvent',
            'detachBrowserEvent',
            'getControlsByFieldGroup',
            'triggerValidateFieldGroup',
            'checkFieldGroupIds'
        ],
        library: 'sap.ui.core',
        properties: {
            'blocked': {
                type: 'boolean',
                defaultValue: false,
                hidden: true
            },
            'busy': {
                type: 'boolean',
                defaultValue: false
            },
            'busyIndicatorDelay': {
                type: 'int',
                defaultValue: 1000
            },
            'busyIndicatorSize': {
                type: 'sap.ui.core.BusyIndicatorSize',
                defaultValue: 'Medium'
            },
            'visible': {
                type: 'boolean',
                group: 'Appearance',
                defaultValue: true
            },
            'fieldGroupIds': {
                type: 'string[]',
                defaultValue: []
            }
        },
        events: {
            validateFieldGroup: {
                enableEventBubbling: true,
                parameters: { fieldGroupIds: { type: 'string[]' } }
            }
        }
    },
    constructor: function (sId, mSettings) {
        this.bAllowTextSelection = true;
        Element.apply(this, arguments);
        this.bOutput = this.getDomRef() != null;
    },
    renderer: null
});
Control.prototype.clone = function () {
    var oClone = Element.prototype.clone.apply(this, arguments);
    if (this.aBindParameters) {
        for (var i = 0, l = this.aBindParameters.length; i < l; i++) {
            var aParams = this.aBindParameters[i];
            oClone.attachBrowserEvent(aParams.sEventType, aParams.fnHandler, aParams.oListener !== this ? aParams.oListener : undefined);
        }
    }
    oClone.bAllowTextSelection = this.bAllowTextSelection;
    return oClone;
};
CustomStyleClassSupport.apply(Control.prototype);
Control.prototype.isActive = function () {
    return (this.sId ? window.document.getElementById(this.sId) : null) != null;
};
Control.prototype.invalidate = function (oOrigin) {
    var oUIArea;
    if (this.bOutput && (oUIArea = this.getUIArea())) {
        if (!this._bIsBeingDestroyed) {
            oUIArea.addInvalidatedControl(this);
        }
    } else {
        var oParent = this.getParent();
        if (oParent && (this.bOutput || !(this.getVisible && this.getVisible() === false))) {
            oParent.invalidate(this);
        }
    }
};
Control.prototype.rerender = function () {
    UIArea.rerenderControl(this);
};
Control.prototype.getDomRef = function (sSuffix) {
    if (this.bOutput === false && !this.oParent) {
        return null;
    }
    return Element.prototype.getDomRef.call(this, sSuffix);
};
Control.prototype.allowTextSelection = function (bAllow) {
    this.bAllowTextSelection = bAllow;
    return this;
};
Control.prototype.attachBrowserEvent = function (sEventType, fnHandler, oListener) {
    if (sEventType && typeof sEventType === 'string') {
        if (typeof fnHandler === 'function') {
            if (!this.aBindParameters) {
                this.aBindParameters = [];
            }
            oListener = oListener || this;
            var fnProxy = fnHandler.bind(oListener);
            this.aBindParameters.push({
                sEventType: sEventType,
                fnHandler: fnHandler,
                oListener: oListener,
                fnProxy: fnProxy
            });
            if (!this._sapui_bInAfterRenderingPhase) {
                this.$().bind(sEventType, fnProxy);
            }
        }
    }
    return this;
};
Control.prototype.detachBrowserEvent = function (sEventType, fnHandler, oListener) {
    if (sEventType && typeof sEventType === 'string') {
        if (typeof fnHandler === 'function') {
            var $ = this.$(), i, oParamSet;
            oListener = oListener || this;
            if (this.aBindParameters) {
                for (i = this.aBindParameters.length - 1; i >= 0; i--) {
                    oParamSet = this.aBindParameters[i];
                    if (oParamSet.sEventType === sEventType && oParamSet.fnHandler === fnHandler && oParamSet.oListener === oListener) {
                        this.aBindParameters.splice(i, 1);
                        $.unbind(sEventType, oParamSet.fnProxy);
                    }
                }
            }
        }
    }
    return this;
};
Control.prototype.getRenderer = function () {
    return RenderManager.getRenderer(this);
};
Control.prototype.placeAt = function (oRef, vPosition) {
    var oCore = sap.ui.getWCCore();
    if (oCore.isInitialized()) {
        var oContainer = oRef;
        if (typeof oContainer === 'string') {
            oContainer = oCore.byId(oRef);
        }
        var bIsUIArea = false;
        if (!(oContainer instanceof Element)) {
            oContainer = oCore.createUIArea(oRef);
            bIsUIArea = true;
        }
        if (!oContainer) {
            return this;
        }
        if (!bIsUIArea) {
            var oContentAggInfo = oContainer.getMetadata().getAggregation('content');
            var bContainerSupportsPlaceAt = true;
            if (oContentAggInfo) {
                if (!oContentAggInfo.multiple || oContentAggInfo.type != 'sap.ui.core.Control') {
                    bContainerSupportsPlaceAt = false;
                }
            } else if (!oContainer.addContent || !oContainer.insertContent || !oContainer.removeAllContent) {
                bContainerSupportsPlaceAt = false;
            }
            if (!bContainerSupportsPlaceAt) {
                Log.warning('placeAt cannot be processed because container ' + oContainer + ' does not have an aggregation \'content\'.');
                return this;
            }
        }
        if (typeof vPosition === 'number') {
            oContainer.insertContent(this, vPosition);
        } else {
            vPosition = vPosition || 'last';
            switch (vPosition) {
            case 'last':
                oContainer.addContent(this);
                break;
            case 'first':
                oContainer.insertContent(this, 0);
                break;
            case 'only':
                oContainer.removeAllContent();
                oContainer.addContent(this);
                break;
            default:
                Log.warning('Position ' + vPosition + ' is not supported for function placeAt.');
            }
        }
    } else {
        var that = this;
        oCore.attachInitEvent(function () {
            that.placeAt(oRef, vPosition);
        });
    }
    return this;
};
Control.prototype.onselectstart = function (oBrowserEvent) {
    if (!this.bAllowTextSelection) {
        oBrowserEvent.preventDefault();
        oBrowserEvent.stopPropagation();
    }
};
Control.prototype.onBeforeRendering = function () {
};
Control.prototype.onAfterRendering = function () {
};
Control.prototype.getIdForLabel = function () {
    return this.getId();
};
Control.prototype.destroy = function (bSuppressInvalidate) {
    if (this.bIsDestroyed) {
        return;
    }
    this._bIsBeingDestroyed = true;
    this._cleanupBusyIndicator();
    ResizeHandler = ResizeHandler || sap.ui.require('sap/ui/core/ResizeHandler');
    if (ResizeHandler) {
        ResizeHandler.deregisterAllForControl(this.getId());
    }
    if (!this.getVisible()) {
        var oPlaceholder = document.getElementById(RenderManager.createInvisiblePlaceholderId(this));
        if (oPlaceholder && oPlaceholder.parentNode) {
            oPlaceholder.parentNode.removeChild(oPlaceholder);
        }
    }
    Element.prototype.destroy.call(this, bSuppressInvalidate);
};
var oRenderingDelegate = {
    onBeforeRendering: function () {
        fnRemoveAllBlockLayers.call(this);
    },
    onAfterRendering: function () {
        if (this.getBlocked() && this.getDomRef() && !this.getDomRef('blockedLayer')) {
            this._oBlockState = BlockLayerUtils.block(this, this.getId() + '-blockedLayer', this._sBlockSection);
            jQuery(this._oBlockState.$blockLayer.get(0)).addClass('sapUiBlockLayerOnly');
        }
        if (this.getBusy() && this.getDomRef() && !this._busyIndicatorDelayedCallId && !this.getDomRef('busyIndicator')) {
            var iDelay = this.getBusyIndicatorDelay();
            if (iDelay) {
                this._busyIndicatorDelayedCallId = setTimeout(fnAppendBusyIndicator.bind(this), iDelay);
            } else {
                fnAppendBusyIndicator.call(this);
            }
        }
    }
};
function fnAppendBusyIndicator() {
    if (!this.getBusy()) {
        return;
    }
    var $this = this.$(this._sBusySection);
    if (this._busyIndicatorDelayedCallId) {
        clearTimeout(this._busyIndicatorDelayedCallId);
        delete this._busyIndicatorDelayedCallId;
    }
    if (!$this || $this.length === 0) {
        Log.warning('BusyIndicator could not be rendered. The outer control instance is not valid anymore.');
        return;
    }
    if (this._sBlockSection === this._sBusySection) {
        if (this._oBlockState) {
            BusyIndicatorUtils.addHTML(this._oBlockState, this.getBusyIndicatorSize());
            BlockLayerUtils.toggleAnimationStyle(this._oBlockState, true);
            this._oBusyBlockState = this._oBlockState;
        } else {
            fnAddStandaloneBusyIndicator.call(this);
        }
    } else {
        fnAddStandaloneBusyIndicator.call(this);
    }
}
function fnAddStandaloneBlockLayer() {
    this._oBlockState = BlockLayerUtils.block(this, this.getId() + '-blockedLayer', this._sBlockSection);
    jQuery(this._oBlockState.$blockLayer.get(0)).addClass('sapUiBlockLayerOnly');
}
function fnAddStandaloneBusyIndicator() {
    this._oBusyBlockState = BlockLayerUtils.block(this, this.getId() + '-busyIndicator', this._sBusySection);
    BusyIndicatorUtils.addHTML(this._oBusyBlockState, this.getBusyIndicatorSize());
}
function fnRemoveAllBlockLayers() {
    BlockLayerUtils.unblock(this._oBlockState);
    BlockLayerUtils.unblock(this._oBusyBlockState);
    delete this._oBlockState;
    delete this._oBusyBlockState;
}
function fnRemoveBusyIndicator(bForceRemoval) {
    if (bForceRemoval) {
        fnRemoveAllBlockLayers.call(this);
        return;
    }
    var $this = this.$(this._sBusySection);
    $this.removeClass('sapUiLocalBusy');
    $this.removeAttr('aria-busy');
    if (this._sBlockSection === this._sBusySection) {
        if (!this.getBlocked() && !this.getBusy()) {
            fnRemoveAllBlockLayers.call(this);
        } else if (this.getBlocked()) {
            BlockLayerUtils.toggleAnimationStyle(this._oBlockState || this._oBusyBlockState, false);
            this._oBlockState = this._oBusyBlockState;
        } else if (this._oBusyBlockState) {
            BlockLayerUtils.unblock(this._oBusyBlockState);
            delete this._oBusyBlockState;
        }
    } else if (this._oBusyBlockState) {
        BlockLayerUtils.unblock(this._oBusyBlockState);
        delete this._oBusyBlockState;
    }
}
Control.prototype.setBlocked = function (bBlocked, sBlockedSection) {
    if (!!bBlocked == this.getProperty('blocked')) {
        return this;
    }
    this._sBlockSection = sBlockedSection || this._sBlockSection;
    this.setProperty('blocked', bBlocked, true);
    if (bBlocked) {
        this.addDelegate(oRenderingDelegate, false, this);
    } else {
        this.removeDelegate(oRenderingDelegate);
    }
    if (!this.getDomRef()) {
        return this;
    }
    if (bBlocked) {
        if (this._sBlockSection === this._sBusySection) {
            if (!this._oBusyBlockState && !this._oBlockState) {
                fnAddStandaloneBlockLayer.call(this);
            } else {
                Log.info('The control is already busy. Hence, no new block-layer was created for the shared section.');
            }
        } else {
            fnAddStandaloneBlockLayer.call(this);
        }
    } else {
        if (this._sBlockSection === this._sBusySection) {
            if (!this.getBlocked() && !this.getBusy()) {
                fnRemoveAllBlockLayers.call(this);
            } else if (this.getBusy()) {
                Log.info('The control is already busy. Hence, no new block-layer was created for the shared section.');
            }
        } else if (this._oBlockState) {
            BlockLayerUtils.unblock(this._oBlockState);
            delete this._oBlockState;
        }
    }
    return this;
};
Control.prototype.setBusy = function (bBusy, sBusySection) {
    if (!!bBusy == this.getProperty('busy')) {
        return this;
    }
    this._sBusySection = sBusySection || this._sBusySection;
    this.setProperty('busy', bBusy, true);
    if (bBusy) {
        this.addDelegate(oRenderingDelegate, false, this);
    } else {
        this.removeDelegate(oRenderingDelegate);
        if (this._busyIndicatorDelayedCallId) {
            clearTimeout(this._busyIndicatorDelayedCallId);
            delete this._busyIndicatorDelayedCallId;
        }
    }
    if (!this.getDomRef()) {
        return this;
    }
    if (bBusy) {
        if (this.getBusyIndicatorDelay() <= 0) {
            fnAppendBusyIndicator.call(this);
        } else {
            this._busyIndicatorDelayedCallId = setTimeout(fnAppendBusyIndicator.bind(this), this.getBusyIndicatorDelay());
        }
    } else {
        fnRemoveBusyIndicator.call(this);
    }
    return this;
};
Control.prototype.isBusy = Control.prototype.getBusy;
Control.prototype.setBusyIndicatorDelay = function (iDelay) {
    this.setProperty('busyIndicatorDelay', iDelay, true);
    return this;
};
Control.prototype._cleanupBusyIndicator = function () {
    if (this._busyIndicatorDelayedCallId) {
        clearTimeout(this._busyIndicatorDelayedCallId);
        delete this._busyIndicatorDelayedCallId;
    }
    fnRemoveBusyIndicator.call(this, true);
};
Control.prototype.getControlsByFieldGroupId = function (vFieldGroupIds) {
    return this.findAggregatedObjects(true, function (oElement) {
        if (oElement instanceof Control) {
            return oElement.checkFieldGroupIds(vFieldGroupIds);
        }
        return false;
    });
};
Control.prototype.checkFieldGroupIds = function (vFieldGroupIds) {
    if (typeof vFieldGroupIds === 'string') {
        vFieldGroupIds = vFieldGroupIds ? vFieldGroupIds.split(',') : [];
    }
    var aFieldGroups = this._getFieldGroupIds();
    if (Array.isArray(vFieldGroupIds)) {
        return vFieldGroupIds.every(function (sFieldGroupId) {
            return aFieldGroups.indexOf(sFieldGroupId) >= 0;
        });
    } else if (!vFieldGroupIds) {
        return aFieldGroups.length > 0;
    }
    return false;
};
Control.prototype.triggerValidateFieldGroup = function (aFieldGroupIds) {
    this.fireValidateFieldGroup({ fieldGroupIds: aFieldGroupIds });
};
export default Control;