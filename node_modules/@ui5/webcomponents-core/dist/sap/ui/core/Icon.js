import assert from '../../base/assert.js';
import Device from '../Device.js';
import Control from './Control.js';
import IconPool from './IconPool.js';
import InvisibleText from './InvisibleText.js';
import library from './library.js';
import IconRenderer from './IconRenderer.js';
import KeyCodes from '../events/KeyCodes.js';
import jQuery from '../thirdparty/jquery.js';
import Log from '../../base/Log.js';
var IconColor = library.IconColor;
var CSSColor = library.CSSColor;
var isColorValid = function (vColor) {
    if (vColor != null && vColor !== '' && !CSSColor.isValid(vColor) && !(vColor in IconColor)) {
        Log.error('"' + vColor + '" is not of type sap.ui.core.CSSColor nor of type sap.ui.core.IconColor.');
        return false;
    } else {
        return true;
    }
};
var Icon = Control.extend('sap.ui.core.Icon', {
    metadata: {
        interfaces: ['sap.ui.core.IFormContent'],
        library: 'sap.ui.core',
        designtime: 'sap/ui/core/designtime/Icon.designtime',
        properties: {
            src: {
                type: 'sap.ui.core.URI',
                group: 'Data',
                defaultValue: null
            },
            size: {
                type: 'sap.ui.core.CSSSize',
                group: 'Dimension',
                defaultValue: null
            },
            color: {
                type: 'string',
                group: 'Appearance',
                defaultValue: null
            },
            hoverColor: {
                type: 'string',
                group: 'Appearance',
                defaultValue: null
            },
            activeColor: {
                type: 'string',
                group: 'Appearance',
                defaultValue: null
            },
            width: {
                type: 'sap.ui.core.CSSSize',
                group: 'Dimension',
                defaultValue: null
            },
            height: {
                type: 'sap.ui.core.CSSSize',
                group: 'Dimension',
                defaultValue: null
            },
            backgroundColor: {
                type: 'string',
                group: 'Appearance',
                defaultValue: null
            },
            hoverBackgroundColor: {
                type: 'string',
                group: 'Appearance',
                defaultValue: null
            },
            activeBackgroundColor: {
                type: 'string',
                group: 'Appearance',
                defaultValue: null
            },
            decorative: {
                type: 'boolean',
                group: 'Accessibility',
                defaultValue: true
            },
            useIconTooltip: {
                type: 'boolean',
                group: 'Accessibility',
                defaultValue: true
            },
            alt: {
                type: 'string',
                group: 'Accessibility',
                defaultValue: null
            },
            noTabStop: {
                type: 'boolean',
                group: 'Accessibility',
                defaultValue: false
            }
        },
        aggregations: {
            _invisibleText: {
                type: 'sap.ui.core.InvisibleText',
                multiple: false,
                visibility: 'hidden'
            }
        },
        associations: {
            ariaLabelledBy: {
                type: 'sap.ui.core.Control',
                multiple: true,
                singularName: 'ariaLabelledBy'
            }
        },
        events: { press: {} }
    }
});
Icon.prototype[Device.support.touch ? 'ontouchstart' : 'onmousedown'] = function (oEvent) {
    if (this.hasListeners('press')) {
        oEvent.setMarked();
    }
    var sActiveColor = this.getActiveColor(), sActiveBackgroundColor = this.getActiveBackgroundColor(), $Icon;
    if (sActiveColor || sActiveBackgroundColor) {
        if (!oEvent.targetTouches || oEvent.targetTouches && oEvent.targetTouches.length === 1) {
            $Icon = this.$();
            $Icon.addClass('sapUiIconActive');
            if (sActiveColor) {
                this._addColorClass(sActiveColor, 'color');
            }
            if (sActiveBackgroundColor) {
                this._addColorClass(sActiveBackgroundColor, 'background-color');
            }
        }
    }
};
Icon.prototype[Device.support.touch ? 'ontouchend' : 'onmouseup'] = function (oEvent) {
    if (!oEvent.targetTouches || oEvent.targetTouches && oEvent.targetTouches.length === 0) {
        this.$().removeClass('sapUiIconActive');
        this._restoreColors(Device.system.desktop ? 'hover' : undefined);
    }
};
Icon.prototype.onmouseover = function () {
    var sHoverColor = this.getHoverColor(), sHoverBackgroundColor = this.getHoverBackgroundColor();
    if (sHoverColor) {
        this._addColorClass(sHoverColor, 'color');
    }
    if (sHoverBackgroundColor) {
        this._addColorClass(sHoverBackgroundColor, 'background-color');
    }
};
Icon.prototype.onmouseout = function () {
    this._restoreColors();
};
Icon.prototype[Device.support.touch && !Device.system.desktop ? 'ontap' : 'onclick'] = function (oEvent) {
    if (this.hasListeners('press')) {
        oEvent.setMarked();
    }
    this.firePress({});
};
Icon.prototype.onkeydown = function (oEvent) {
    if (oEvent.which === KeyCodes.SPACE || oEvent.which === KeyCodes.ENTER) {
        oEvent.preventDefault();
        var $Icon = this.$(), sActiveColor = this.getActiveColor(), sActiveBackgroundColor = this.getActiveBackgroundColor();
        $Icon.addClass('sapUiIconActive');
        if (sActiveColor) {
            this._addColorClass(sActiveColor, 'color');
        }
        if (sActiveBackgroundColor) {
            this._addColorClass(sActiveBackgroundColor, 'background-color');
        }
    }
};
Icon.prototype.onkeyup = function (oEvent) {
    if (oEvent.which === KeyCodes.SPACE || oEvent.which === KeyCodes.ENTER) {
        this.$().removeClass('sapUiIconActive');
        this._restoreColors();
        this.firePress({});
    }
};
Icon.prototype._restoreColors = function (sMode) {
    var sColor, sBackgroundColor;
    if (sMode === 'hover') {
        sColor = this.getHoverColor();
        sBackgroundColor = this.getHoverBackgroundColor();
    }
    sColor = sColor || this.getColor();
    sBackgroundColor = sBackgroundColor || this.getBackgroundColor();
    this._addColorClass(sColor || '', 'color');
    this._addColorClass(sBackgroundColor || '', 'background-color');
};
Icon.prototype.setSrc = function (sSrc) {
    assert(sSrc == null || IconPool.isIconURI(sSrc), this + ': Property \'src\' (value: \'' + sSrc + '\') should be a valid Icon URI (sap-icon://...)');
    var vIconInfo = IconPool.getIconInfo(sSrc, undefined, 'mixed'), $Icon = this.$(), sIconLabel, sTooltip, bUseIconTooltip, aLabelledBy, oInvisibleText;
    this.setProperty('src', sSrc, !!vIconInfo);
    if (vIconInfo instanceof Promise) {
        vIconInfo.then(this.invalidate.bind(this));
    } else if (vIconInfo && $Icon.length) {
        $Icon.css('font-family', vIconInfo.fontFamily);
        $Icon.attr('data-sap-ui-icon-content', vIconInfo.content);
        $Icon.toggleClass('sapUiIconMirrorInRTL', !vIconInfo.suppressMirroring);
        sTooltip = this.getTooltip_AsString();
        aLabelledBy = this.getAriaLabelledBy();
        bUseIconTooltip = this.getUseIconTooltip();
        sIconLabel = this._getIconLabel(vIconInfo);
        if (sTooltip || bUseIconTooltip && vIconInfo.text) {
            $Icon.attr('title', sTooltip || vIconInfo.text);
        } else {
            $Icon.attr('title', null);
        }
        if (aLabelledBy.length === 0) {
            if (sIconLabel) {
                $Icon.attr('aria-label', sIconLabel);
            } else {
                $Icon.attr('aria-label', null);
            }
        } else {
            oInvisibleText = this.getAggregation('_invisibleText');
            if (oInvisibleText) {
                oInvisibleText.setText(sIconLabel);
            }
        }
    }
    return this;
};
Icon.prototype.setWidth = function (sWidth) {
    this.setProperty('width', sWidth, true);
    this.$().css('width', sWidth);
    return this;
};
Icon.prototype.setHeight = function (sHeight) {
    this.setProperty('height', sHeight, true);
    this.$().css({
        'height': sHeight,
        'line-height': sHeight
    });
    return this;
};
Icon.prototype.setSize = function (sSize) {
    this.setProperty('size', sSize, true);
    this.$().css('font-size', sSize);
    return this;
};
Icon.prototype.setColor = function (sColor) {
    if (isColorValid(sColor)) {
        this.setProperty('color', sColor, true);
        this._addColorClass(sColor, 'color');
    }
    return this;
};
Icon.prototype._addColorClass = function (sColor, sCSSPropName) {
    var $Icon = this.$(), that = this;
    var sCSSClassNamePrefix = '';
    if (sCSSPropName === 'color') {
        sCSSClassNamePrefix = 'sapUiIconColor';
    } else if (sCSSPropName === 'background-color') {
        sCSSClassNamePrefix = 'sapUiIconBGColor';
    } else {
        return;
    }
    jQuery.each(IconColor, function (sPropertyName, sPropertyValue) {
        that.removeStyleClass(sCSSClassNamePrefix + sPropertyValue);
    });
    if (sColor in IconColor) {
        $Icon.css(sCSSPropName, '');
        this.addStyleClass(sCSSClassNamePrefix + sColor);
    } else {
        $Icon.css(sCSSPropName, sColor);
    }
};
Icon.prototype.setActiveColor = function (sColor) {
    if (isColorValid(sColor)) {
        return this.setProperty('activeColor', sColor, true);
    }
    return this;
};
Icon.prototype.setHoverColor = function (sColor) {
    if (isColorValid(sColor)) {
        return this.setProperty('hoverColor', sColor, true);
    }
    return this;
};
Icon.prototype.setBackgroundColor = function (sColor) {
    if (isColorValid(sColor)) {
        this.setProperty('backgroundColor', sColor, true);
        this._addColorClass(sColor, 'background-color');
    }
    return this;
};
Icon.prototype.setActiveBackgroundColor = function (sColor) {
    if (isColorValid(sColor)) {
        return this.setProperty('activeBackgroundColor', sColor, true);
    }
    return this;
};
Icon.prototype.setHoverBackgroundColor = function (sColor) {
    if (isColorValid(sColor)) {
        return this.setProperty('hoverBackgroundColor', sColor, true);
    }
    return this;
};
Icon.prototype.attachPress = function () {
    var aMyArgs = Array.prototype.slice.apply(arguments);
    aMyArgs.unshift('press');
    Control.prototype.attachEvent.apply(this, aMyArgs);
    if (this.hasListeners('press')) {
        this.$().toggleClass('sapUiIconPointer', true).attr({
            role: 'button',
            tabindex: this.getNoTabStop() ? undefined : 0
        });
    }
    return this;
};
Icon.prototype.detachPress = function () {
    var aMyArgs = Array.prototype.slice.apply(arguments);
    aMyArgs.unshift('press');
    Control.prototype.detachEvent.apply(this, aMyArgs);
    if (!this.hasListeners('press')) {
        this.$().toggleClass('sapUiIconPointer', false).attr({ role: this.getDecorative() ? 'presentation' : 'img' }).removeAttr('tabindex');
    }
    return this;
};
Icon.prototype._getOutputTitle = function (oIconInfo) {
    var sTooltip = this.getTooltip_AsString(), bUseIconTooltip = this.getUseIconTooltip();
    if (sTooltip || bUseIconTooltip && oIconInfo && oIconInfo.text) {
        return sTooltip || oIconInfo.text;
    }
};
Icon.prototype._getIconLabel = function (oIconInfo) {
    var sAlt = this.getAlt(), sTooltip = this.getTooltip_AsString(), bUseIconTooltip = this.getUseIconTooltip(), sLabel = sAlt || sTooltip || bUseIconTooltip && oIconInfo && (oIconInfo.text || oIconInfo.name), sOutputTitle = this._getOutputTitle(oIconInfo);
    if (sLabel && sLabel !== sOutputTitle) {
        return sLabel;
    }
};
Icon.prototype._createInvisibleText = function (sText) {
    var oInvisibleText = this.getAggregation('_invisibleText');
    if (!oInvisibleText) {
        oInvisibleText = new InvisibleText(this.getId() + '-label', { text: sText });
        this.setAggregation('_invisibleText', oInvisibleText, true);
    } else {
        oInvisibleText.setProperty('text', sText, true);
    }
    return oInvisibleText;
};
Icon.prototype._getAccessibilityAttributes = function (oIconInfo) {
    var aLabelledBy = this.getAriaLabelledBy(), mAccAttributes = {}, sIconLabel = this._getIconLabel(oIconInfo), oInvisibleText;
    if (this.getDecorative()) {
        mAccAttributes.role = 'presentation';
        mAccAttributes.hidden = 'true';
    } else {
        if (this.hasListeners('press')) {
            mAccAttributes.role = 'button';
        } else {
            mAccAttributes.role = 'img';
        }
    }
    if (aLabelledBy.length > 0) {
        if (sIconLabel) {
            oInvisibleText = this._createInvisibleText(sIconLabel);
            aLabelledBy.push(oInvisibleText.getId());
        }
        mAccAttributes.labelledby = aLabelledBy.join(' ');
    } else if (sIconLabel) {
        mAccAttributes.label = sIconLabel;
    }
    return mAccAttributes;
};
Icon.prototype.getAccessibilityInfo = function () {
    if (this.getDecorative()) {
        return null;
    }
    var bHasPressListeners = this.hasListeners('press');
    var oIconInfo = IconPool.getIconInfo(this.getSrc(), undefined, 'sync');
    return {
        role: bHasPressListeners ? 'button' : 'img',
        type: sap.ui.getWCCore().getLibraryResourceBundle('sap.ui.core').getText(bHasPressListeners ? 'ACC_CTR_TYPE_BUTTON' : 'ACC_CTR_TYPE_IMAGE'),
        description: this.getAlt() || this.getTooltip_AsString() || (oIconInfo ? oIconInfo.text || oIconInfo.name : ''),
        focusable: bHasPressListeners
    };
};
export default Icon;