import Device from '../Device.js';
import Control from './Control.js';
import library from './library.js';
import ScrollBarRenderer from './ScrollBarRenderer.js';
import Interaction from '../performance/trace/Interaction.js';
import Log from '../../base/Log.js';
import containsOrEquals from '../dom/containsOrEquals.js';
import EventSimulation from '../events/jquery/EventSimulation.js';
import jQuery from '../thirdparty/jquery.js';
var ScrollBarAction = library.ScrollBarAction;
var ScrollBar = Control.extend('sap.ui.core.ScrollBar', {
    metadata: {
        library: 'sap.ui.core',
        properties: {
            vertical: {
                type: 'boolean',
                group: 'Behavior',
                defaultValue: true
            },
            scrollPosition: {
                type: 'int',
                group: 'Behavior',
                defaultValue: null
            },
            size: {
                type: 'sap.ui.core.CSSSize',
                group: 'Dimension',
                defaultValue: null
            },
            contentSize: {
                type: 'sap.ui.core.CSSSize',
                group: 'Dimension',
                defaultValue: null
            },
            steps: {
                type: 'int',
                group: 'Dimension',
                defaultValue: null
            }
        },
        events: {
            scroll: {
                parameters: {
                    action: { type: 'sap.ui.core.ScrollBarAction' },
                    forward: { type: 'boolean' },
                    newScrollPos: { type: 'int' },
                    oldScrollPos: { type: 'int' }
                }
            }
        }
    }
});
ScrollBar.prototype.init = function () {
    this._$ScrollDomRef = null;
    this._iOldScrollPos = 0;
    this._iOldStep = 0;
    this._bScrollPosIsChecked = false;
    this._bRTL = sap.ui.getWCCore().getConfiguration().getRTL();
    this._bSuppressScroll = false;
    this._iMaxContentDivSize = 1000000;
    if (EventSimulation.touchEventMode === 'ON') {
        sap.ui.requireSync('sap/ui/thirdparty/zyngascroll');
        this._iLastTouchScrollerPosition = null;
        this._iTouchStepTreshold = 24;
        this._bSkipTouchHandling = false;
        this._oTouchScroller = new window.Scroller(jQuery.proxy(this._handleTouchScroll, this), { bouncing: false });
    }
};
ScrollBar.prototype.onBeforeRendering = function () {
    this.$('sb').unbind('scroll', this.onscroll);
};
ScrollBar.prototype.onAfterRendering = function () {
    this._iSteps = this.getSteps();
    var sContentSize = this.getContentSize();
    this._bStepMode = !sContentSize;
    var iScrollBarSize = this.getSize();
    if (iScrollBarSize.endsWith('px')) {
        iScrollBarSize = iScrollBarSize.substr(0, iScrollBarSize.length - 2);
    } else {
        iScrollBarSize = this.getVertical() ? this.$().height() : this.$().width();
    }
    var stepSize = null;
    var $ffsize = this.$('ffsize');
    if (Device.browser.firefox) {
        stepSize = $ffsize.outerHeight();
        if (stepSize === 0) {
            stepSize = window.getComputedStyle(jQuery('body').get(0))['font-size'];
            if (stepSize.endsWith('px')) {
                stepSize = stepSize.substr(0, stepSize.length - 2);
            }
            stepSize = parseInt(stepSize);
        }
    }
    $ffsize.remove();
    if (Device.browser.webkit) {
        if (!document.width) {
            stepSize = Math.round(40 / (window.outerWidth / jQuery(document).width()));
        } else {
            stepSize = Math.round(40 / (document.width / jQuery(document).width()));
        }
    }
    if (this.getVertical()) {
        if (Device.browser.firefox) {
            this._iFactor = stepSize;
        } else if (Device.browser.webkit) {
            this._iFactor = stepSize;
        } else {
            this._iFactor = Math.floor(iScrollBarSize * 0.125);
        }
        this._iFactorPage = Device.browser.firefox ? iScrollBarSize - stepSize : Math.floor(iScrollBarSize * 0.875);
    } else {
        if (Device.browser.firefox) {
            this._iFactor = 10;
            this._iFactorPage = Math.floor(iScrollBarSize * 0.8);
        } else if (Device.browser.webkit) {
            this._iFactor = stepSize;
            this._iFactorPage = Math.floor(iScrollBarSize * 0.875);
        } else {
            this._iFactor = 7;
            this._iFactorPage = iScrollBarSize - 14;
        }
    }
    this._$ScrollDomRef = this.$('sb');
    if (this._bStepMode) {
        if (this.getVertical()) {
            var iSize = this._iSteps * this._iFactor;
            if (iSize > this._iMaxContentDivSize) {
                this._iFactor = this._iFactor / (iSize / this._iMaxContentDivSize);
            }
            var iContentSize = this._$ScrollDomRef.height() + Math.ceil(this._iSteps * this._iFactor);
            this._$ScrollDomRef.find('div').height(iContentSize);
        } else {
            var iContentSize = this._$ScrollDomRef.width() + this._iSteps * this._iFactor;
            this._$ScrollDomRef.find('div').width(iContentSize);
        }
    }
    this.setCheckedScrollPosition(this.getScrollPosition() ? this.getScrollPosition() : 0, true);
    this._$ScrollDomRef.bind('scroll', jQuery.proxy(this.onscroll, this));
    if (EventSimulation.touchEventMode === 'ON') {
        this._bSkipTouchHandling = true;
        var oContent = {
            width: 0,
            height: 0
        };
        oContent[this.getVertical() ? 'height' : 'width'] = this._bStepMode ? this.getSteps() * this._iTouchStepTreshold : parseInt(this.getContentSize());
        this._oTouchScroller.setDimensions(0, 0, oContent.width, oContent.height);
        var oElement = this._$ScrollDomRef.get(0);
        if (oElement) {
            var oRect = oElement.getBoundingClientRect();
            this._oTouchScroller.setPosition(oRect.left + oElement.clientLeft, oRect.top + oElement.clientTop);
            this._bSkipTouchHandling = false;
        }
    }
};
ScrollBar.prototype.onmousewheel = function (oEvent) {
    if (this.$().is(':visible')) {
        var oOriginalEvent = oEvent.originalEvent;
        var wheelData = oOriginalEvent.detail ? oOriginalEvent.detail : oOriginalEvent.wheelDelta * -1 / 40;
        var bForward = wheelData > 0 ? true : false;
        if (containsOrEquals(this._$ScrollDomRef[0], oEvent.target)) {
            this._doScroll(ScrollBarAction.MouseWheel, bForward);
        } else {
            this._bMouseWheel = true;
            var pos = null;
            if (this._bStepMode) {
                pos = wheelData + this._iOldStep;
            } else {
                pos = wheelData * this._iFactor + this._iOldScrollPos;
            }
            this.setCheckedScrollPosition(pos, true);
        }
        oEvent.preventDefault();
        oEvent.stopPropagation();
        return false;
    }
};
ScrollBar.prototype.ontouchstart = function (oEvent) {
    var aTouches = oEvent.touches;
    var oFirstTouch = aTouches[0];
    if (oFirstTouch && oFirstTouch.target && oFirstTouch.target.tagName.match(/input|textarea|select/i)) {
        return;
    }
    if (this._oTouchScroller) {
        this._oTouchScroller.doTouchStart(aTouches, oEvent.timeStamp);
    }
    if (aTouches.length == 1) {
        oEvent.preventDefault();
    }
};
ScrollBar.prototype.ontouchmove = function (oEvent) {
    if (this._oTouchScroller) {
        this._oTouchScroller.doTouchMove(oEvent.touches, oEvent.timeStamp, oEvent.scale);
    }
};
ScrollBar.prototype.ontouchend = function (oEvent) {
    if (this._oTouchScroller) {
        this._oTouchScroller.doTouchEnd(oEvent.timeStamp);
    }
};
ScrollBar.prototype.ontouchcancel = function (oEvent) {
    if (this._oTouchScroller) {
        this._oTouchScroller.doTouchEnd(oEvent.timeStamp);
    }
};
ScrollBar.prototype.onscroll = function (oEvent) {
    if (this._bSuppressScroll) {
        this._bSuppressScroll = false;
        oEvent.preventDefault();
        oEvent.stopPropagation();
        return false;
    }
    var iScrollPos = null;
    if (this._$ScrollDomRef) {
        if (this.getVertical()) {
            iScrollPos = Math.round(this._$ScrollDomRef.scrollTop());
        } else {
            iScrollPos = Math.round(this._$ScrollDomRef.scrollLeft());
            if (Device.browser.firefox && this._bRTL) {
                iScrollPos = Math.abs(iScrollPos);
            } else if (Device.browser.webkit && this._bRTL) {
                var oScrollDomRef = this._$ScrollDomRef.get(0);
                iScrollPos = oScrollDomRef.scrollWidth - oScrollDomRef.clientWidth - oScrollDomRef.scrollLeft;
            }
        }
    }
    var iDelta = iScrollPos - this._iOldScrollPos;
    var bForward = iDelta > 0 ? true : false;
    if (iDelta < 0) {
        iDelta = iDelta * -1;
    }
    var eAction = ScrollBarAction.Drag;
    if (iDelta == this._iFactor) {
        eAction = ScrollBarAction.Step;
    } else if (iDelta == this._iFactorPage) {
        eAction = ScrollBarAction.Page;
    } else if (this._bMouseWheel) {
        eAction = ScrollBarAction.MouseWheel;
    }
    if (this._bLargeDataScrolling && eAction === ScrollBarAction.Drag) {
        this._eAction = eAction;
        this._bForward = bForward;
        if (Device.browser.msie) {
            if (this._scrollTimeout) {
                window.clearTimeout(this._scrollTimeout);
            }
            this._scrollTimeout = window.setTimeout(this._onScrollTimeout.bind(this), 300);
        }
    } else {
        this._doScroll(eAction, bForward);
    }
    oEvent.preventDefault();
    oEvent.stopPropagation();
    return false;
};
ScrollBar.prototype._onScrollTimeout = function () {
    this._scrollTimeout = undefined;
    this._doScroll(this._eAction, this._bForward);
    this._eAction = undefined;
    this._bForward = undefined;
    this._bTouchScroll = undefined;
};
ScrollBar.prototype.onmouseup = function () {
    if (this._bLargeDataScrolling && (this._eAction || this._bForward || this._bTouchScroll) && !Device.browser.msie) {
        this._doScroll(this._eAction, this._bForward);
        this._eAction = undefined;
        this._bForward = undefined;
        this._bTouchScroll = undefined;
    }
};
ScrollBar.prototype.ontouchend = ScrollBar.prototype.onmouseup;
ScrollBar.prototype._handleTouchScroll = function (iLeft, iTop, iZoom) {
    if (this._bSkipTouchHandling) {
        return;
    }
    var iValue = this.getVertical() ? iTop : iLeft;
    var iPos;
    if (this._bStepMode) {
        iPos = Math.max(Math.round(iValue / this._iTouchStepTreshold), 0);
    } else {
        iPos = Math.round(iValue);
    }
    if (this._iLastTouchScrollerPosition !== iPos) {
        this._iLastTouchScrollerPosition = iPos;
        this.setCheckedScrollPosition(iPos, true);
        if (this._bLargeDataScrolling) {
            this._bTouchScroll = true;
        } else {
            this.fireScroll();
        }
    }
};
ScrollBar.prototype.unbind = function (oOwnerDomRef) {
    if (oOwnerDomRef) {
        this._$OwnerDomRef = jQuery(oOwnerDomRef);
        if (this.getVertical()) {
            this._$OwnerDomRef.unbind(Device.browser.firefox ? 'DOMMouseScroll' : 'mousewheel', this.onmousewheel);
        }
        if (EventSimulation.touchEventMode === 'ON') {
            this._$OwnerDomRef.unbind(this._getTouchEventType('touchstart'), jQuery.proxy(this.ontouchstart, this));
            this._$OwnerDomRef.unbind(this._getTouchEventType('touchmove'), jQuery.proxy(this.ontouchmove, this));
            this._$OwnerDomRef.unbind(this._getTouchEventType('touchend'), jQuery.proxy(this.ontouchend, this));
            this._$OwnerDomRef.unbind(this._getTouchEventType('touchcancel'), jQuery.proxy(this.ontouchcancel, this));
        }
    }
};
ScrollBar.prototype.bind = function (oOwnerDomRef) {
    if (oOwnerDomRef) {
        this._$OwnerDomRef = jQuery(oOwnerDomRef);
        if (this.getVertical()) {
            this._$OwnerDomRef.bind(Device.browser.firefox ? 'DOMMouseScroll' : 'mousewheel', jQuery.proxy(this.onmousewheel, this));
        }
        if (EventSimulation.touchEventMode === 'ON') {
            this._$OwnerDomRef.bind(this._getTouchEventType('touchstart'), jQuery.proxy(this.ontouchstart, this));
            this._$OwnerDomRef.bind(this._getTouchEventType('touchmove'), jQuery.proxy(this.ontouchmove, this));
            this._$OwnerDomRef.bind(this._getTouchEventType('touchend'), jQuery.proxy(this.ontouchend, this));
            this._$OwnerDomRef.bind(this._getTouchEventType('touchcancel'), jQuery.proxy(this.ontouchcancel, this));
        }
    }
};
ScrollBar.prototype._getTouchEventType = function (sType) {
    return EventSimulation.touchEventMode === 'SIM' ? 'sap' + sType : sType;
};
ScrollBar.prototype.pageUp = function () {
    this._doScroll(ScrollBarAction.Page, false);
};
ScrollBar.prototype.pageDown = function () {
    this._doScroll(ScrollBarAction.Page, true);
};
ScrollBar.prototype.setScrollPosition = function (scrollPosition) {
    if (this._$ScrollDomRef) {
        this.setCheckedScrollPosition(scrollPosition, true);
    } else {
        this.setProperty('scrollPosition', scrollPosition);
    }
    return this;
};
ScrollBar.prototype.setCheckedScrollPosition = function (scrollPosition, callScrollEvent) {
    var iCheckedSP = Math.max(scrollPosition, 0);
    if (this._bStepMode === undefined) {
        this._bStepMode = !this.getContentSize();
    }
    var iScrollPos = iCheckedSP;
    if (this._bStepMode) {
        iCheckedSP = Math.min(iCheckedSP, this.getSteps());
        iScrollPos = iCheckedSP * this._iFactor;
    }
    iCheckedSP = Math.round(iCheckedSP);
    this._bSuppressScroll = !callScrollEvent;
    this.setProperty('scrollPosition', iCheckedSP, true);
    if (this.getVertical()) {
        this._$ScrollDomRef.scrollTop(iScrollPos);
    } else {
        if (Device.browser.firefox && this._bRTL) {
            this._$ScrollDomRef.scrollLeft(-iScrollPos);
        } else if (Device.browser.webkit && this._bRTL) {
            var oScrollDomRef = this._$ScrollDomRef.get(0);
            this._$ScrollDomRef.scrollLeft(oScrollDomRef.scrollWidth - oScrollDomRef.clientWidth - iScrollPos);
        } else {
            this._$ScrollDomRef.scrollLeft(iScrollPos);
        }
    }
    if (EventSimulation.touchEventMode === 'ON') {
        var value = iCheckedSP;
        if (this._bStepMode) {
            value = Math.round(iCheckedSP * this._iTouchStepTreshold);
        }
        this._oTouchScroller.__scrollTop = this.getVertical() ? value : 0;
        this._oTouchScroller.__scrollLeft = this.getVertical() ? 0 : value;
    }
};
ScrollBar.prototype.setContentSize = function (sContentSize) {
    this.setProperty('contentSize', sContentSize, true);
    this._bStepMode = false;
    var $SbCnt = this.$('sbcnt');
    if ($SbCnt) {
        if (this.getVertical()) {
            $SbCnt.height(sContentSize);
        } else {
            $SbCnt.width(sContentSize);
        }
    }
    return this;
};
ScrollBar.prototype._doScroll = function (sAction, bForward) {
    var iScrollPos = null;
    if (this._$ScrollDomRef) {
        if (this.getVertical()) {
            iScrollPos = Math.round(this._$ScrollDomRef.scrollTop());
        } else {
            iScrollPos = Math.round(this._$ScrollDomRef.scrollLeft());
            if (Device.browser.firefox && this._bRTL) {
                iScrollPos = Math.abs(iScrollPos);
            } else if (Device.browser.webkit && this._bRTL) {
                var oScrollDomRef = this._$ScrollDomRef.get(0);
                iScrollPos = oScrollDomRef.scrollWidth - oScrollDomRef.clientWidth - oScrollDomRef.scrollLeft;
            }
        }
    }
    if (this._bStepMode) {
        var iStep = Math.round(iScrollPos / this._iFactor);
        var iOldStep = this._iOldStep;
        if (iOldStep !== iStep) {
            this.setCheckedScrollPosition(iStep, false);
            Log.debug('-----STEPMODE-----: New Step: ' + iStep + ' --- Old Step: ' + iOldStep + ' --- Scroll Pos in px: ' + iScrollPos + ' --- Action: ' + sAction + ' --- Direction is forward: ' + bForward);
            this.fireScroll({
                action: sAction,
                forward: bForward,
                newScrollPos: iStep,
                oldScrollPos: iOldStep
            });
            this._iOldStep = iStep;
        }
    } else {
        iScrollPos = Math.round(iScrollPos);
        this.setProperty('scrollPosition', iScrollPos, true);
        Log.debug('-----PIXELMODE-----: New ScrollPos: ' + iScrollPos + ' --- Old ScrollPos: ' + this._iOldScrollPos + ' --- Action: ' + sAction + ' --- Direction is forward: ' + bForward);
        this.fireScroll({
            action: sAction,
            forward: bForward,
            newScrollPos: iScrollPos,
            oldScrollPos: this._iOldScrollPos
        });
    }
    if (Math.round(this._iFactor) == this._iFactor || !Device.browser.msie) {
        this._bSuppressScroll = false;
    }
    this._iOldScrollPos = iScrollPos;
    this._bMouseWheel = false;
    Interaction.notifyScrollEvent({ type: sAction });
};
ScrollBar.prototype.onThemeChanged = function () {
    this.rerender();
};
ScrollBar.prototype.getNativeScrollPosition = function () {
    if (this._$ScrollDomRef) {
        if (this.getVertical()) {
            return Math.round(this._$ScrollDomRef.scrollTop());
        } else {
            return Math.round(this._$ScrollDomRef.scrollLeft());
        }
    }
    return 0;
};
ScrollBar.prototype.setNativeScrollPosition = function (iNativeScrollPos) {
    var iScrollPos = Math.round(iNativeScrollPos);
    if (this._$ScrollDomRef) {
        if (this.getVertical()) {
            this._$ScrollDomRef.scrollTop(iScrollPos);
        } else {
            this._$ScrollDomRef.scrollLeft(iScrollPos);
        }
    }
};
export default ScrollBar;