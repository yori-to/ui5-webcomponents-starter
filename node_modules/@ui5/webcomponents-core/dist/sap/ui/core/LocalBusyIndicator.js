import Control from './Control.js';
import library from './library.js';
import Parameters from './theming/Parameters.js';
import LocalBusyIndicatorRenderer from './LocalBusyIndicatorRenderer.js';
import jQuery from '../thirdparty/jquery.js';
var LocalBusyIndicator = Control.extend('sap.ui.core.LocalBusyIndicator', {
    metadata: {
        deprecated: true,
        library: 'sap.ui.core',
        properties: {
            width: {
                type: 'sap.ui.core.CSSSize',
                group: 'Misc',
                defaultValue: '100px'
            },
            height: {
                type: 'sap.ui.core.CSSSize',
                group: 'Misc',
                defaultValue: '100px'
            }
        }
    }
});
(function () {
    LocalBusyIndicator.prototype.init = function () {
        var sRoot = 'sap.ui.core.LocalBusyIndicator:';
        var sParam = 'sapUiLocalBusyIndicatorBoxSize';
        sParam = Parameters.get(sRoot + sParam);
        this._iBoxSize = 8;
        sParam = 'sapUiLocalBusyIndicatorBoxColor';
        this._sBoxColor = Parameters.get(sRoot + sParam);
        sParam = 'sapUiLocalBusyIndicatorBoxColorActive';
        this._sBoxColorActive = Parameters.get(sRoot + sParam);
        this._animateProxy = jQuery.proxy(fnAnimate, this);
    };
    LocalBusyIndicator.prototype.exit = function () {
        clearTimeout(this._delayedCallId);
        delete this._delayedCallId;
    };
    LocalBusyIndicator.prototype.onThemeChanged = function (oEvent) {
        if (this.getDomRef()) {
            this.invalidate();
        }
    };
    LocalBusyIndicator.prototype.onAfterRendering = function () {
        var w = parseInt(this.getWidth());
        var h = parseInt(this.getHeight());
        var $this = this.$();
        $this.css('width', w + 'px');
        $this.css('height', h + 'px');
        var $animation = this.$('animation');
        var left = Math.floor(w / 2);
        left -= Math.floor(5 * this._iBoxSize / 2);
        var top = Math.floor(h / 2) - Math.floor(this._iBoxSize / 2);
        $animation.css('left', left + 'px');
        $animation.css('top', top + 'px');
        if (!this._$left) {
            this._$left = this.$('leftBox');
        }
        if (!this._$middle) {
            this._$middle = this.$('middleBox');
        }
        if (!this._$right) {
            this._$right = this.$('rightBox');
        }
        this._delayedCallId = setTimeout(this._animateProxy.bind(this), 0);
    };
    var fnAnimate = function () {
        if (this.getDomRef()) {
            var that = this;
            var $left, $middle, $right;
            var color = '', colorActive = '';
            if (that._$left) {
                $left = that._$left;
            } else {
                return;
            }
            if (that._$middle) {
                $middle = that._$middle;
            } else {
                return;
            }
            if (that._$right) {
                $right = that._$right;
            } else {
                return;
            }
            if (that._sBoxColor) {
                color = that._sBoxColor;
            } else {
                return;
            }
            if (that._sBoxColorActive) {
                colorActive = that._sBoxColorActive;
            } else {
                return;
            }
            $left.css('background-color', colorActive);
            setTimeout(function () {
                $left.css('background-color', color);
                $middle.css('background-color', colorActive);
                setTimeout(function () {
                    $middle.css('background-color', color);
                    $right.css('background-color', colorActive);
                    setTimeout(function () {
                        $right.css('background-color', color);
                    }, 150);
                }, 150);
            }, 150);
            this._delayedCallId = setTimeout(this._animateProxy.bind(this), 1200);
        }
    };
}());
export default LocalBusyIndicator;