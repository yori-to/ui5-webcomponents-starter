import ManagedObject from '../base/ManagedObject.js';
import Element from './Element.js';
import RenderManager from './RenderManager.js';
import Interaction from '../performance/trace/Interaction.js';
import containsOrEquals from '../dom/containsOrEquals.js';
import ActivityDetection from '../util/ActivityDetection.js';
import KeyCodes from '../events/KeyCodes.js';
import Log from '../../base/Log.js';
import assert from '../../base/assert.js';
import Measurement from '../performance/Measurement.js';
import EventExtension from '../events/jquery/EventExtension.js';
import ControlEvents from '../events/ControlEvents.js';
import F6Navigation from '../events/F6Navigation.js';
import jQuery from '../thirdparty/jquery.js';
import '../dom/jquery/control.js';
EventExtension.apply();
jQuery(document).on('keydown', function (oEvent) {
    F6Navigation.handleF6GroupNavigation(oEvent, null);
});
var oRenderLog = Log.getLogger('sap.ui.Rendering', window['sap-ui-config'] && (window['sap-ui-config']['xx-debugRendering'] || window['sap-ui-config']['xx-debugrendering']) || /sap-ui-xx-debug(R|-r)endering=(true|x|X)/.test(document.location.search) ? Log.Level.DEBUG : Math.min(Log.Level.INFO, Log.getLevel())), fnDbgWrap = function (oControl) {
        return oControl;
    }, fnDbgReport = function () {
    }, fnDbgAnalyzeDelta = function () {
    };
if (oRenderLog.isLoggable()) {
    fnDbgWrap = function (oControl) {
        var location;
        try {
            throw new Error();
        } catch (e) {
            location = e.stack || e.stacktrace || (e.sourceURL ? e.sourceURL + ':' + e.line : null);
            location = location ? location.split(/\n\s*/g).slice(2) : undefined;
        }
        return {
            obj: oControl,
            location: location
        };
    };
    fnDbgReport = function (that, mControls) {
        var oCore = sap.ui.getWCCore(), mReport = {}, n, oControl;
        for (n in mControls) {
            oControl = oCore.byId(n);
            mReport[n] = {
                type: oControl ? oControl.getMetadata().getName() : mControls[n].obj === that ? 'UIArea' : '(no such control)',
                location: mControls[n].location,
                reason: mControls[n].reason
            };
        }
        oRenderLog.debug('  UIArea \'' + that.getId() + '\', pending updates: ' + JSON.stringify(mReport, null, '\t'));
    };
    fnDbgAnalyzeDelta = function (mBefore, mAfter) {
        var n;
        for (n in mAfter) {
            if (mBefore[n] != null) {
                if (mBefore[n].obj !== mAfter[n].obj) {
                    mAfter[n].reason = 'replaced during rendering';
                } else {
                    mAfter[n].reason = 'invalidated again during rendering';
                }
            } else {
                mAfter[n].reason = 'invalidated during rendering';
            }
        }
    };
}
var UIArea = ManagedObject.extend('sap.ui.core.UIArea', {
    constructor: function (oCore, oRootNode) {
        if (arguments.length === 0) {
            return;
        }
        ManagedObject.apply(this);
        this.oCore = oCore;
        this.bLocked = false;
        this.bInitial = true;
        this.aContentToRemove = [];
        this.bNeedsRerendering = false;
        if (oRootNode != null) {
            this.setRootNode(oRootNode);
            this.bNeedsRerendering = this.bNeedsRerendering && !(oRootNode.id + '-Init' ? window.document.getElementById(oRootNode.id + '-Init') : null);
        }
        this.mInvalidatedControls = {};
        if (!this.bNeedsRerendering) {
            this.bRenderSelf = false;
        } else {
            this.oCore.addInvalidatedUIArea(this);
        }
    },
    metadata: {
        publicMethods: [
            'setRootNode',
            'getRootNode',
            'setRootControl',
            'getRootControl',
            'lock',
            'unlock',
            'isLocked'
        ],
        aggregations: {
            content: {
                name: 'content',
                type: 'sap.ui.core.Control',
                multiple: true,
                singularName: 'content'
            },
            dependents: {
                name: 'dependents',
                type: 'sap.ui.core.Control',
                multiple: true
            }
        }
    }
});
UIArea.prototype.isInvalidateSuppressed = function () {
    return this.iSuppressInvalidate > 0;
};
UIArea.prototype.getId = function () {
    return this.oRootNode ? this.oRootNode.id : null;
};
UIArea.prototype.getUIArea = function () {
    return this;
};
UIArea.prototype.setRootNode = function (oRootNode) {
    if (this.oRootNode === oRootNode) {
        return;
    }
    assert(!oRootNode || oRootNode.nodeType === 1 && !jQuery(oRootNode).attr('data-sap-ui-area'), 'UIArea root node must be a DOMElement');
    if (this.oRootNode) {
        this._ondetach();
    }
    this.oRootNode = oRootNode;
    if (this.getContent().length > 0) {
        this.invalidate();
    }
    if (this.oRootNode) {
        this._onattach();
    }
};
UIArea.prototype.getRootNode = function () {
    return this.oRootNode;
};
UIArea.prototype.setRootControl = function (oRootControl) {
    this.removeAllContent();
    this.addContent(oRootControl);
};
UIArea.prototype.getRootControl = function (idx) {
    var aContent = this.getContent();
    if (aContent.length > 0) {
        if (idx >= 0 && idx < aContent.length) {
            return aContent[idx];
        }
        return aContent[0];
    }
    return null;
};
UIArea.prototype._addRemovedContent = function (oDomRef) {
    if (this.oRootNode && oDomRef) {
        this.aContentToRemove.push(oDomRef);
    }
};
UIArea.prototype.addContent = function (oContent, _bSuppressInvalidate) {
    this.addAggregation('content', oContent, _bSuppressInvalidate);
    if (_bSuppressInvalidate !== true) {
        this.invalidate();
    }
    return this;
};
UIArea.prototype.removeContent = function (vContent, _bSuppressInvalidate) {
    var oContent = this.removeAggregation('content', vContent, _bSuppressInvalidate);
    if (!_bSuppressInvalidate) {
        var oDomRef;
        if (oContent && oContent.getDomRef) {
            oDomRef = oContent.getDomRef();
        }
        this._addRemovedContent(oDomRef);
    }
    return oContent;
};
UIArea.prototype.removeAllContent = function () {
    var aContent = this.removeAllAggregation('content');
    for (var idx = 0; idx < aContent.length; idx++) {
        var oDomRef;
        var oContent = aContent[idx];
        if (oContent && oContent.getDomRef) {
            oDomRef = oContent.getDomRef();
        }
        this._addRemovedContent(oDomRef);
    }
    return aContent;
};
UIArea.prototype.destroyContent = function () {
    var aContent = this.getContent();
    for (var idx = 0; idx < aContent.length; idx++) {
        var oDomRef;
        var oContent = aContent[idx];
        if (oContent && oContent.getDomRef) {
            oDomRef = oContent.getDomRef();
        }
        this._addRemovedContent(oDomRef);
    }
    this.destroyAggregation('content');
    return this;
};
UIArea.prototype.lock = function () {
    this.bLocked = true;
};
UIArea.prototype.unlock = function () {
    if (this.bLocked && this.bNeedsRerendering) {
        this.oCore.addInvalidatedUIArea(this);
    }
    this.bLocked = false;
};
UIArea.prototype.isLocked = function () {
    return this.bLocked;
};
UIArea.prototype.getBindingContext = function () {
    return null;
};
UIArea.prototype.getEventingParent = function () {
    return this.oCore._getEventProvider();
};
UIArea.prototype.isActive = function () {
    return (this.getId() ? window.document.getElementById(this.getId()) : null) != null;
};
UIArea.prototype.invalidate = function () {
    this.addInvalidatedControl(this);
};
UIArea.prototype.addInvalidatedControl = function (oControl) {
    if (this.bRenderSelf) {
        return;
    }
    if (!this.bNeedsRerendering) {
        this.oCore.addInvalidatedUIArea(this);
    }
    var sId = oControl.getId();
    if (oControl === this) {
        this.bRenderSelf = true;
        this.bNeedsRerendering = true;
        this.mInvalidatedControls = {};
        this.mInvalidatedControls[sId] = fnDbgWrap(this);
        return;
    }
    if (this.mInvalidatedControls[sId]) {
        return;
    }
    if (!this.bRenderSelf) {
        this.mInvalidatedControls[sId] = fnDbgWrap(oControl);
        this.bNeedsRerendering = true;
    }
};
UIArea.prototype.rerender = function (force) {
    var that = this;
    function clearRenderingInfo() {
        that.bRenderSelf = false;
        that.aContentToRemove = [];
        that.mInvalidatedControls = {};
        that.bNeedsRerendering = false;
    }
    function activeElement() {
        try {
            return document.activeElement;
        } catch (err) {
        }
    }
    if (force) {
        this.bNeedsRerendering = true;
    }
    if (this.bLocked || !this.bNeedsRerendering) {
        return false;
    }
    var bRenderSelf = this.bRenderSelf, aContentToRemove = this.aContentToRemove, mInvalidatedControls = this.mInvalidatedControls, bUpdated = false;
    clearRenderingInfo();
    Measurement.pause('renderPendingUIUpdates');
    Measurement.start(this.getId() + '---rerender', 'Rerendering of ' + this.getMetadata().getName());
    fnDbgReport(this, mInvalidatedControls);
    if (bRenderSelf) {
        if (this.oRootNode) {
            oRenderLog.debug('Full Rendering of UIArea \'' + this.getId() + '\'');
            RenderManager.preserveContent(this.oRootNode, false, this.bInitial);
            this.bInitial = false;
            var cleanUpDom = function (aCtnt, bCtrls) {
                var len = aCtnt.length;
                var oDomRef;
                for (var i = 0; i < len; i++) {
                    oDomRef = bCtrls ? aCtnt[i].getDomRef() : aCtnt[i];
                    if (oDomRef && !RenderManager.isPreservedContent(oDomRef) && that.oRootNode === oDomRef.parentNode) {
                        jQuery(oDomRef).remove();
                    }
                }
                return len;
            };
            var oFocusRef_Initial = activeElement();
            var oStoredFocusInfo = this.oCore.oFocusHandler.getControlFocusInfo();
            cleanUpDom(aContentToRemove);
            var aContent = this.getContent();
            var len = cleanUpDom(aContent, true);
            var oFocusRef_AfterCleanup = activeElement();
            for (var i = 0; i < len; i++) {
                if (aContent[i] && aContent[i].getParent() === this) {
                    this.oCore.oRenderManager.render(aContent[i], this.oRootNode, true);
                }
            }
            bUpdated = true;
            if (oFocusRef_Initial && oFocusRef_Initial != oFocusRef_AfterCleanup && oFocusRef_AfterCleanup === activeElement()) {
                try {
                    this.oCore.oFocusHandler.restoreFocus(oStoredFocusInfo);
                } catch (e) {
                    Log.warning('Problems while restoring the focus after full UIArea rendering: ' + e, null, this);
                }
            }
        } else {
            oRenderLog.debug('Full Rendering of UIArea \'' + this.getId() + '\' postponed, no root node');
        }
    } else {
        var isRenderedTogetherWithAncestor = function (oCandidate) {
            for (;;) {
                if (oCandidate.getMetadata && oCandidate.getMetadata().isInstanceOf('sap.ui.core.PopupInterface')) {
                    break;
                }
                oCandidate = oCandidate.getParent();
                if (!oCandidate || oCandidate === that) {
                    return false;
                }
                if (mInvalidatedControls.hasOwnProperty(oCandidate.getId())) {
                    return true;
                }
            }
        };
        for (var n in mInvalidatedControls) {
            var oControl = this.oCore.byId(n);
            if (oControl && !isRenderedTogetherWithAncestor(oControl)) {
                oControl.rerender();
                bUpdated = true;
            }
        }
    }
    fnDbgAnalyzeDelta(mInvalidatedControls, this.mInvalidatedControls);
    Measurement.end(this.getId() + '---rerender');
    Measurement.resume('renderPendingUIUpdates');
    return bUpdated;
};
UIArea.prototype._onControlRendered = function (oControl) {
    var sId = oControl.getId();
    if (this.mInvalidatedControls[sId]) {
        delete this.mInvalidatedControls[sId];
    }
};
UIArea.rerenderControl = function (oControl) {
    var oDomRef = null;
    if (oControl) {
        oDomRef = oControl.getDomRef();
        if (!oDomRef || RenderManager.isPreservedContent(oDomRef)) {
            oDomRef = RenderManager.RenderPrefixes.Invisible + oControl.getId() ? window.document.getElementById(RenderManager.RenderPrefixes.Invisible + oControl.getId()) : null;
        }
    }
    var oParentDomRef = oDomRef && oDomRef.parentNode;
    if (oParentDomRef) {
        var uiArea = oControl.getUIArea();
        var rm = uiArea ? uiArea.oCore.oRenderManager : sap.ui.getWCCore().createRenderManager();
        oRenderLog.debug('Rerender Control \'' + oControl.getId() + '\'' + (uiArea ? '' : ' (using a temp. RenderManager)'));
        RenderManager.preserveContent(oDomRef, true, false);
        rm.render(oControl, oParentDomRef);
    } else {
        var uiArea = oControl.getUIArea();
        uiArea && uiArea._onControlRendered(oControl);
        oRenderLog.warning('Couldn\'t rerender \'' + oControl.getId() + '\', as its DOM location couldn\'t be determined');
    }
};
var rEvents = /^(mousedown|mouseup|click|keydown|keyup|keypress|touchstart|touchend|tap)$/;
var aPreprocessors = [], aPostprocessors = [];
var mVerboseEvents = {
    mousemove: 1,
    mouseover: 1,
    mouseout: 1,
    scroll: 1,
    dragover: 1,
    dragenter: 1,
    dragleave: 1
};
UIArea.addEventPreprocessor = function (fnPreprocessor) {
    aPreprocessors.push(fnPreprocessor);
};
UIArea.getEventPreprocessors = function () {
    return aPreprocessors;
};
UIArea.addEventPostprocessor = function (fnPostprocessor) {
    aPostprocessors.push(fnPostprocessor);
};
UIArea.getEventPostprocessors = function () {
    return aPostprocessors;
};
UIArea.configureEventLogging = function (mEventTypes) {
    Object.assign(mVerboseEvents, mEventTypes);
    return Object.assign({}, mVerboseEvents);
};
UIArea.prototype._handleEvent = function (oEvent) {
    var oTargetElement, oElement, bInteractionRelevant;
    oTargetElement = oElement = jQuery(oEvent.target).control(0);
    ActivityDetection.refresh();
    if (oTargetElement == null) {
        return;
    }
    if (oEvent.isMarked('delayedMouseEvent')) {
        return;
    }
    var sHandledUIAreaId = oEvent.getMark('handledByUIArea'), sId = this.getId();
    if (sHandledUIAreaId && sHandledUIAreaId !== sId) {
        oEvent.setMark('firstUIArea', false);
        return;
    }
    oEvent.setMarked('firstUIArea');
    oEvent.srcControl = oTargetElement;
    if (oEvent.type === 'contextmenu' && oEvent.shiftKey && oEvent.altKey && !!(oEvent.metaKey || oEvent.ctrlKey)) {
        Log.info('Suppressed forwarding the contextmenu event as control event because CTRL+SHIFT+ALT is pressed!');
        return;
    }
    aPreprocessors.forEach(function (fnPreprocessor) {
        fnPreprocessor(oEvent);
    });
    this.oCore._handleControlEvent(oEvent, sId);
    if (this.bLocked || this.oCore.isLocked()) {
        return;
    }
    if (Interaction.getActive()) {
        bInteractionRelevant = oEvent.type.match(rEvents);
        if (bInteractionRelevant) {
            Interaction.notifyEventStart(oEvent);
        }
    }
    var aEventTypes = [];
    if (oEvent.getPseudoTypes) {
        aEventTypes = oEvent.getPseudoTypes();
    }
    aEventTypes.push(oEvent.type);
    var bGroupChanged = false;
    while (oElement instanceof Element && oElement.isActive() && !oEvent.isPropagationStopped()) {
        for (var i = 0, is = aEventTypes.length; i < is; i++) {
            var sType = aEventTypes[i];
            oEvent.type = sType;
            oEvent.currentTarget = oElement.getDomRef();
            oElement._handleEvent(oEvent);
            if (oEvent.isImmediatePropagationStopped()) {
                break;
            }
        }
        if (!bGroupChanged && !oEvent.isMarked('enterKeyConsumedAsContent')) {
            bGroupChanged = this._handleGroupChange(oEvent, oElement);
        }
        if (oEvent.isPropagationStopped()) {
            break;
        }
        if (oElement.bStopEventBubbling) {
            break;
        }
        var oDomRef = oElement.getDomRef();
        if (!oDomRef) {
            break;
        }
        oDomRef = oDomRef.parentNode;
        oElement = null;
        if (oEvent.isMarked('fromMouseout') && containsOrEquals(oDomRef, oEvent.relatedTarget)) {
            break;
        }
        while (oDomRef && oDomRef !== this.getRootNode()) {
            if (oDomRef.id) {
                oElement = jQuery(oDomRef).control(0);
                if (oElement) {
                    break;
                }
            }
            oDomRef = oDomRef.parentNode;
        }
    }
    aPostprocessors.forEach(function (fnPostprocessor) {
        fnPostprocessor(oEvent);
    });
    if (bInteractionRelevant) {
        Interaction.notifyEventEnd(oEvent);
    }
    oEvent.currentTarget = this.getRootNode();
    oEvent.setMark('handledByUIArea', sId);
    if (oEvent.isPropagationStopped()) {
        Log.debug('\'' + oEvent.type + '\' propagation has been stopped');
    }
    var sEventName = oEvent.type;
    if (!mVerboseEvents[sEventName]) {
        if (oTargetElement) {
            Log.debug('Event fired: \'' + sEventName + '\' on ' + oTargetElement, '', 'sap.ui.core.UIArea');
        } else {
            Log.debug('Event fired: \'' + sEventName + '\'', '', 'sap.ui.core.UIArea');
        }
    }
};
UIArea.prototype._onattach = function () {
    var oDomRef = this.getRootNode();
    if (oDomRef == null) {
        return;
    }
    jQuery(oDomRef).attr('data-sap-ui-area', oDomRef.id).bind(ControlEvents.events.join(' '), this._handleEvent.bind(this));
};
UIArea.prototype._ondetach = function () {
    var oDomRef = this.getRootNode();
    if (oDomRef == null) {
        return;
    }
    jQuery(oDomRef).removeAttr('data-sap-ui-area').unbind();
};
UIArea.prototype.clone = function () {
    throw new Error('UIArea can\'t be cloned');
};
UIArea.prototype._handleGroupChange = function (oEvent, oElement) {
    var oKey = UIArea._oFieldGroupValidationKey;
    if (oEvent.type === 'focusin') {
        if (UIArea._iFieldGroupDelayTimer) {
            clearTimeout(UIArea._iFieldGroupDelayTimer);
            UIArea._iFieldGroupDelayTimer = null;
        }
        UIArea._iFieldGroupDelayTimer = setTimeout(this.setFieldGroupControl.bind(this, oElement), 0);
        return true;
    } else if (this.getFieldGroupControl() && oEvent.type === 'keyup' && oEvent.keyCode === oKey.keyCode && oEvent.shiftKey === oKey.shiftKey && oEvent.altKey === oKey.altKey && oEvent.ctrlKey === oKey.ctrlKey) {
        if (UIArea._iFieldGroupTriggerDelay) {
            clearTimeout(UIArea._iFieldGroupTriggerDelay);
        }
        var oCurrentControl = this.getFieldGroupControl(), aCurrentGroupIds = oCurrentControl ? oCurrentControl._getFieldGroupIds() : [];
        if (aCurrentGroupIds.length > 0) {
            oCurrentControl.triggerValidateFieldGroup(aCurrentGroupIds);
        }
        return true;
    }
    return false;
};
UIArea.prototype.setFieldGroupControl = function (oElement) {
    var oControl = oElement;
    while (oControl && !(oControl instanceof Element && oControl.isA('sap.ui.core.Control'))) {
        oControl = oControl.getParent();
    }
    var oCurrentControl = this.getFieldGroupControl();
    if (oControl != oCurrentControl) {
        var aCurrentGroupIds = oCurrentControl ? oCurrentControl._getFieldGroupIds() : [], aNewGroupIds = oControl ? oControl._getFieldGroupIds() : [], aTargetFieldGroupIds = aCurrentGroupIds.filter(function (sCurrentGroupId) {
                return aNewGroupIds.indexOf(sCurrentGroupId) < 0;
            });
        if (aTargetFieldGroupIds.length > 0) {
            oCurrentControl.triggerValidateFieldGroup(aTargetFieldGroupIds);
        }
        UIArea._oFieldGroupControl = oControl;
    }
    return this;
};
UIArea.prototype.getFieldGroupControl = function () {
    if (UIArea._oFieldGroupControl && !UIArea._oFieldGroupControl.bIsDestroyed) {
        return UIArea._oFieldGroupControl;
    }
    return null;
};
UIArea._oFieldGroupControl = null;
UIArea._iFieldGroupDelayTimer = null;
UIArea._oFieldGroupValidationKey = {
    keyCode: KeyCodes.ENTER,
    shiftKey: false,
    altKey: false,
    ctrlKey: false
};
UIArea._oRenderLog = oRenderLog;
export default UIArea;