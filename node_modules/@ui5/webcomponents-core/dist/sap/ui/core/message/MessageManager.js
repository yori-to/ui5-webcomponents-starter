import jQuery from '../../thirdparty/jquery.js';
import EventProvider from '../../base/EventProvider.js';
import ManagedObject from '../../base/ManagedObject.js';
import MessageModel from '../../model/message/MessageModel.js';
import Message from './Message.js';
import ControlMessageProcessor from './ControlMessageProcessor.js';
import MessageProcessor from './MessageProcessor.js';
import deepEqual from '../../../base/util/deepEqual.js';
import Log from '../../../base/Log.js';
var MessageManager = EventProvider.extend('sap.ui.core.message.MessageManager', {
    constructor: function () {
        EventProvider.apply(this, arguments);
        this.mProcessors = {};
        this.mObjects = {};
        this.mMessages = {};
        var bHandleValidation = sap.ui.getWCCore().getConfiguration().getHandleValidation();
        if (bHandleValidation) {
            sap.ui.getWCCore().attachValidationSuccess(bHandleValidation, this._handleSuccess, this);
            sap.ui.getWCCore().attachValidationError(bHandleValidation, this._handleError, this);
            sap.ui.getWCCore().attachParseError(bHandleValidation, this._handleError, this);
            sap.ui.getWCCore().attachFormatError(bHandleValidation, this._handleError, this);
        }
    },
    metadata: {
        publicMethods: [
            'addMessages',
            'removeMessages',
            'removeAllMessages',
            'registerMessageProcessor',
            'unregisterMessageProcessor',
            'registerObject',
            'unregisterObject',
            'getMessageModel',
            'destroy'
        ]
    }
});
MessageManager.prototype._handleError = function (oEvent, bHandleValidation) {
    if (!this.oControlMessageProcessor) {
        this.oControlMessageProcessor = new ControlMessageProcessor();
    }
    if (bHandleValidation) {
        var oElement = oEvent.getParameter('element');
        var sProperty = oEvent.getParameter('property');
        var sTarget = oElement.getId() + '/' + sProperty;
        var sProcessorId = this.oControlMessageProcessor.getId();
        var bTechnical = oEvent.sId === 'formatError';
        if (this.mMessages[sProcessorId] && this.mMessages[sProcessorId][sTarget]) {
            this._removeMessages(this.mMessages[sProcessorId][sTarget], true);
        }
        var oReference = {};
        oReference[oElement.getId()] = {
            properties: {},
            fieldGroupIds: oElement.getFieldGroupIds ? oElement.getFieldGroupIds() : undefined
        };
        oReference[oElement.getId()].properties[sProperty] = true;
        var oMessage = new Message({
            type: sap.ui.core.MessageType.Error,
            message: oEvent.getParameter('message'),
            target: sTarget,
            processor: this.oControlMessageProcessor,
            technical: bTechnical,
            references: oReference,
            validation: true
        });
        this.addMessages(oMessage);
    }
    oEvent.cancelBubble();
};
MessageManager.prototype._handleSuccess = function (oEvent, bHandleValidation) {
    if (!this.oControlMessageProcessor) {
        this.oControlMessageProcessor = new ControlMessageProcessor();
    }
    if (bHandleValidation) {
        var oElement = oEvent.getParameter('element');
        var sProperty = oEvent.getParameter('property');
        var sTarget = oElement.getId() + '/' + sProperty;
        var sProcessorId = this.oControlMessageProcessor.getId();
        if (this.mMessages[sProcessorId] && this.mMessages[sProcessorId][sTarget]) {
            this._removeMessages(this.mMessages[sProcessorId][sTarget], true);
        }
    }
    oEvent.cancelBubble();
};
MessageManager.prototype.addMessages = function (vMessages) {
    var oMessage = vMessages, mProcessors = this.getAffectedProcessors(vMessages);
    if (!vMessages) {
        return;
    } else if (Array.isArray(vMessages)) {
        for (var i = 0; i < vMessages.length; i++) {
            oMessage = vMessages[i];
            this._importMessage(oMessage);
        }
    } else {
        this._importMessage(vMessages);
    }
    this._updateMessageModel(mProcessors);
};
MessageManager.prototype._importMessage = function (oMessage) {
    var sMessageKey = oMessage.getTarget(), oProcessor = oMessage.getMessageProcessor(), sProcessorId = oProcessor && oProcessor.getId();
    if (!this.mMessages[sProcessorId]) {
        this.mMessages[sProcessorId] = {};
    }
    var aMessages = this.mMessages[sProcessorId][sMessageKey] ? this.mMessages[sProcessorId][sMessageKey] : [];
    aMessages.push(oMessage);
    this.mMessages[sProcessorId][sMessageKey] = aMessages;
};
MessageManager.prototype._pushMessages = function (mProcessors) {
    var that = this;
    jQuery.each(mProcessors, function (sId, oProcessor) {
        var vMessages = that.mMessages[sId] ? that.mMessages[sId] : {};
        that._sortMessages(vMessages);
        vMessages = Object.keys(vMessages).length === 0 ? null : jQuery.extend(true, {}, vMessages);
        oProcessor.setMessages(vMessages);
    });
};
MessageManager.prototype._sortMessages = function (vMessages) {
    var mSortOrder = {
        'Error': 0,
        'Warning': 1,
        'Success': 2,
        'Information': 3
    };
    if (Array.isArray(vMessages)) {
        vMessages = { 'ignored': vMessages };
    }
    jQuery.each(vMessages, function (sTarget, aMessages) {
        if (aMessages.length > 0) {
            aMessages.sort(function (a, b) {
                return mSortOrder[a.type] - mSortOrder[b.type];
            });
        }
    });
};
MessageManager.prototype._updateMessageModel = function (mProcessors) {
    var aMessages = [], oMessageModel = this.getMessageModel();
    jQuery.each(this.mMessages, function (sProcessorId, mMessages) {
        jQuery.each(mMessages, function (sKey, vMessages) {
            aMessages = jQuery.merge(aMessages, vMessages);
        });
    });
    this._pushMessages(mProcessors);
    oMessageModel.setData(aMessages);
};
MessageManager.prototype.removeAllMessages = function () {
    var mProcessors = {};
    for (var sProcessorId in this.mMessages) {
        var sFirstKey = Object.keys(this.mMessages[sProcessorId])[0];
        var vMessages = this.mMessages[sProcessorId][sFirstKey];
        jQuery.extend(mProcessors, this.getAffectedProcessors(vMessages));
    }
    this.aMessages = [];
    this.mMessages = {};
    this._updateMessageModel(mProcessors);
};
MessageManager.prototype.removeMessages = function (vMessages) {
    return this._removeMessages.apply(this, arguments);
};
MessageManager.prototype._removeMessages = function (vMessages, bOnlyValidationMessages) {
    var that = this, mProcessors = this.getAffectedProcessors(vMessages);
    if (!vMessages || Array.isArray(vMessages) && vMessages.length == 0) {
        return;
    } else if (Array.isArray(vMessages)) {
        var vOriginalMessages = vMessages.slice(0);
        for (var i = 0; i < vOriginalMessages.length; i++) {
            if (!bOnlyValidationMessages || vOriginalMessages[i].validation) {
                that._removeMessage(vOriginalMessages[i]);
            }
        }
    } else if (vMessages instanceof Message && (!bOnlyValidationMessages || vMessages.validation)) {
        that._removeMessage(vMessages);
    } else {
        jQuery.each(vMessages, function (sTarget, aMessages) {
            that._removeMessages(aMessages, bOnlyValidationMessages);
        });
    }
    this._updateMessageModel(mProcessors);
};
MessageManager.prototype._removeMessage = function (oMessage) {
    var oProcessor = oMessage.getMessageProcessor(), sProcessorId = oProcessor && oProcessor.getId(), mMessages = this.mMessages[sProcessorId];
    if (!mMessages) {
        return;
    }
    var aMessages = mMessages[oMessage.getTarget()];
    if (aMessages) {
        for (var i = 0; i < aMessages.length; i++) {
            var oMsg = aMessages[i];
            if (deepEqual(oMsg, oMessage)) {
                aMessages.splice(i, 1);
                --i;
            }
        }
        if (mMessages[oMessage.getTarget()].length === 0) {
            delete mMessages[oMessage.getTarget()];
        }
    }
};
MessageManager.prototype.onMessageChange = function (oEvent) {
    var aOldMessages = oEvent.getParameter('oldMessages');
    var aNewMessages = oEvent.getParameter('newMessages');
    this.removeMessages(aOldMessages);
    this.addMessages(aNewMessages);
};
MessageManager.prototype.registerMessageProcessor = function (oProcessor) {
    var sProcessorId = oProcessor.getId(), mProcessors = {};
    if (!this.mProcessors[sProcessorId]) {
        this.mProcessors[sProcessorId] = sProcessorId;
        oProcessor.attachMessageChange(this.onMessageChange, this);
        if (sProcessorId in this.mMessages) {
            mProcessors[sProcessorId] = oProcessor;
            this._pushMessages(mProcessors);
        }
    }
};
MessageManager.prototype.unregisterMessageProcessor = function (oProcessor) {
    this.removeMessagesByProcessor(oProcessor.getId());
    delete this.mProcessors[oProcessor.getId()];
    oProcessor.detachMessageChange(this.onMessageChange, this);
};
MessageManager.prototype.registerObject = function (oObject, bHandleValidation) {
    if (!oObject instanceof ManagedObject) {
        Log.error(this + ' : ' + oObject.toString() + ' is not an instance of sap.ui.base.ManagedObject');
        return;
    }
    oObject.attachValidationSuccess(bHandleValidation, this._handleSuccess, this);
    oObject.attachValidationError(bHandleValidation, this._handleError, this);
    oObject.attachParseError(bHandleValidation, this._handleError, this);
    oObject.attachFormatError(bHandleValidation, this._handleError, this);
};
MessageManager.prototype.unregisterObject = function (oObject) {
    if (!oObject instanceof ManagedObject) {
        Log.error(this + ' : ' + oObject.toString() + ' is not an instance of sap.ui.base.ManagedObject');
        return;
    }
    oObject.detachValidationSuccess(this._handleSuccess);
    oObject.detachValidationError(this._handleError);
    oObject.detachParseError(this._handleError);
    oObject.detachFormatError(this._handleError);
};
MessageManager.prototype.destroy = function () {
    Log.warning('Deprecated: Do not call destroy on a MessageManager');
};
MessageManager.prototype.getMessageModel = function () {
    if (!this.oMessageModel) {
        this.oMessageModel = new MessageModel(this);
        this.oMessageModel.setData([]);
    }
    return this.oMessageModel;
};
MessageManager.prototype.getAffectedProcessors = function (vMessages) {
    var oProcessor, sProcessorId, mProcessors = {};
    if (vMessages) {
        if (!Array.isArray(vMessages)) {
            vMessages = [vMessages];
        }
        vMessages.forEach(function (oMessage) {
            oProcessor = oMessage.getMessageProcessor();
            if (oProcessor instanceof MessageProcessor) {
                sProcessorId = oProcessor.getId();
                mProcessors[sProcessorId] = oProcessor;
            }
        });
    }
    return mProcessors;
};
MessageManager.prototype.removeMessagesByProcessor = function (sProcessorId) {
    delete this.mMessages[sProcessorId];
    this._updateMessageModel({});
};
export default MessageManager;