import Object from '../../base/Object.js';
import MessageProcessor from './MessageProcessor.js';
import uid from '../../../base/util/uid.js';
import Log from '../../../base/Log.js';
var Message = Object.extend('sap.ui.core.message.Message', {
    constructor: function (mParameters) {
        Object.apply(this, arguments);
        mParameters = mParameters || {};
        this.id = mParameters.id ? mParameters.id : uid();
        this.message = mParameters.message;
        this.description = mParameters.description;
        this.descriptionUrl = mParameters.descriptionUrl;
        this.additionalText = mParameters.additionalText;
        this.setType(mParameters.type || sap.ui.core.MessageType.None);
        this.code = mParameters.code;
        this.target = mParameters.target;
        this.processor = mParameters.processor;
        this.persistent = mParameters.persistent || false;
        this.technical = mParameters.technical || false;
        this.references = mParameters.references || {};
        this.validation = !!mParameters.validation;
        this.date = mParameters.date || Date.now();
        this.controlIds = [];
    }
});
Message.prototype.getId = function () {
    return this.id;
};
Message.prototype.setMessage = function (sMessage) {
    this.message = sMessage;
};
Message.prototype.getMessage = function () {
    return this.message;
};
Message.prototype.getControlId = function () {
    return this.controlIds[this.controlIds.length - 1];
};
Message.prototype.addControlId = function (sControlId) {
    if (this.controlIds.indexOf(sControlId) == -1) {
        this.controlIds.push(sControlId);
    }
};
Message.prototype.removeControlId = function (sControlId) {
    var iIndex = this.controlIds.indexOf(sControlId);
    if (iIndex != -1) {
        this.controlIds.splice(iIndex, 1);
    }
};
Message.prototype.getControlIds = function () {
    return this.controlIds;
};
Message.prototype.setDescription = function (sDescription) {
    this.description = sDescription;
};
Message.prototype.getDescription = function () {
    return this.description;
};
Message.prototype.setAdditionalText = function (sAdditionalText) {
    this.additionalText = sAdditionalText;
};
Message.prototype.getAdditionalText = function () {
    return this.additionalText;
};
Message.prototype.getDescriptionUrl = function () {
    return this.descriptionUrl;
};
Message.prototype.setDescriptionUrl = function (sDescriptionUrl) {
    this.descriptionUrl = sDescriptionUrl;
};
Message.prototype.setType = function (sType) {
    if (sType in sap.ui.core.MessageType) {
        this.type = sType;
    } else {
        Log.error('MessageType must be of type sap.ui.core.MessageType');
    }
};
Message.prototype.getType = function () {
    return this.type;
};
Message.prototype.setTarget = function (sTarget) {
    this.target = sTarget;
};
Message.prototype.getTarget = function () {
    return this.target;
};
Message.prototype.setMessageProcessor = function (oMessageProcessor) {
    if (oMessageProcessor instanceof MessageProcessor) {
        this.processor = oMessageProcessor;
    } else {
        Log.error('MessageProcessor must be an instance of sap.ui.core.message.MessageProcessor');
    }
};
Message.prototype.getMessageProcessor = function () {
    return this.processor;
};
Message.prototype.setCode = function (sCode) {
    this.code = sCode;
};
Message.prototype.getCode = function () {
    return this.code;
};
Message.prototype.setPersistent = function (bPersistent) {
    this.persistent = bPersistent;
};
Message.prototype.getPersistent = function () {
    return this.persistent;
};
Message.prototype.setTechnical = function (bTechnical) {
    this.technical = bTechnical;
};
Message.prototype.getTechnical = function () {
    return this.technical;
};
Message.prototype.addReference = function (sId, sProperty) {
    if (!sId) {
        return;
    }
    if (!this.references[sId]) {
        this.references[sId] = { properties: {} };
    }
    if (!this.references[sId].properties[sProperty]) {
        this.references[sId].properties[sProperty] = true;
    }
};
Message.prototype.removeReference = function (sId, sProperty) {
    if (!sId) {
        return;
    }
    if (sId in this.references) {
        if (!sProperty) {
            delete this.references[sId];
        } else if (this.references[sId].properties[sProperty]) {
            delete this.references[sId].properties[sProperty];
        }
    }
};
Message.prototype.setDate = function (iDate) {
    this.date = iDate;
};
Message.prototype.getDate = function () {
    return this.date;
};
export default Message;