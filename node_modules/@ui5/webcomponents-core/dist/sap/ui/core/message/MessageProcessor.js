import EventProvider from '../../base/EventProvider.js';
import uid from '../../../base/util/uid.js';
var MessageProcessor = EventProvider.extend('sap.ui.core.message.MessageProcessor', {
    constructor: function () {
        EventProvider.apply(this, arguments);
        this.mMessages = null;
        this.id = uid();
        sap.ui.getWCCore().getMessageManager().registerMessageProcessor(this);
    },
    metadata: {
        'abstract': true,
        publicMethods: [
            'getId',
            'setMessages',
            'attachMessageChange',
            'detachMessageChange'
        ]
    }
});
MessageProcessor.M_EVENTS = { messageChange: 'messageChange' };
MessageProcessor.prototype.attachMessageChange = function (oData, fnFunction, oListener) {
    this.attachEvent('messageChange', oData, fnFunction, oListener);
    return this;
};
MessageProcessor.prototype.detachMessageChange = function (fnFunction, oListener) {
    this.detachEvent('messageChange', fnFunction, oListener);
    return this;
};
MessageProcessor.prototype.fireMessageChange = function (mArguments) {
    this.fireEvent('messageChange', mArguments);
    return this;
};
MessageProcessor.prototype.getId = function () {
    return this.id;
};
MessageProcessor.prototype.destroy = function () {
    sap.ui.getWCCore().getMessageManager().unregisterMessageProcessor(this);
    EventProvider.prototype.destroy.apply(this, arguments);
};
export default MessageProcessor;