import Control from './Control.js';
import ControlModel from '../model/control/ControlModel.js';
import EventProvider from '../base/EventProvider.js';
import assert from '../../base/assert.js';
import isPlainObject from '../../base/util/isPlainObject.js';
import jQuery from '../thirdparty/jquery.js';
var CompositeSupport = {};
CompositeSupport.mixInto = function (fnClass, sFactoryName, oMethods) {
    if (arguments.length == 2 && typeof sFactoryName === 'object') {
        oMethods = sFactoryName;
        sFactoryName = 'ComponentFactory';
    }
    assert(typeof fnClass === 'function' && fnClass.prototype instanceof Control, 'CompositeSupport.mixInto: fnClass must be a subclass of Control');
    assert(typeof sFactoryName === 'string' && sFactoryName, 'CompositeSupport.mixInto: sFactoryName must be a non-empty string');
    assert(typeof oMethods === 'object', 'oMethods must be an object');
    function _getBaseFactory() {
        var oMetadata = fnClass.getMetadata();
        do {
            oMetadata = oMetadata.getParent();
            if (oMetadata && oMetadata.getComponentFactoryClass) {
                return oMetadata.getComponentFactoryClass();
            }
        } while (oMetadata);
        return ComponentFactory;
    }
    fnClass[sFactoryName] = _getBaseFactory().subclass(oMethods);
    fnClass.getMetadata().getComponentFactoryClass = function () {
        return fnClass[sFactoryName];
    };
    if (!fnClass.prototype._initCompositeSupport) {
        fnClass.prototype._initCompositeSupport = function (mSettings) {
            var oFactory = new (this.getMetadata().getComponentFactoryClass())(this);
            if (mSettings.componentFactory) {
                assert(isPlainObject(mSettings.componentFactory));
                oFactory.customize(mSettings.componentFactory);
                delete mSettings.componentFactory;
            }
            this.getComponentFactory = function () {
                return oFactory;
            };
        };
    }
    if (!fnClass.prototype._exitCompositeSupport) {
        fnClass.prototype._exitCompositeSupport = function () {
            this.getComponentFactory().destroy();
            delete this.getComponentFactory;
        };
    }
};
var ComponentFactory = EventProvider.extend('sap.ui.core.ComponentFactory', {
    constructor: function (oComposite) {
        EventProvider.apply(this);
        this.oComposite = oComposite;
        return this;
    }
});
ComponentFactory.prototype.attachChange = function (f, o) {
    this.getModel();
    this.attachEvent('change', f, o);
    return this;
};
ComponentFactory.prototype.detachChange = function (f, o) {
    this.getModel();
    this.detachEvent('change', f, o);
    return this;
};
ComponentFactory.prototype.getModel = function () {
    if (!this.oModel) {
        var that = this;
        this.oModel = new ControlModel(this.oComposite);
        this.oModel._onchange = function (e) {
            that.fireEvent('change', e.getParameters && e.getParameters());
        };
    }
    return this.oModel;
};
ComponentFactory.prototype.addFacadeComponent = function (oElement) {
    this.getModel().add(oElement);
};
ComponentFactory.prototype.removeFacadeComponent = function (oElement) {
    this.getModel().remove(oElement);
};
(function () {
    function _extend(o, oMethods, bDefaults) {
        jQuery.each(oMethods, function (sName, fnFunc) {
            if (sName.indexOf('default') != 0) {
                o[sName] = fnFunc;
            }
            if (bDefaults && sName.indexOf('create') == 0) {
                o['defaultC' + sName.substring(1)] = o[sName];
            }
        });
    }
    function _createExtendFunction(fnBaseClass) {
        return function (oMethods) {
            var fnCtor = function () {
                fnBaseClass.apply(this, arguments);
            };
            fnCtor.prototype = Object.create(fnBaseClass.prototype);
            _extend(fnCtor.prototype, oMethods, true);
            fnCtor.customize = function (oMethods) {
                _extend(fnCtor.prototype, oMethods);
                return this;
            };
            fnCtor.subclass = _createExtendFunction(fnCtor);
            return fnCtor;
        };
    }
    ComponentFactory.subclass = _createExtendFunction(ComponentFactory);
    ComponentFactory.prototype.customize = function (mMethods) {
        _extend(this, mMethods);
        if (this.oComposite && this.oComposite._onComponentFactoryChanged) {
            this.oComposite._onComponentFactoryChanged();
        }
        return this;
    };
}());
export default CompositeSupport;