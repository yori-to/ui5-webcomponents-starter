import Element from './Element.js';
import library from './library.js';
import Log from '../../base/Log.js';
var MessageType = library.MessageType;
var Message = Element.extend('sap.ui.core.Message', {
    metadata: {
        library: 'sap.ui.core',
        properties: {
            text: {
                type: 'string',
                group: 'Misc',
                defaultValue: null
            },
            timestamp: {
                type: 'string',
                group: 'Misc',
                defaultValue: null
            },
            icon: {
                type: 'sap.ui.core.URI',
                group: 'Misc',
                defaultValue: null
            },
            level: {
                type: 'sap.ui.core.MessageType',
                group: 'Misc',
                defaultValue: MessageType.None
            },
            readOnly: {
                type: 'boolean',
                group: 'Misc',
                defaultValue: false
            }
        }
    }
});
Message.prototype.getDefaultIcon = function (sSize) {
    var sModulePath = sap.ui.require.toUrl('sap/ui/core/themes/' + sap.ui.getWCCore().getConfiguration().getTheme());
    var sImagesPath = sModulePath + '/img/message/';
    if (sSize && sSize == '32x32') {
        sImagesPath += '32x32/';
    } else {
        sImagesPath += '16x16/';
    }
    var sUrl = '';
    switch (this.getProperty('level')) {
    case MessageType.Error:
        sUrl = sImagesPath + 'Message_Icon_Error.png';
        break;
    case MessageType.Information:
        sUrl = sImagesPath + 'Message_Icon_Information.png';
        break;
    case MessageType.Warning:
        sUrl = sImagesPath + 'Message_Icon_Warning.png';
        break;
    case MessageType.Success:
        sUrl = sImagesPath + 'Message_Icon_Success.png';
        break;
    case MessageType.None:
    default:
        sUrl = this.getProperty('icon');
        break;
    }
    return sUrl;
};
Message.prototype.compareByType = function (oOther) {
    return Message.compareByType(this, oOther);
};
Message.compareByType = function (oMessage1, oMessage2) {
    if (!oMessage1 && !oMessage2) {
        return 0;
    }
    if (oMessage1 && !oMessage2) {
        return 1;
    }
    if (!oMessage1 && oMessage2) {
        return -1;
    }
    var sLvl1 = oMessage1.getLevel();
    var sLvl2 = oMessage2.getLevel();
    if (sLvl1 === sLvl2) {
        return 0;
    }
    switch (sLvl1) {
    case MessageType.Error:
        return 1;
    case MessageType.Warning:
        return sLvl2 === MessageType.Error ? -1 : 1;
    case MessageType.Success:
        return sLvl2 === MessageType.Error || sLvl2 === MessageType.Warning ? -1 : 1;
    case MessageType.Information:
        return sLvl2 === MessageType.None ? 1 : -1;
    case MessageType.None:
        return -1;
    default:
        Log.error('Comparison error', this);
        return 0;
    }
};
export default Message;