import BaseObject from '../base/Object.js';
import EventBus from './EventBus.js';
import assert from '../../base/assert.js';
var _EVENT_ID = 'sapUiIntervalTrigger-event';
var IntervalTrigger = BaseObject.extend('sap.ui.core.IntervalTrigger', {
    constructor: function (iInterval) {
        BaseObject.apply(this);
        this._oEventBus = new EventBus();
        this._delayedCallId = null;
        this._trigger = trigger.bind(this);
        this._iInterval = 0;
        if (iInterval) {
            this.setInterval(iInterval);
        }
    }
});
var trigger = function () {
    clearTimeout(this._delayedCallId);
    var bHasListeners = this._oEventBus._defaultChannel.hasListeners(_EVENT_ID);
    if (this._iInterval > 0 && bHasListeners) {
        this._oEventBus.publish(_EVENT_ID);
        this._delayedCallId = setTimeout(this._trigger, this._iInterval);
    }
};
IntervalTrigger.prototype.destroy = function () {
    BaseObject.prototype.destroy.apply(this, arguments);
    delete this._trigger;
    this._oEventBus.destroy();
    delete this._oEventBus;
};
IntervalTrigger.prototype.setInterval = function (iInterval) {
    assert(typeof iInterval === 'number', 'Interval must be an integer value');
    if (this._iInterval !== iInterval) {
        this._iInterval = iInterval;
        this._trigger();
    }
};
IntervalTrigger.prototype.addListener = function (fnFunction, oListener) {
    this._oEventBus.subscribe(_EVENT_ID, fnFunction, oListener);
    this._trigger();
};
IntervalTrigger.prototype.removeListener = function (fnFunction, oListener) {
    this._oEventBus.unsubscribe(_EVENT_ID, fnFunction, oListener);
};
IntervalTrigger.prototype.getInterface = function () {
    return this;
};
var getInstance = function () {
    var oIntervalTrigger = new IntervalTrigger(200);
    getInstance = function () {
        return oIntervalTrigger;
    };
    return oIntervalTrigger;
};
IntervalTrigger.addListener = function (fnFunction, oListener) {
    getInstance().addListener(fnFunction, oListener);
};
IntervalTrigger.removeListener = function (fnFunction, oListener) {
    getInstance().removeListener(fnFunction, oListener);
};
export default IntervalTrigger;