import Core from '../Core.js';
import Template from './Template.js';
import TemplateControl from './TemplateControl.js';
import Handlebars from '../../thirdparty/handlebars.js';
import ManagedObject from '../../base/ManagedObject.js';
import ObjectPath from '../../../base/util/ObjectPath.js';
import encodeXML from '../../../base/security/encodeXML.js';
import jQuery from '../../thirdparty/jquery.js';
var HandlebarsTemplate = Template.extend('sap.ui.core.tmpl.HandlebarsTemplate', {
    constructor: function (sId, mSettings) {
        Template.apply(this, arguments);
    }
});
Template.registerType('text/x-handlebars-template', 'sap.ui.core.tmpl.HandlebarsTemplate');
function decodeHash(oHash) {
    for (var sKey in oHash) {
        oHash[sKey] = oHash[sKey].replace('&gt;', '>').replace('&lt;', '<').replace('&quot;', '"').replace('&amp;', '&');
    }
}
function determinePath(sPath, sParentPath) {
    var rPath = /^((\w+)>)?(.*)/, aPathParts = rPath.exec(sPath), sPathModel = aPathParts[2], aParentPathParts = rPath.exec(sParentPath), sParentPathModel = aParentPathParts[2];
    var aPathParts = rPath.exec(sPath);
    if (sParentPath && sPathModel == sParentPathModel) {
        return sParentPath + aPathParts[3];
    } else {
        return sPath;
    }
}
HandlebarsTemplate.RENDER_HELPERS = function () {
    var fnEach = Handlebars.helpers['each'], fnWith = Handlebars.helpers['with'], fnIf = Handlebars.helpers['if'], fnUnless = Handlebars.helpers['unless'], oRenderManager = sap.ui.getWCCore().createRenderManager();
    oRenderManager.renderControl = function (oControl) {
        this.writeControlData(oControl);
        this.writeClasses(oControl);
        this.writeStyles(oControl);
    };
    var oHelpers = {
        'each': function (context, options) {
            options = options || context;
            if (!options.hash.path) {
                return fnEach.apply(this, arguments);
            } else {
                decodeHash(options.hash);
                var oRM = options.data.renderManager, oRootControl = options.data.rootControl, sParentPath = options.data.path, oParentControl = options.data.parentControl, sPath = determinePath(options.hash.path, sParentPath), oProperty = oRootControl.bindList(sPath), aHTML = [], data;
                if (options.data) {
                    data = Handlebars.createFrame(options.data);
                }
                if (oProperty) {
                    for (var sKey in oProperty) {
                        if (data) {
                            data.renderManager = oRM;
                            data.rootControl = oRootControl;
                            data.path = sPath + '/' + sKey + '/';
                            data.parentControl = oParentControl;
                        }
                        aHTML.push(options.fn({}, { data: data }));
                    }
                }
                if (!oParentControl) {
                    return new Handlebars.SafeString(aHTML.join(''));
                }
            }
        },
        'with': function (context, options) {
            options = options || context;
            if (!options.hash.path) {
                return fnWith.apply(this, arguments);
            }
        },
        'if': function (conditional, options) {
            options = options || conditional;
            if (!options.hash.path) {
                return fnIf.apply(this, arguments);
            } else {
                decodeHash(options.hash);
                var oRootControl = options.data.rootControl, sParentPath = options.data.path, sPath = determinePath(options.hash.path, sParentPath);
                if (sPath) {
                    var oValue = oRootControl.bindProp(sPath);
                    if (oValue) {
                        return options.fn(this);
                    } else {
                        return options.inverse(this);
                    }
                }
            }
        },
        'unless': function (conditional, options) {
            options = options || conditional;
            if (!options.hash.path) {
                return fnUnless.apply(this, arguments);
            } else {
                decodeHash(options.hash);
                var oRootControl = options.data.rootControl, sParentPath = options.data.path, sPath = determinePath(options.hash.path, sParentPath);
                if (sPath) {
                    var oValue = oRootControl.bindProp(sPath);
                    if (!oValue) {
                        return options.fn(this);
                    } else {
                        return options.inverse(this);
                    }
                }
            }
        },
        'text': function (context, options) {
            options = options || context;
            decodeHash(options.hash);
            var oRootControl = options.data.rootControl, sParentPath = options.data.path, sPath = determinePath(options.hash.path, sParentPath);
            if (sPath) {
                var oValue = oRootControl.bindProp(sPath);
                return oValue && new Handlebars.SafeString(encodeXML(oValue));
            } else {
                throw new Error('The expression "text" requires the option "path"!');
            }
        },
        'element': function (context, options) {
            options = options || context;
            decodeHash(options.hash);
            var oRM = options.data.renderManager, oRootControl = options.data.rootControl, oElement = oRootControl.createDOMElement(options.hash, options.data.path), oParentElement = options.data.parentElement;
            if (options.fn) {
                options.fn({}, {
                    data: {
                        renderManager: oRM,
                        rootControl: oRootControl,
                        parentElement: oElement
                    }
                });
            }
            if (oParentElement) {
                oParentElement.addElement(oElement);
                return;
            }
            return new Handlebars.SafeString(oRM.getHTML(oElement));
        },
        'control': function (context, options) {
            options = options || context;
            decodeHash(options.hash);
            var oRM = options.data.renderManager, oControl = options.data.control;
            if (oControl) {
                return new Handlebars.SafeString(oRM.getHTML(oControl));
            }
            var oRootControl = options.data.rootControl, sParentPath = options.data.path, mParentChildren = options.data.children, sType = options.hash['sap-ui-type'], oClass = ObjectPath.get(sType || ''), oMetadata = oClass && oClass.getMetadata(), sDefaultAggregation = options.hash['sap-ui-default-aggregation'] || oMetadata && oMetadata.getDefaultAggregationName(), oView = options.data.view;
            if (!oClass) {
                throw new Error('Control of type ' + sType + ' cannot be found.');
            }
            var mChildren = {};
            if (options.fn) {
                options.fn({}, {
                    data: {
                        rootControl: oRootControl,
                        path: sParentPath,
                        children: mChildren,
                        defaultAggregation: sDefaultAggregation,
                        view: oView
                    }
                });
            }
            var mSettings = jQuery.extend({}, options.hash), aStyleClasses;
            for (var sKey in mSettings) {
                if (sKey === 'sap-ui-class' && typeof mSettings[sKey] === 'string') {
                    aStyleClasses = mSettings['sap-ui-class'] && mSettings['sap-ui-class'].split(' ');
                    delete mSettings[sKey];
                } else if (mChildren[sKey]) {
                    delete mSettings[sKey];
                }
            }
            var oNewControl = oRootControl.createControl(mSettings, options.data.path, !!mParentChildren, oView);
            if (aStyleClasses && aStyleClasses.length > 0) {
                aStyleClasses.forEach(oNewControl.addStyleClass.bind(oNewControl));
            }
            if (!jQuery.isEmptyObject(mChildren)) {
                mSettings = options.hash;
                var oAllAggregation = oMetadata.getAllAggregations();
                for (var sAggregationName in mChildren) {
                    var aChildAggregation = mChildren[sAggregationName];
                    for (var i = 0, l = aChildAggregation.length; i < l; i++) {
                        var oChildControl = aChildAggregation[i], oAggregation = oAllAggregation[sAggregationName], bMultiple = oAggregation && oAggregation.multiple;
                        if (typeof mSettings[sAggregationName] === 'string') {
                            var oBindingInfo = ManagedObject.bindingParser(mSettings[sAggregationName], oView && oView.getController());
                            oBindingInfo.template = oChildControl;
                            oNewControl.bindAggregation(sAggregationName, oBindingInfo);
                        } else {
                            if (bMultiple) {
                                oNewControl.addAggregation(sAggregationName, oChildControl);
                            } else {
                                oNewControl.setAggregation(sAggregationName, oChildControl);
                            }
                        }
                    }
                }
            }
            if (mParentChildren) {
                var sAggregationName = options.hash['sap-ui-aggregation'] || options.data.defaultAggregation;
                mParentChildren[sAggregationName] = mParentChildren[sAggregationName] || [];
                mParentChildren[sAggregationName].push(oNewControl);
                return;
            }
            return new Handlebars.SafeString(oRM.getHTML(oNewControl));
        },
        'property': function (context, options) {
            options = options || context;
            decodeHash(options.hash);
            var oRootControl = options.data.rootControl, oMetadata = oRootControl.getMetadata(), sPropertyName = options.hash.name, sGetter = oMetadata.getProperty(sPropertyName)._sGetter;
            return oRootControl[sGetter]();
        },
        'aggregation': function (context, options) {
            options = options || context;
            decodeHash(options.hash);
            if (options.data.children) {
                var sAggregationName = options.hash.name;
                if (options.fn) {
                    var oData = jQuery.extend({}, options.data, { defaultAggregation: sAggregationName });
                    options.fn({}, { data: oData });
                }
            } else {
                var oRM = options.data.renderManager, oRootControl = options.data.rootControl, oMetadata = oRootControl.getMetadata(), sAggregationName = options.hash.name, sGetter = oMetadata.getAggregation(sAggregationName)._sGetter, aHTML = [];
                var aChildren = oRootControl[sGetter]();
                if (aChildren) {
                    for (var i = 0, l = aChildren.length; i < l; i++) {
                        if (options.fn) {
                            aHTML.push(options.fn({}, {
                                data: {
                                    renderManager: oRM,
                                    rootControl: oRootControl,
                                    control: aChildren[i]
                                }
                            }));
                        } else {
                            aHTML.push(oRM.getHTML(aChildren[i]));
                        }
                    }
                }
                return new Handlebars.SafeString(aHTML.join(''));
            }
        },
        'event': function (context, options) {
            options = options || context;
        },
        'controlData': function (context, options) {
            options = options || context;
            var oRootControl = options.data.rootControl;
            return new Handlebars.SafeString(oRenderManager.getHTML(oRootControl));
        }
    };
    return oHelpers;
}();
HandlebarsTemplate.prototype.createMetadata = function () {
    var sTemplate = this.getContent(), fnTemplate = this._fnTemplate = this._fnTemplate || Handlebars.compile(sTemplate);
    var oMetadata = {}, mJSONKeys = TemplateControl.getMetadata().getAllSettings(), mPrivateAggregations = TemplateControl.getMetadata().getAllPrivateAggregations();
    var oHelpers = {
        'property': function (context, options) {
            options = options || context;
            decodeHash(options.hash);
            var sName = options.hash.name;
            if (sName && sName !== 'id' && !mJSONKeys[sName]) {
                oMetadata.properties = oMetadata.properties || {};
                oMetadata.properties[sName] = jQuery.extend({}, { type: 'string' }, options.hash);
            } else {
                throw new Error('The property name "' + sName + '" is reserved.');
            }
        },
        'aggregation': function (context, options) {
            options = options || context;
            decodeHash(options.hash);
            var sName = options.hash.name;
            if (sName && !mJSONKeys[sName] && !mPrivateAggregations[sName]) {
                options.hash.multiple = options.hash.multiple == 'true';
                oMetadata.aggregations = oMetadata.aggregations || {};
                oMetadata.aggregations[sName] = jQuery.extend({}, options.hash);
            } else {
                throw new Error('The aggregation name "' + sName + '" is reserved.');
            }
        },
        'event': function (context, options) {
            options = options || context;
        },
        'controlData': function (context, options) {
            options = options || context;
            oMetadata._hasControlData = true;
        }
    };
    [
        'each',
        'if',
        'unless',
        'with'
    ].forEach(function (sValue) {
        oHelpers[sValue] = function () {
        };
    });
    fnTemplate({}, { helpers: oHelpers });
    return oMetadata;
};
HandlebarsTemplate.prototype.createRenderer = function (oView) {
    var sTemplate = this.getContent(), fnTemplate = this._fnTemplate = this._fnTemplate || Handlebars.compile(sTemplate);
    var fnRenderer = function (rm, oControl) {
        var sHTML = fnTemplate(oControl.getContext() || {}, {
            data: {
                renderManager: rm,
                rootControl: oControl,
                view: oView
            },
            helpers: HandlebarsTemplate.RENDER_HELPERS
        });
        rm.write(sHTML);
    };
    return fnRenderer;
};
export default HandlebarsTemplate;