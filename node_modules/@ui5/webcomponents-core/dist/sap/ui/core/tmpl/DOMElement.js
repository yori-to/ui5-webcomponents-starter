import Control from '../Control.js';
import library from '../library.js';
import DOMAttribute from './DOMAttribute.js';
import DOMElementRenderer from './DOMElementRenderer.js';
import Log from '../../../base/Log.js';
import jQuery from '../../thirdparty/jquery.js';
var DOMElement = Control.extend('sap.ui.core.tmpl.DOMElement', {
    metadata: {
        library: 'sap.ui.core',
        properties: {
            text: {
                type: 'string',
                group: 'Appearance',
                defaultValue: null
            },
            tag: {
                type: 'string',
                group: 'Behavior',
                defaultValue: 'span'
            }
        },
        defaultAggregation: 'attributes',
        aggregations: {
            attributes: {
                type: 'sap.ui.core.tmpl.DOMAttribute',
                multiple: true,
                singularName: 'attribute'
            },
            elements: {
                type: 'sap.ui.core.tmpl.DOMElement',
                multiple: true,
                singularName: 'element'
            }
        }
    }
});
DOMElement.prototype.applySettings = function (mSettings) {
    var oMetadata = this.getMetadata(), mJSONKeys = oMetadata.getJSONKeys();
    if (mSettings) {
        if (!mSettings['attributes']) {
            var aAttributes = mSettings['attributes'] = [];
            jQuery.each(mSettings, function (sKey, oValue) {
                if (sKey !== 'id' && !mJSONKeys[sKey] && typeof oValue === 'string') {
                    aAttributes.push(new DOMAttribute({
                        name: sKey,
                        value: oValue
                    }));
                    delete mSettings[sKey];
                }
            });
        } else {
            Log.warning('DOMElement#' + this.getId() + ': custom attributes in settings will be ignored since attributes are provided!');
        }
    }
    Control.prototype.applySettings.apply(this, arguments);
};
DOMElement.prototype.exit = DOMElement.prototype.onBeforeRendering = function () {
    var sTag = this.getTag().toLowerCase();
    if (sTag === 'input' || sTag === 'textarea' || sTag === 'select') {
        this.$().off('change');
    }
};
DOMElement.prototype.onAfterRendering = function () {
    var sTag = this.getTag().toLowerCase();
    if (sTag === 'input' || sTag === 'textarea' || sTag === 'select') {
        this.$().on('change', jQuery.proxy(this.oninputchange, this));
    }
};
DOMElement.prototype.oninputchange = function (oEvent) {
    var sTag = this.getTag().toLowerCase();
    if (sTag === 'input') {
        var sValue = this.$().val();
        this.getAttributes().forEach(function (oAttribute) {
            if (oAttribute.getName().toLowerCase() === 'value') {
                oAttribute.setValue(sValue);
            }
        });
    } else if (sTag === 'textarea') {
        var sText = this.$().val();
        this.setText(sText);
    } else if (sTag === 'select') {
        var sText = '';
        this.$().find('select option:selected').each(function () {
            sText += jQuery(this).text() + ' ';
        });
        this.setText(sText);
    }
};
DOMElement.prototype.attr = function (sKey, sValue) {
    var aAttributes = this.getAttributes(), oAttribute;
    aAttributes.forEach(function (oValue) {
        var sName = oValue.getName();
        if (sName.toLowerCase() === sKey) {
            oAttribute = oValue;
            return false;
        }
    });
    if (sValue === undefined) {
        return oAttribute && oAttribute.getValue();
    } else {
        if (oAttribute) {
            if (sValue === null) {
                this.removeAttribute(oAttribute);
            } else {
                oAttribute.setValue(sValue);
            }
        } else {
            if (sValue !== null) {
                this.addAttribute(new DOMAttribute({
                    name: sKey,
                    value: sValue
                }));
            }
        }
        return this;
    }
};
DOMElement.prototype.removeAttr = function (sKey) {
    this.attr(sKey, null);
    return this;
};
DOMElement.prototype.setText = function (sText) {
    this.setProperty('text', sText, true);
    var $this = this.$();
    if ($this.length > 0) {
        var sTag = this.getTag().toLowerCase();
        if (sTag === 'textarea') {
            $this.val(this.getProperty('text'));
        } else {
            $this.text(this.getProperty('text'));
        }
    }
    return this;
};
export default DOMElement;