import Control from '../Control.js';
import DeclarativeSupport from '../DeclarativeSupport.js';
import library from '../library.js';
import UIArea from '../UIArea.js';
import DOMElement from './DOMElement.js';
import Template from './Template.js';
import TemplateControlRenderer from './TemplateControlRenderer.js';
import capitalize from '../../../base/strings/capitalize.js';
import hyphenate from '../../../base/strings/hyphenate.js';
import Log from '../../../base/Log.js';
import jQuery from '../../thirdparty/jquery.js';
var TemplateControl = Control.extend('sap.ui.core.tmpl.TemplateControl', {
    metadata: {
        library: 'sap.ui.core',
        properties: {
            context: {
                type: 'object',
                group: 'Data',
                defaultValue: null
            }
        },
        aggregations: {
            controls: {
                type: 'sap.ui.core.Control',
                multiple: true,
                singularName: 'control',
                visibility: 'hidden'
            }
        },
        associations: {
            template: {
                type: 'sap.ui.core.tmpl.Template',
                multiple: false
            }
        },
        events: {
            afterRendering: {},
            beforeRendering: {}
        }
    }
});
TemplateControl.prototype.init = function () {
    this._aBindingInfos = [];
};
TemplateControl.prototype.isInline = function () {
    var bInline = false, oParent = this.getParent();
    if (oParent instanceof UIArea && jQuery(oParent.getRootNode()).attr('id') === this.getId()) {
        bInline = true;
    }
    return bInline;
};
TemplateControl.prototype.placeAt = function (oRef, oPosition) {
    var bInline = this.isInline();
    var $this = this.$(), oUIArea = this.getUIArea();
    Control.prototype.placeAt.apply(this, arguments);
    if (bInline && $this.length === 1) {
        $this.remove();
        oUIArea.destroyContent();
    }
};
TemplateControl.prototype.getTemplateRenderer = function () {
    return this.fnRenderer;
};
TemplateControl.prototype.setTemplateRenderer = function (fnRenderer) {
    this.fnRenderer = fnRenderer;
    return this;
};
TemplateControl.prototype._cleanup = function () {
    this.destroyAggregation('controls');
    this._aBindingInfos.forEach(function (oBindingInfo) {
        var oBinding = oBindingInfo.binding;
        if (oBinding) {
            oBinding.detachChange(oBindingInfo.changeHandler);
            oBinding.destroy();
        }
    });
    this._aBindingInfos = [];
};
TemplateControl.prototype._compile = function () {
    var oTemplate = sap.ui.getWCCore().byId(this.getTemplate()), bDeclarativeSupport = oTemplate && oTemplate.getDeclarativeSupport();
    if (bDeclarativeSupport) {
        var that = this;
        setTimeout(function () {
            DeclarativeSupport.compile(that.getDomRef());
        });
    }
};
TemplateControl.prototype.exit = function () {
    this._cleanup();
};
TemplateControl.prototype.onBeforeRendering = function () {
    this.fireBeforeRendering();
    this._cleanup();
};
TemplateControl.prototype.onAfterRendering = function () {
    this.fireAfterRendering();
};
TemplateControl.prototype.clone = function () {
    var oClone = Control.prototype.clone.apply(this, arguments);
    oClone.fnRenderer = this.fnRenderer;
    return oClone;
};
TemplateControl.prototype.updateBindings = function (bUpdateAll, sModelName) {
    Control.prototype.updateBindings.apply(this, arguments);
    if (this.getDomRef()) {
        this.invalidate();
    }
};
TemplateControl.prototype.bind = function (sPath, sType) {
    var oPathInfo = Template.parsePath(sPath), oModel = this.getModel(oPathInfo.model), sPath = oPathInfo.path, sModelFunc = sType ? 'bind' + capitalize(sType) : 'bindProperty', oBinding = oModel && oModel[sModelFunc](sPath), oBindingInfo = {
            binding: oBinding,
            path: oPathInfo.path,
            model: oPathInfo.model
        };
    if (oBinding) {
        oBindingInfo.changeHandler = function () {
            Log.debug('TemplateControl#' + this.getId() + ': ' + sType + ' binding changed for path "' + sPath + '"');
            this.invalidate();
        }.bind(this);
        oBinding.attachChange(oBindingInfo.changeHandler);
    }
    this._aBindingInfos.push(oBindingInfo);
    return oBinding;
};
TemplateControl.prototype.calculatePath = function (sPath, sType) {
    var oBindingContext = this.getBindingContext(), sBindingContextPath = oBindingContext && oBindingContext.getPath();
    if (sPath && sBindingContextPath && !sPath.startsWith('/')) {
        if (!sBindingContextPath.endsWith('/')) {
            sBindingContextPath += '/';
        }
        sPath = sBindingContextPath + sPath;
    }
    return sPath;
};
TemplateControl.prototype.bindProp = function (sPath) {
    var oBinding = this.bind(this.calculatePath(sPath), 'property');
    return oBinding && oBinding.getExternalValue();
};
TemplateControl.prototype.bindList = function (sPath) {
    var oBinding = this.bind(this.calculatePath(sPath), 'list'), oModel = oBinding && oBinding.getModel(), sPath = oBinding && oBinding.getPath();
    return oBinding && oModel.getProperty(sPath);
};
TemplateControl.prototype.createDOMElement = function (mSettings, sParentPath, bDoNotAdd) {
    var oElement = new DOMElement(mSettings);
    if (sParentPath) {
        oElement.bindObject(sParentPath);
    }
    if (!bDoNotAdd) {
        this.addAggregation('controls', oElement);
    }
    return oElement;
};
TemplateControl.prototype.createControl = function (mSettings, sParentPath, bDoNotAdd, oView) {
    var mHTMLSettings = {};
    jQuery.each(mSettings, function (sKey, oValue) {
        mHTMLSettings['data-' + hyphenate(sKey)] = oValue;
    });
    var $control = jQuery('<div/>', mHTMLSettings);
    var oControl = DeclarativeSupport._createControl($control.get(0), oView);
    if (sParentPath) {
        oControl.bindObject(sParentPath);
    }
    if (!bDoNotAdd) {
        this.addAggregation('controls', oControl);
    }
    return oControl;
};
export default TemplateControl;