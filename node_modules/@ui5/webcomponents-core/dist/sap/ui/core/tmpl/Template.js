import ManagedObject from '../../base/ManagedObject.js';
import BindingParser from '../../base/BindingParser.js';
import Control from '../Control.js';
import RenderManager from '../RenderManager.js';
import ObjectPath from '../../../base/util/ObjectPath.js';
import Log from '../../../base/Log.js';
import assert from '../../../base/assert.js';
import jQuery from '../../thirdparty/jquery.js';
var Template = ManagedObject.extend('sap.ui.core.tmpl.Template', {
    constructor: function (sId, mSettings) {
        ManagedObject.apply(this, arguments);
    },
    metadata: {
        stereotype: 'template',
        'abstract': true,
        library: 'sap.ui.core',
        properties: {
            'content': {
                type: 'string',
                group: 'Data',
                defaultValue: null
            }
        },
        publicMethods: [
            'declareControl',
            'createControl',
            'placeAt',
            'createMetadata',
            'createRenderer'
        ]
    }
});
var mTemplates = {};
Template.prototype.register = function () {
    var sId = this.getId(), oOldTemplate = mTemplates[sId], sMsg;
    if (oOldTemplate && this !== oOldTemplate) {
        sMsg = 'adding template with duplicate id \'' + sId + '\'';
        Log.error(sMsg);
        throw new Error('Error: ' + sMsg);
    }
    mTemplates[sId] = this;
};
Template.prototype.deregister = function () {
    delete mTemplates[this.getId()];
};
Template.byId = function (sId) {
    return mTemplates[sId];
};
Template.prototype.getInterface = function () {
    return this;
};
Template._mSupportedTypes = {};
Template.registerType = function (sType, sClass) {
    Template._mSupportedTypes[sType] = sClass;
};
Template.unregisterType = function (sType) {
    delete Template._mSupportedTypes[sType];
};
Template.parsePath = function (sPath) {
    var sModelName, iSeparatorPos = sPath.indexOf('>');
    if (iSeparatorPos > 0) {
        sModelName = sPath.substr(0, iSeparatorPos);
        sPath = sPath.substr(iSeparatorPos + 1);
    }
    return {
        path: sPath,
        model: sModelName
    };
};
Template.prototype.init = function (mSettings, oScope) {
    if (this.getMetadata().getName() === 'sap.ui.core.tmpl.Template') {
        throw new Error('The class \'sap.ui.core.tmpl.Template\' is abstract and must not be instantiated!');
    }
    if (ManagedObject.bindingParser === BindingParser.complexParser) {
        Template.prototype.extractBindingInfo = function (oValue, bIgnoreObjects, oScope) {
            ManagedObject.bindingParser = BindingParser.simpleParser;
            var oReturnValue = Control.prototype.extractBindingInfo.apply(this, arguments);
            ManagedObject.bindingParser = BindingParser.complexParser;
            return oReturnValue;
        };
    }
};
Template.prototype.declareControl = function (sControl) {
    assert(!!sControl, 'A fully qualified name must be specified!');
    if (sControl) {
        var oMetadata = this.createMetadata(), fnRenderer = this.createRenderer(), that = this;
        var TemplateControl = sap.ui.requireSync('sap/ui/core/tmpl/TemplateControl');
        TemplateControl.extend(sControl, {
            metadata: oMetadata,
            init: function () {
                TemplateControl.prototype.init.apply(this, arguments);
                this.setTemplate(that);
            },
            renderer: {
                renderTemplate: fnRenderer,
                hasControlData: oMetadata._hasControlData
            }
        });
        return ObjectPath.get(sControl || '');
    }
};
Template.prototype.createControl = function (sId, oContext, oView) {
    var TemplateControl = sap.ui.requireSync('sap/ui/core/tmpl/TemplateControl');
    var oControl = new TemplateControl({
        id: sId,
        template: this,
        context: oContext
    });
    oControl.setTemplateRenderer(this.createRenderer(oView));
    return oControl;
};
Template.prototype.placeAt = function (oRef, oContext, vPosition, bInline) {
    if (typeof oContext === 'string' || typeof oContext === 'number') {
        vPosition = oContext;
        oContext = undefined;
    }
    var sId;
    if (!(oRef instanceof Control) && bInline) {
        var $this = typeof oRef === 'string' ? jQuery(document.getElementById(oRef)) : jQuery(oRef);
        if ($this.length > 0) {
            sId = $this.attr('id');
            oRef = $this.get(0);
            var sContext = $this.attr('data-context');
            oContext = oContext || sContext && jQuery.parseJSON(sContext);
            RenderManager.markInlineTemplate($this);
        }
    }
    var oControl = this.createControl(sId, oContext);
    oControl.placeAt(oRef, vPosition);
    return oControl;
};
Template.prototype.createMetadata = function () {
    Log.error('The function createMetadata is an abstract function which needs to be implemented by subclasses.');
};
Template.prototype.createRenderer = function () {
    Log.error('The function createRenderer is an abstract function which needs to be implemented by subclasses.');
};
sap.ui.template = function (oTemplate) {
    var fnLogDeprecation = function (sName) {
        Log.warning('The usage of Template Views is deprecated since 1.56. Please make use of the asynchronous create functions of the different view classes, e.g. XMLView.create()', 'Deprecation', null, function () {
            return {
                type: 'sap.ui.template',
                name: sName
            };
        });
    };
    if (!oTemplate) {
        var aTemplates = [];
        jQuery.each(Template._mSupportedTypes, function (sType, sClass) {
            jQuery('script[type=\'' + sType + '\'], [data-type=\'' + sType + '\']').each(function (iIndex, oElement) {
                aTemplates.push(sap.ui.template({
                    id: oElement.id,
                    domref: oElement,
                    type: sType,
                    _class: sClass
                }));
            });
        });
        return aTemplates;
    } else {
        if (typeof oTemplate === 'string') {
            return sap.ui.template({ id: oTemplate });
        } else if (oTemplate && oTemplate.tagName && oTemplate.nodeName && oTemplate.ownerDocument && oTemplate.nodeType === 1) {
            return sap.ui.template({
                id: oTemplate.id,
                domref: oTemplate
            });
        }
        oTemplate = jQuery.extend({ type: Template.DEFAULT_TEMPLATE }, oTemplate);
        fnLogDeprecation(oTemplate.id);
        var sId, sType, sControl, sContent, sController = false, bLoadTemplate = typeof oTemplate.src === 'string', bInline = false;
        if (bLoadTemplate) {
            jQuery.ajax({
                url: oTemplate.src,
                dataType: 'text',
                async: false,
                success: function (data) {
                    sId = oTemplate.id;
                    sType = oTemplate.type;
                    sControl = oTemplate.control;
                    sContent = data;
                    var rTmplInfo = /^<!--\sUI5:Template\stype=([a-z\/\-]*)\s(?:controller=([A-Za-z.]*)\s)?-->/, aTmplInfo = sContent.match(rTmplInfo);
                    if (aTmplInfo) {
                        sType = aTmplInfo[1];
                        if (aTmplInfo.length == 3) {
                            sController = aTmplInfo[2];
                        }
                        sContent = sContent.substr(aTmplInfo[0].length);
                    }
                },
                error: function () {
                    throw new Error('The template could not be loaded from ' + oTemplate.src + '!');
                }
            });
        } else {
            var oElement = oTemplate.domref || (oTemplate.id ? window.document.getElementById(oTemplate.id) : null), $element = jQuery(oElement);
            bInline = false;
            sId = oTemplate.id || oElement && oElement.id;
            sType = $element.attr('type') || oTemplate.type;
            sControl = $element.attr('data-control') || oTemplate.control;
            if (sId) {
                var theTemplate = sap.ui.getWCCore().getTemplate(sId);
                if (!theTemplate instanceof Template) {
                    throw new Error('Object for id "' + sId + '" is no sap.ui.core.tmpl.Template!');
                } else {
                    if (theTemplate) {
                        return theTemplate;
                    }
                }
            }
            if ($element.length === 0) {
                throw new Error('DOM element for the Template with the id "' + sId + '" not found!');
            }
            sContent = $element.html();
            var sTagName = oElement.tagName.toLowerCase();
            if (sTagName !== 'script') {
                bInline = $element.parents('body').length === 1;
            }
        }
        var sClass = oTemplate._class;
        if (!sClass) {
            sClass = Template._mSupportedTypes[sType];
            if (!sClass) {
                throw new Error('The type "' + sType + '" is not supported.');
            }
        }
        var fnClass = sap.ui.requireSync(sClass.replace(/\./g, '/'));
        fnClass = fnClass || ObjectPath.get(sClass || '');
        var oInstance = new fnClass({
            id: sId,
            content: sContent
        });
        if (sControl) {
            oInstance.declareControl(sControl);
        }
        if (sController) {
            oInstance._sControllerName = sController;
        }
        if (bInline) {
            oInstance.placeAt(sId, oTemplate.context, undefined, true);
        }
        return oInstance;
    }
};
Template.DEFAULT_TEMPLATE = 'text/x-handlebars-template';
Template.registerType(Template.DEFAULT_TEMPLATE, 'sap.ui.core.tmpl.HandlebarsTemplate');
export default Template;