import jQuery from '../thirdparty/jquery.js';
import ManagedObject from '../base/ManagedObject.js';
import Element from './Element.js';
import DeclarativeSupport from './DeclarativeSupport.js';
import XMLTemplateProcessor from './XMLTemplateProcessor.js';
import Log from '../../base/Log.js';
import LoaderExtensions from '../../base/util/LoaderExtensions.js';
import merge from '../../base/util/merge.js';
var mRegistry = {}, mTypes = {};
var Fragment = ManagedObject.extend('sap.ui.core.Fragment', {
    metadata: {
        properties: { type: 'string' },
        specialSettings: {
            fragmentName: 'string',
            fragmentContent: 'any',
            containingView: {
                type: 'sap.ui.core.mvc.View',
                visibility: 'hidden'
            },
            oController: {
                type: 'sap.ui.core.mvc.Controller',
                visibility: 'hidden'
            },
            sId: {
                type: 'sap.ui.core.ID',
                visibility: 'hidden'
            },
            processingMode: {
                type: 'string',
                visibility: 'hidden'
            }
        }
    },
    constructor: function (sId, mSettings) {
        ManagedObject.apply(this, arguments);
        if (this._aContent && this._aContent.length == 1) {
            return this._aContent[0];
        } else {
            return this._aContent;
        }
    }
});
Fragment.registerType = function (sType, oFragmentImpl) {
    if (!typeof sType === 'string') {
        Log.error('Ignoring non-string Fragment type: ' + sType);
        return;
    }
    if (mTypes[sType]) {
        Log.warning('sap.ui.core.Fragment.registerType(): Fragment type \'' + sType + '\' is already defined. Overriding this type now!');
    }
    mTypes[sType] = oFragmentImpl;
};
Fragment.prototype._initCompositeSupport = function (mSettings) {
    if (!mSettings) {
        throw new Error('Settings must be set');
    }
    if (!(mSettings.fragmentName || mSettings.fragmentContent)) {
        throw new Error('Please provide a fragment name');
    }
    if (mSettings.oController) {
        this.oController = mSettings.oController;
    }
    this._sExplicitId = mSettings.sId || mSettings.id;
    this._sFragmentName = mSettings.fragmentName;
    var oFragmentImpl = mTypes[mSettings.type];
    if (oFragmentImpl) {
        oFragmentImpl.init.apply(this, [mSettings]);
    } else {
        throw new Error('No type for the fragment has been specified: ' + mSettings.type);
    }
};
Fragment.prototype.getFragmentName = function () {
    return this._sFragmentName;
};
Fragment.prototype.getController = function () {
    return this.oController;
};
Fragment.byId = function (sFragmentId, sId) {
    if (!(typeof sFragmentId === 'string' && typeof sId === 'string')) {
        Log.error('sap.ui.core.Fragment.byId: two strings must be given as parameters, but are: ' + sFragmentId + ' and ' + sId);
        return undefined;
    }
    return sap.ui.getWCCore().byId(sFragmentId + '--' + sId);
};
Fragment.createId = function (sFragmentId, sId) {
    if (!(typeof sFragmentId === 'string' && typeof sId === 'string')) {
        Log.error('sap.ui.core.Fragment.createId: two strings must be given as parameters, but are: ' + sFragmentId + ' and ' + sId);
        return undefined;
    }
    return sFragmentId + '--' + sId;
};
Fragment.prototype.createId = function (sId) {
    var id = this._sExplicitId ? this._sExplicitId + '--' + sId : sId;
    if (this._oContainingView && this._oContainingView != this) {
        id = this._oContainingView.createId(id);
    }
    return id;
};
Fragment.prototype.isSubView = function () {
    return true;
};
sap.ui.fragment = function (sName, sType, oController) {
    var sFragmentType;
    if (typeof sType === 'string') {
        sFragmentType = sType.toLowerCase();
    } else if (typeof sType === 'object' && typeof sType.fragmentName === 'string') {
        sFragmentType = sType.fragmentName.toLowerCase();
    } else {
        sFragmentType = '';
    }
    Log.info('Do not use deprecated factory function \'sap.ui.' + sFragmentType + 'fragment\'. Require \'sap/ui/core/Fragment\' and use \'load()\' instead', 'sap.ui.' + sFragmentType + 'fragment', null, function () {
        return {
            type: 'sap.ui.' + sFragmentType + 'fragment',
            name: sFragmentType ? sName + '.fragment.' + sFragmentType : sName
        };
    });
    return fragmentFactory(sName, sType, oController);
};
function fragmentFactory(vName, vType, oController) {
    var mSettings = {};
    if (typeof vName === 'string') {
        mSettings.fragmentName = vName;
        mSettings.oController = oController;
        mSettings.type = vType;
    } else if (typeof vName === 'object') {
        mSettings = vName;
        if (vType) {
            mSettings.oController = vType;
        }
    } else {
        Log.error('sap.ui.fragment() must be called with Fragment name or config object as first parameter, but is: ' + vName);
    }
    return new Fragment(mSettings);
}
Fragment.load = function (mOptions) {
    var mParameters = Object.assign({}, mOptions);
    mParameters.type = mParameters.type || 'XML';
    mParameters.fragmentName = mParameters.name;
    mParameters.fragmentContent = mParameters.definition;
    mParameters.oController = mParameters.controller;
    delete mParameters.name;
    delete mParameters.definition;
    delete mParameters.controller;
    return Promise.resolve(fragmentFactory(mParameters));
};
sap.ui.xmlfragment = function (sId, vFragment, oController) {
    if (typeof sId === 'string') {
        if (typeof vFragment === 'string') {
            return sap.ui.fragment({
                fragmentName: vFragment,
                sId: sId,
                type: 'XML'
            }, oController);
        } else {
            return sap.ui.fragment(sId, 'XML', vFragment);
        }
    } else {
        sId.type = 'XML';
        return sap.ui.fragment(sId, vFragment);
    }
};
sap.ui.jsfragment = function (sName, oFragmentDefinition) {
    if (typeof sName === 'string' && typeof oFragmentDefinition === 'object') {
        if (oFragmentDefinition.createContent) {
            mRegistry[sName] = oFragmentDefinition;
            sap.ui.loader._.declareModule(sName.replace(/\./g, '/') + '.fragment.js');
        } else {
            return sap.ui.fragment(sName, 'JS', oFragmentDefinition);
        }
    } else if (typeof sName === 'string' && oFragmentDefinition === undefined) {
        return sap.ui.fragment(sName, 'JS');
    } else {
        if (typeof sName === 'object') {
            sName.type = 'JS';
            return sap.ui.fragment(sName, oFragmentDefinition);
        } else if (arguments && arguments.length >= 3) {
            return sap.ui.fragment({
                id: sName,
                fragmentName: oFragmentDefinition,
                type: 'JS'
            }, arguments[2]);
        } else {
            Log.error('sap.ui.jsfragment() was called with wrong parameter set: ' + sName + ' + ' + oFragmentDefinition);
        }
    }
};
sap.ui.htmlfragment = function (sId, vFragment, oController) {
    if (typeof sId === 'string') {
        if (typeof vFragment === 'string') {
            return sap.ui.fragment({
                fragmentName: vFragment,
                sId: sId,
                type: 'HTML'
            }, oController);
        } else {
            return sap.ui.fragment(sId, 'HTML', vFragment);
        }
    } else {
        sId.type = 'HTML';
        return sap.ui.fragment(sId, vFragment);
    }
};
Fragment.registerType('XML', {
    init: function (mSettings) {
        if (mSettings.fragmentContent) {
            if (typeof mSettings.fragmentContent === 'string') {
                this._xContent = jQuery.parseXML(mSettings.fragmentContent).documentElement;
            } else {
                this._xContent = mSettings.fragmentContent;
            }
        } else {
            this._xContent = XMLTemplateProcessor.loadTemplate(mSettings.fragmentName, 'fragment');
        }
        this._oContainingView = this._sExplicitId ? this : mSettings.containingView || this;
        if (this._oContainingView === this) {
            this._oContainingView.oController = mSettings.containingView && mSettings.containingView.oController || mSettings.oController;
        }
        var that = this;
        that._sProcessingMode = mSettings.processingMode;
        ManagedObject.runWithPreprocessors(function () {
            that._aContent = XMLTemplateProcessor.parseTemplate(that._xContent, that);
            if (that._aContent && that._aContent.length && mSettings.objectBindings) {
                that._aContent.forEach(function (oContent, iIndex) {
                    if (oContent instanceof Element) {
                        for (var sModelName in mSettings.objectBindings) {
                            oContent.bindObject(mSettings.objectBindings[sModelName]);
                        }
                    }
                });
            }
        }, { settings: that._oContainingView._fnSettingsPreprocessor });
    }
});
Fragment.registerType('JS', {
    init: function (mSettings) {
        if (!mRegistry[mSettings.fragmentName]) {
            sap.ui.requireSync(mSettings.fragmentName.replace(/\./g, '/') + '.fragment');
        }
        merge(this, mRegistry[mSettings.fragmentName]);
        this._oContainingView = mSettings.containingView || this;
        var that = this;
        ManagedObject.runWithPreprocessors(function () {
            var content = that.createContent(mSettings.oController || that._oContainingView.oController);
            that._aContent = [];
            that._aContent = that._aContent.concat(content);
        }, { settings: that._oContainingView._fnSettingsPreprocessor });
    }
});
(function () {
    var _mHTMLTemplates = {};
    var _getHTMLTemplate = function (sTemplateName) {
        var sUrl = sap.ui.require.toUrl(sTemplateName.replace(/\./g, '/')) + '.fragment.html';
        var sHTML = _mHTMLTemplates[sUrl];
        var sResourceName;
        if (!sHTML) {
            sResourceName = sTemplateName.replace(/\./g, '/') + '.fragment.html';
            sHTML = LoaderExtensions.loadResource(sResourceName);
            _mHTMLTemplates[sUrl] = sHTML;
        }
        return sHTML;
    };
    Fragment.registerType('HTML', {
        init: function (mSettings) {
            this._aContent = [];
            this.getContent = function () {
                return this._aContent;
            };
            this.addContent = function (oControl) {
                this._aContent.push(oControl);
            };
            this._oContainingView = mSettings.containingView || this;
            this._sProcessingMode = mSettings.processingMode;
            var vHTML = mSettings.fragmentContent || _getHTMLTemplate(mSettings.fragmentName);
            this._oTemplate = document.createElement('div');
            if (typeof vHTML === 'string') {
                this._oTemplate.innerHTML = vHTML;
            } else {
                var oNodeList = vHTML;
                var oFragment = document.createDocumentFragment();
                for (var i = 0; i < oNodeList.length; i++) {
                    oFragment.appendChild(oNodeList.item(i));
                }
                this._oTemplate.appendChild(oFragment);
            }
            var oMetaElement = this._oTemplate.getElementsByTagName('template')[0];
            var oProperties = this.getMetadata().getAllProperties();
            if (oMetaElement) {
                var that = this;
                jQuery.each(oMetaElement.attributes, function (iIndex, oAttr) {
                    var sName = DeclarativeSupport.convertAttributeToSettingName(oAttr.name, that.getId());
                    var sValue = oAttr.value;
                    var oProperty = oProperties[sName];
                    if (!mSettings[sName]) {
                        if (oProperty) {
                            mSettings[sName] = DeclarativeSupport.convertValueToType(DeclarativeSupport.getPropertyDataType(oProperty), sValue);
                        } else if (sap.ui.core.mvc.HTMLView._mAllowedSettings[sName]) {
                            mSettings[sName] = sValue;
                        }
                    }
                });
                this._oTemplate = oMetaElement;
            }
            if (this._oTemplate.content) {
                var oFragment = this._oTemplate.content;
                this._oTemplate = document.createElement('div');
                this._oTemplate.appendChild(oFragment);
            }
            var that = this;
            ManagedObject.runWithPreprocessors(function () {
                DeclarativeSupport.compile(that._oTemplate, that);
                var content = that.getContent();
                if (content && content.length === 1) {
                    that._aContent = [content[0]];
                }
            }, { settings: that._oContainingView._fnSettingsPreprocessor });
        }
    });
}());
export default Fragment;