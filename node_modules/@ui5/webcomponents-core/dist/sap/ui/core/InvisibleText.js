import Control from './Control.js';
import library from './library.js';
import Log from '../../base/Log.js';
import encodeXML from '../../base/security/encodeXML.js';
var InvisibleText = Control.extend('sap.ui.core.InvisibleText', {
    metadata: {
        library: 'sap.ui.core',
        publicMethods: ['toStatic'],
        properties: {
            text: {
                type: 'string',
                defaultValue: ''
            }
        }
    },
    renderer: function (oRm, oControl) {
        oRm.write('<span');
        oRm.writeControlData(oControl);
        oRm.addClass('sapUiInvisibleText');
        oRm.writeClasses();
        oRm.writeAttribute('aria-hidden', 'true');
        oRm.write('>');
        oRm.writeEscaped(oControl.getText() || '');
        oRm.write('</span>');
    }
});
function makeNotSupported(what) {
    return function () {
        Log.warning(what + ' is not supported by control sap.ui.core.InvisibleText.');
        return this;
    };
}
InvisibleText.prototype.setBusy = makeNotSupported('Property busy');
InvisibleText.prototype.setBusyIndicatorDelay = makeNotSupported('Property busy');
InvisibleText.prototype.setBusyIndicatorSize = makeNotSupported('Property busy');
InvisibleText.prototype.setVisible = makeNotSupported('Property visible');
InvisibleText.prototype.setTooltip = makeNotSupported('Aggregation tooltip');
InvisibleText.prototype.setText = function (sText) {
    this.setProperty('text', sText, true);
    this.$().html(encodeXML(this.getText() || ''));
    return this;
};
InvisibleText.prototype.toStatic = function () {
    var oCore = sap.ui.getWCCore();
    try {
        var oStatic = oCore.getStaticAreaRef();
        var oRM = oCore.createRenderManager();
        oRM.render(this, oStatic);
        oRM.destroy();
    } catch (e) {
        this.placeAt('sap-ui-static');
    }
    return this;
};
var mTextIds = Object.create(null);
InvisibleText.getStaticId = function (sLibrary, sTextKey) {
    var sTextId = '', sKey, oBundle, oText;
    if (sap.ui.getWCCore().getConfiguration().getAccessibility() && sTextKey) {
        sKey = sLibrary + '|' + sTextKey;
        sTextId = mTextIds[sKey];
        if (sTextId == null) {
            oBundle = sap.ui.getWCCore().getLibraryResourceBundle(sLibrary);
            oText = new InvisibleText().setText(oBundle.getText(sTextKey));
            oText.toStatic();
            sTextId = mTextIds[sKey] = oText.getId();
        }
    }
    return sTextId;
};
sap.ui.getWCCore().attachLocalizationChanged(function (oEvent) {
    var oCore = sap.ui.getWCCore(), sKey, p, oBundle, oText;
    for (sKey in mTextIds) {
        p = sKey.indexOf('|');
        oBundle = oCore.getLibraryResourceBundle(sKey.slice(0, p));
        oText = oCore.byId(mTextIds[sKey]);
        oText && oText.setText(oBundle.getText(sKey.slice(p + 1)));
    }
});
export default InvisibleText;