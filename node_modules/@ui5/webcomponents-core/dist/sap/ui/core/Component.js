import jQuery from '../thirdparty/jquery.js';
import Manifest from './Manifest.js';
import ComponentMetadata from './ComponentMetadata.js';
import Core from './Core.js';
import merge from '../../base/util/merge.js';
import ManagedObject from '../base/ManagedObject.js';
import URI from '../thirdparty/URI.js';
import Interaction from '../performance/trace/Interaction.js';
import assert from '../../base/assert.js';
import Log from '../../base/Log.js';
import ObjectPath from '../../base/util/ObjectPath.js';
import UriParameters from '../../base/util/UriParameters.js';
import isPlainObject from '../../base/util/isPlainObject.js';
import LoaderExtensions from '../../base/util/LoaderExtensions.js';
var ViewType = {
    JSON: 'JSON',
    XML: 'XML',
    HTML: 'HTML',
    JS: 'JS',
    Template: 'Template'
};
function addSapParams(oUri) {
    [
        'sap-client',
        'sap-server'
    ].forEach(function (sName) {
        if (!oUri.hasSearch(sName)) {
            var sValue = sap.ui.getWCCore().getConfiguration().getSAPParam(sName);
            if (sValue) {
                oUri.addSearch(sName, sValue);
            }
        }
    });
}
function mergeDefinitionSource(mDefinitions, mDefinitionSource, mSourceData, oSource) {
    if (mSourceData) {
        for (var sName in mDefinitions) {
            if (!mDefinitionSource[sName] && mSourceData[sName] && mSourceData[sName].uri) {
                mDefinitionSource[sName] = oSource;
            }
        }
    }
}
function getManifestEntry(oMetadata, oManifest, sKey, bMerged) {
    var oData = oManifest.getEntry(sKey);
    if (oData !== undefined && !isPlainObject(oData)) {
        return oData;
    }
    var oParent, oParentData;
    if (bMerged && (oParent = oMetadata.getParent()) instanceof ComponentMetadata) {
        oParentData = oParent.getManifestEntry(sKey, bMerged);
    }
    if (oParentData || oData) {
        oData = jQuery.extend(true, {}, oParentData, oData);
    }
    return oData;
}
function createMetadataProxy(oMetadata, oManifest) {
    var oMetadataProxy = Object.create(Object.getPrototypeOf(oMetadata));
    oMetadataProxy._oMetadata = oMetadata;
    oMetadataProxy._oManifest = oManifest;
    for (var m in oMetadata) {
        if (!/^(getManifest|getManifestObject|getManifestEntry|getMetadataVersion)$/.test(m) && typeof oMetadata[m] === 'function') {
            oMetadataProxy[m] = oMetadata[m].bind(oMetadata);
        }
    }
    oMetadataProxy.getManifest = function () {
        return oManifest && oManifest.getJson();
    };
    oMetadataProxy.getManifestObject = function () {
        return oManifest;
    };
    oMetadataProxy.getManifestEntry = function (sKey, bMerged) {
        return getManifestEntry(oMetadata, oManifest, sKey, bMerged);
    };
    oMetadataProxy.getMetadataVersion = function () {
        return 2;
    };
    return oMetadataProxy;
}
function runWithOwner(fn, sOwnerId, oThisArg) {
    assert(typeof fn === 'function', 'fn must be a function');
    var oldOwnerId = ManagedObject._sOwnerId;
    try {
        ManagedObject._sOwnerId = sOwnerId;
        return fn.call(oThisArg);
    } finally {
        ManagedObject._sOwnerId = oldOwnerId;
    }
}
var Component = ManagedObject.extend('sap.ui.core.Component', {
    constructor: function (sId, mSettings) {
        var args = Array.prototype.slice.call(arguments);
        if (typeof sId !== 'string') {
            mSettings = sId;
            sId = undefined;
        }
        if (mSettings && typeof mSettings._metadataProxy === 'object') {
            this._oMetadataProxy = mSettings._metadataProxy;
            this._oManifest = mSettings._metadataProxy._oManifest;
            delete mSettings._metadataProxy;
            this.getMetadata = function () {
                return this._oMetadataProxy;
            };
        }
        if (mSettings && typeof mSettings._cacheTokens === 'object') {
            this._mCacheTokens = mSettings._cacheTokens;
            delete mSettings._cacheTokens;
        }
        if (mSettings && typeof mSettings._manifestModels === 'object') {
            this._mManifestModels = mSettings._manifestModels;
            delete mSettings._manifestModels;
        } else {
            this._mManifestModels = {};
        }
        this._mServices = {};
        ManagedObject.apply(this, args);
    },
    metadata: {
        stereotype: 'component',
        'abstract': true,
        specialSettings: { componentData: 'any' },
        version: '0.0',
        includes: [],
        dependencies: {
            libs: [],
            components: [],
            ui5version: ''
        },
        config: {},
        customizing: {},
        library: 'sap.ui.core'
    }
}, ComponentMetadata);
Component.prototype.getManifest = function () {
    if (!this._oManifest) {
        return this.getMetadata().getManifest();
    } else {
        return this._oManifest.getJson();
    }
};
Component.prototype.getManifestEntry = function (sKey) {
    return this._getManifestEntry(sKey);
};
Component.prototype._getManifestEntry = function (sKey, bMerged) {
    if (!this._oManifest) {
        return this.getMetadata().getManifestEntry(sKey, bMerged);
    } else {
        return getManifestEntry(this.getMetadata(), this._oManifest, sKey, bMerged);
    }
};
Component.prototype.getManifestObject = function () {
    if (!this._oManifest) {
        return this.getMetadata().getManifestObject();
    } else {
        return this._oManifest;
    }
};
Component.prototype._isVariant = function () {
    if (this._oManifest) {
        var sComponentName = this.getManifestEntry('/sap.ui5/componentName');
        return sComponentName && sComponentName !== this.getManifestEntry('/sap.app/id');
    } else {
        return false;
    }
};
Component.activateCustomizing = function (sComponentName) {
};
Component.deactivateCustomizing = function (sComponentName) {
};
Component.getOwnerIdFor = function (oObject) {
    assert(oObject instanceof ManagedObject, 'oObject must be given and must be a ManagedObject');
    var sOwnerId = oObject instanceof ManagedObject && oObject._sOwnerId;
    return sOwnerId || undefined;
};
Component.getOwnerComponentFor = function (oObject) {
    return Component.get(Component.getOwnerIdFor(oObject));
};
Component.prototype.runAsOwner = function (fn) {
    return runWithOwner(fn, this.getId());
};
Component.prototype.getInterface = function () {
    return this;
};
Component.prototype._initCompositeSupport = function (mSettings) {
    this.oComponentData = mSettings && mSettings.componentData;
    if (!this._isVariant()) {
        this.getMetadata().init();
    } else {
        this._oManifest.init(this);
        var sAppId = this._oManifest.getEntry('/sap.app/id');
        if (sAppId) {
            registerModulePath(sAppId, this._oManifest.resolveUri('./', 'manifest'));
        }
    }
    this.initComponentModels();
    if (this.onWindowError) {
        this._fnWindowErrorHandler = jQuery.proxy(function (oEvent) {
            var oError = oEvent.originalEvent;
            this.onWindowError(oError.message, oError.filename, oError.lineno);
        }, this);
        jQuery(window).bind('error', this._fnWindowErrorHandler);
    }
    if (this.onWindowBeforeUnload) {
        this._fnWindowBeforeUnloadHandler = jQuery.proxy(this.onWindowBeforeUnload, this);
        jQuery(window).bind('beforeunload', this._fnWindowBeforeUnloadHandler);
    }
    if (this.onWindowUnload) {
        this._fnWindowUnloadHandler = jQuery.proxy(this.onWindowUnload, this);
        jQuery(window).bind('unload', this._fnWindowUnloadHandler);
    }
};
Component.prototype.destroy = function () {
    for (var sLocalServiceAlias in this._mServices) {
        if (this._mServices[sLocalServiceAlias].instance) {
            this._mServices[sLocalServiceAlias].instance.destroy();
        }
    }
    delete this._mServices;
    for (var sModelName in this._mManifestModels) {
        this._mManifestModels[sModelName].destroy();
    }
    delete this._mManifestModels;
    if (this._fnWindowErrorHandler) {
        jQuery(window).unbind('error', this._fnWindowErrorHandler);
        delete this._fnWindowErrorHandler;
    }
    if (this._fnWindowBeforeUnloadHandler) {
        jQuery(window).unbind('beforeunload', this._fnWindowBeforeUnloadHandler);
        delete this._fnWindowBeforeUnloadHandler;
    }
    if (this._fnWindowUnloadHandler) {
        jQuery(window).unbind('unload', this._fnWindowUnloadHandler);
        delete this._fnWindowUnloadHandler;
    }
    if (this._oEventBus) {
        this._oEventBus.destroy();
        delete this._oEventBus;
    }
    ManagedObject.prototype.destroy.apply(this, arguments);
    sap.ui.getWCCore().getMessageManager().unregisterObject(this);
    if (!this._isVariant()) {
        this.getMetadata().exit();
    } else {
        this._oManifest.exit(this);
        delete this._oManifest;
    }
};
Component.prototype.getComponentData = function () {
    return this.oComponentData;
};
Component.prototype.getEventBus = function () {
    if (!this._oEventBus) {
        var sClassName = this.getMetadata().getName();
        Log.warning('Synchronous loading of EventBus, due to #getEventBus() call on Component \'' + sClassName + '\'.', 'SyncXHR', null, function () {
            return {
                type: 'SyncXHR',
                name: sClassName
            };
        });
        var EventBus = sap.ui.requireSync('sap/ui/core/EventBus');
        this._oEventBus = new EventBus();
    }
    return this._oEventBus;
};
Component.prototype.initComponentModels = function () {
    var oMetadata = this.getMetadata();
    if (oMetadata.isBaseClass()) {
        return;
    }
    var oManifestDataSources = this._getManifestEntry('/sap.app/dataSources', true) || {};
    var oManifestModels = this._getManifestEntry('/sap.ui5/models', true) || {};
    this._initComponentModels(oManifestModels, oManifestDataSources, this._mCacheTokens);
};
Component.prototype._initComponentModels = function (mModels, mDataSources, mCacheTokens) {
    var mAllModelConfigurations = Component._createManifestModelConfigurations({
        models: mModels,
        dataSources: mDataSources,
        component: this,
        mergeParent: true,
        cacheTokens: mCacheTokens
    });
    if (!mAllModelConfigurations) {
        return;
    }
    var mModelConfigurations = {};
    for (var sModelName in mAllModelConfigurations) {
        if (!this._mManifestModels[sModelName]) {
            mModelConfigurations[sModelName] = mAllModelConfigurations[sModelName];
        }
    }
    var mCreatedModels = Component._createManifestModels(mModelConfigurations, this.toString());
    for (var sModelName in mCreatedModels) {
        this._mManifestModels[sModelName] = mCreatedModels[sModelName];
    }
    for (var sModelName in this._mManifestModels) {
        var oModel = this._mManifestModels[sModelName];
        this.setModel(oModel, sModelName || undefined);
    }
};
Component.prototype.getService = function (sLocalServiceAlias) {
    if (!this._mServices[sLocalServiceAlias]) {
        this._mServices[sLocalServiceAlias] = {};
        this._mServices[sLocalServiceAlias].promise = new Promise(function (fnResolve, fnReject) {
            sap.ui.require(['sap/ui/core/service/ServiceFactoryRegistry'], function (ServiceFactoryRegistry) {
                var oServiceManifestEntry = this.getManifestEntry('/sap.ui5/services/' + sLocalServiceAlias);
                var sServiceFactoryName = oServiceManifestEntry && oServiceManifestEntry.factoryName;
                if (!sServiceFactoryName) {
                    fnReject(new Error('Service ' + sLocalServiceAlias + ' not declared!'));
                    return;
                }
                var oServiceFactory = ServiceFactoryRegistry.get(sServiceFactoryName);
                if (oServiceFactory) {
                    oServiceFactory.createInstance({
                        scopeObject: this,
                        scopeType: 'component',
                        settings: oServiceManifestEntry.settings || {}
                    }).then(function (oServiceInstance) {
                        if (!this.bIsDestroyed) {
                            this._mServices[sLocalServiceAlias].instance = oServiceInstance;
                            this._mServices[sLocalServiceAlias].interface = oServiceInstance.getInterface();
                            fnResolve(this._mServices[sLocalServiceAlias].interface);
                        } else {
                            fnReject(new Error('Service ' + sLocalServiceAlias + ' could not be loaded as its Component was destroyed.'));
                        }
                    }.bind(this)).catch(fnReject);
                } else {
                    var sErrorMessage = 'The ServiceFactory ' + sServiceFactoryName + ' for Service ' + sLocalServiceAlias + ' not found in ServiceFactoryRegistry!';
                    var bOptional = this.getManifestEntry('/sap.ui5/services/' + sLocalServiceAlias + '/optional');
                    if (!bOptional) {
                        Log.error(sErrorMessage);
                    }
                    fnReject(new Error(sErrorMessage));
                }
            }.bind(this), fnReject);
        }.bind(this));
    }
    return this._mServices[sLocalServiceAlias].promise;
};
function activateServices(oComponent) {
    var oServices = oComponent.getManifestEntry('/sap.ui5/services');
    for (var sService in oServices) {
        if (oServices[sService].lazy === false) {
            oComponent.getService(sService);
        }
    }
}
Component.prototype.createComponent = function (vUsage) {
    assert(typeof vUsage === 'string' && vUsage || typeof vUsage === 'object' && typeof vUsage.usage === 'string' && vUsage.usage, 'vUsage either must be a non-empty string or an object with a non-empty usage id');
    var mConfig = { async: true };
    if (vUsage) {
        var sUsageId;
        if (typeof vUsage === 'object') {
            sUsageId = vUsage.usage;
            [
                'id',
                'async',
                'settings',
                'componentData'
            ].forEach(function (sName) {
                if (vUsage[sName] !== undefined) {
                    mConfig[sName] = vUsage[sName];
                }
            });
        } else if (typeof vUsage === 'string') {
            sUsageId = vUsage;
        }
        mConfig = this._enhanceWithUsageConfig(sUsageId, mConfig);
    }
    return Component._createComponent(mConfig, this);
};
Component.prototype._enhanceWithUsageConfig = function (sUsageId, mConfig) {
    var mUsageConfig = this.getManifestEntry('/sap.ui5/componentUsages/' + sUsageId);
    if (!mUsageConfig) {
        throw new Error('Component usage "' + sUsageId + '" not declared in Component "' + this.getManifestObject().getComponentName() + '"!');
    }
    return jQuery.extend(true, mUsageConfig, mConfig);
};
Component._createComponent = function (mConfig, oOwnerComponent) {
    function createComponent() {
        if (mConfig.async === true) {
            return Component.create(mConfig);
        } else {
            return sap.ui.component(mConfig);
        }
    }
    if (oOwnerComponent) {
        return oOwnerComponent.runAsOwner(createComponent);
    } else {
        return createComponent();
    }
};
Component._createManifestModelConfigurations = function (mOptions) {
    var oComponent = mOptions.component;
    var oManifest = mOptions.manifest || oComponent.getManifestObject();
    var bMergeParent = mOptions.mergeParent;
    var mCacheTokens = mOptions.cacheTokens || {};
    var sLogComponentName = oComponent ? oComponent.toString() : oManifest.getComponentName();
    var oConfig = sap.ui.getWCCore().getConfiguration();
    if (!mOptions.models) {
        return null;
    }
    var mConfig = {
        models: mOptions.models,
        dataSources: mOptions.dataSources || {},
        origin: {
            dataSources: {},
            models: {}
        }
    };
    if (oComponent && bMergeParent) {
        var oMeta = oComponent.getMetadata();
        while (oMeta instanceof ComponentMetadata) {
            var oCurrentManifest = oMeta.getManifestObject();
            var mCurrentDataSources = oMeta.getManifestEntry('/sap.app/dataSources');
            mergeDefinitionSource(mConfig.dataSources, mConfig.origin.dataSources, mCurrentDataSources, oCurrentManifest);
            var mCurrentModelConfigs = oMeta.getManifestEntry('/sap.ui5/models');
            mergeDefinitionSource(mConfig.models, mConfig.origin.models, mCurrentModelConfigs, oCurrentManifest);
            oMeta = oMeta.getParent();
        }
    }
    var mModelConfigurations = {};
    for (var sModelName in mConfig.models) {
        var oModelConfig = mConfig.models[sModelName];
        var bIsDataSourceUri = false;
        var mMetadataUrlParams = null;
        if (typeof oModelConfig === 'string') {
            oModelConfig = { dataSource: oModelConfig };
        }
        if (oModelConfig.dataSource) {
            var oDataSource = mConfig.dataSources && mConfig.dataSources[oModelConfig.dataSource];
            if (typeof oDataSource === 'object') {
                if (oDataSource.type === undefined) {
                    oDataSource.type = 'OData';
                }
                if (!oModelConfig.type) {
                    switch (oDataSource.type) {
                    case 'OData':
                        if (oDataSource.settings && oDataSource.settings.odataVersion === '4.0') {
                            oModelConfig.type = 'sap.ui.model.odata.v4.ODataModel';
                        } else {
                            oModelConfig.type = 'sap.ui.model.odata.v2.ODataModel';
                        }
                        break;
                    case 'JSON':
                        oModelConfig.type = 'sap.ui.model.json.JSONModel';
                        break;
                    case 'XML':
                        oModelConfig.type = 'sap.ui.model.xml.XMLModel';
                        break;
                    default:
                    }
                }
                if (oModelConfig.type === 'sap.ui.model.odata.v4.ODataModel' && oDataSource.settings && oDataSource.settings.odataVersion) {
                    oModelConfig.settings = oModelConfig.settings || {};
                    oModelConfig.settings.odataVersion = oDataSource.settings.odataVersion;
                }
                if (!oModelConfig.uri) {
                    oModelConfig.uri = oDataSource.uri;
                    bIsDataSourceUri = true;
                }
                if (oDataSource.type === 'OData' && oDataSource.settings && typeof oDataSource.settings.maxAge === 'number') {
                    oModelConfig.settings = oModelConfig.settings || {};
                    oModelConfig.settings.headers = oModelConfig.settings.headers || {};
                    oModelConfig.settings.headers['Cache-Control'] = 'max-age=' + oDataSource.settings.maxAge;
                }
                if (oDataSource.type === 'OData' && oDataSource.settings && oDataSource.settings.annotations) {
                    var aAnnotations = oDataSource.settings.annotations;
                    for (var i = 0; i < aAnnotations.length; i++) {
                        var oAnnotation = mConfig.dataSources[aAnnotations[i]];
                        if (!oAnnotation) {
                            Log.error('Component Manifest: ODataAnnotation "' + aAnnotations[i] + '" for dataSource "' + oModelConfig.dataSource + '" could not be found in manifest', '["sap.app"]["dataSources"]["' + aAnnotations[i] + '"]', sLogComponentName);
                            continue;
                        }
                        if (oAnnotation.type !== 'ODataAnnotation') {
                            Log.error('Component Manifest: dataSource "' + aAnnotations[i] + '" was expected to have type "ODataAnnotation" but was "' + oAnnotation.type + '"', '["sap.app"]["dataSources"]["' + aAnnotations[i] + '"]', sLogComponentName);
                            continue;
                        }
                        if (!oAnnotation.uri) {
                            Log.error('Component Manifest: Missing "uri" for ODataAnnotation "' + aAnnotations[i] + '"', '["sap.app"]["dataSources"]["' + aAnnotations[i] + '"]', sLogComponentName);
                            continue;
                        }
                        var oAnnotationUri = new URI(oAnnotation.uri);
                        if (oModelConfig.type === 'sap.ui.model.odata.v2.ODataModel') {
                            [
                                'sap-language',
                                'sap-client'
                            ].forEach(function (sName) {
                                if (!oAnnotationUri.hasQuery(sName) && oConfig.getSAPParam(sName)) {
                                    oAnnotationUri.setQuery(sName, oConfig.getSAPParam(sName));
                                }
                            });
                            var sCacheToken = mCacheTokens.dataSources && mCacheTokens.dataSources[oAnnotation.uri];
                            if (sCacheToken) {
                                var applyAnnotationCacheToken = function () {
                                    if (!oAnnotationUri.hasQuery('sap-language')) {
                                        Log.warning('Component Manifest: Ignoring provided "sap-context-token=' + sCacheToken + '" for ODataAnnotation "' + aAnnotations[i] + '" (' + oAnnotationUri.toString() + '). ' + 'Missing "sap-language" URI parameter', '["sap.app"]["dataSources"]["' + aAnnotations[i] + '"]', sLogComponentName);
                                        return;
                                    }
                                    if (!oAnnotationUri.hasQuery('sap-client')) {
                                        Log.warning('Component Manifest: Ignoring provided "sap-context-token=' + sCacheToken + '" for ODataAnnotation "' + aAnnotations[i] + '" (' + oAnnotationUri.toString() + '). ' + 'Missing "sap-client" URI parameter', '["sap.app"]["dataSources"]["' + aAnnotations[i] + '"]', sLogComponentName);
                                        return;
                                    }
                                    if (!oAnnotationUri.hasQuery('sap-client', oConfig.getSAPParam('sap-client'))) {
                                        Log.warning('Component Manifest: Ignoring provided "sap-context-token=' + sCacheToken + '" for ODataAnnotation "' + aAnnotations[i] + '" (' + oAnnotationUri.toString() + '). ' + 'URI parameter "sap-client=' + oAnnotationUri.query(true)['sap-client'] + '" must be identical with configuration "sap-client=' + oConfig.getSAPParam('sap-client') + '"', '["sap.app"]["dataSources"]["' + aAnnotations[i] + '"]', sLogComponentName);
                                        return;
                                    }
                                    if (oAnnotationUri.hasQuery('sap-context-token') && !oAnnotationUri.hasQuery('sap-context-token', sCacheToken)) {
                                        var existingContextToken = oAnnotationUri.query(true)['sap-context-token'];
                                        Log.warning('Component Manifest: Overriding existing "sap-context-token=' + existingContextToken + '" with provided value "' + sCacheToken + '" for ODataAnnotation "' + aAnnotations[i] + '" (' + oAnnotationUri.toString() + ').', '["sap.app"]["dataSources"]["' + aAnnotations[i] + '"]', sLogComponentName);
                                    }
                                    oAnnotationUri.setQuery('sap-context-token', sCacheToken);
                                };
                                applyAnnotationCacheToken();
                            }
                        }
                        var oAnnotationSourceManifest = mConfig.origin.dataSources[aAnnotations[i]] || oManifest;
                        var sAnnotationUri = oAnnotationSourceManifest._resolveUri(oAnnotationUri).toString();
                        oModelConfig.settings = oModelConfig.settings || {};
                        oModelConfig.settings.annotationURI = oModelConfig.settings.annotationURI || [];
                        oModelConfig.settings.annotationURI.push(sAnnotationUri);
                    }
                }
            } else {
                Log.error('Component Manifest: dataSource "' + oModelConfig.dataSource + '" for model "' + sModelName + '" not found or invalid', '["sap.app"]["dataSources"]["' + oModelConfig.dataSource + '"]', sLogComponentName);
            }
        }
        if (!oModelConfig.type) {
            Log.error('Component Manifest: Missing "type" for model "' + sModelName + '"', '["sap.ui5"]["models"]["' + sModelName + '"]', sLogComponentName);
            continue;
        }
        if (oModelConfig.type === 'sap.ui.model.odata.ODataModel' && (!oModelConfig.settings || oModelConfig.settings.json === undefined)) {
            oModelConfig.settings = oModelConfig.settings || {};
            oModelConfig.settings.json = true;
        }
        if (oModelConfig.uri) {
            var oUri = new URI(oModelConfig.uri);
            var oUriSourceManifest = (bIsDataSourceUri ? mConfig.origin.dataSources[oModelConfig.dataSource] : mConfig.origin.models[sModelName]) || oManifest;
            oUri = oUriSourceManifest._resolveUri(oUri);
            if (oModelConfig.dataSource) {
                addSapParams(oUri);
                if (oModelConfig.type === 'sap.ui.model.odata.v2.ODataModel') {
                    mMetadataUrlParams = oModelConfig.settings && oModelConfig.settings.metadataUrlParams;
                    if ((!mMetadataUrlParams || typeof mMetadataUrlParams['sap-language'] === 'undefined') && !oUri.hasQuery('sap-language') && oConfig.getSAPParam('sap-language')) {
                        oModelConfig.settings = oModelConfig.settings || {};
                        mMetadataUrlParams = oModelConfig.settings.metadataUrlParams = oModelConfig.settings.metadataUrlParams || {};
                        mMetadataUrlParams['sap-language'] = oConfig.getSAPParam('sap-language');
                    }
                    if (mCacheTokens.dataSources) {
                        var sCacheToken = mCacheTokens.dataSources[oDataSource.uri];
                        if (sCacheToken) {
                            var applyCacheToken = function () {
                                if (oUri.hasQuery('sap-context-token')) {
                                    Log.warning('Component Manifest: Ignoring provided "sap-context-token=' + sCacheToken + '" for model "' + sModelName + '" (' + oUri.toString() + '). ' + 'Model URI already contains parameter "sap-context-token=' + oUri.query(true)['sap-context-token'] + '"', '["sap.ui5"]["models"]["' + sModelName + '"]', sLogComponentName);
                                    return;
                                }
                                if ((!mMetadataUrlParams || typeof mMetadataUrlParams['sap-language'] === 'undefined') && !oUri.hasQuery('sap-language')) {
                                    Log.warning('Component Manifest: Ignoring provided "sap-context-token=' + sCacheToken + '" for model "' + sModelName + '" (' + oUri.toString() + '). ' + 'Missing "sap-language" parameter', '["sap.ui5"]["models"]["' + sModelName + '"]', sLogComponentName);
                                    return;
                                }
                                if (!oUri.hasQuery('sap-client')) {
                                    Log.warning('Component Manifest: Ignoring provided "sap-context-token=' + sCacheToken + '" for model "' + sModelName + '" (' + oUri.toString() + '). ' + 'Missing "sap-client" parameter', '["sap.ui5"]["models"]["' + sModelName + '"]', sLogComponentName);
                                    return;
                                }
                                if (!oUri.hasQuery('sap-client', oConfig.getSAPParam('sap-client'))) {
                                    Log.warning('Component Manifest: Ignoring provided "sap-context-token=' + sCacheToken + '" for model "' + sModelName + '" (' + oUri.toString() + '). ' + 'URI parameter "sap-client=' + oUri.query(true)['sap-client'] + '" must be identical with configuration "sap-client=' + oConfig.getSAPParam('sap-client') + '"', '["sap.ui5"]["models"]["' + sModelName + '"]', sLogComponentName);
                                    return;
                                }
                                if (mMetadataUrlParams && typeof mMetadataUrlParams['sap-client'] !== 'undefined') {
                                    if (mMetadataUrlParams['sap-client'] !== oConfig.getSAPParam('sap-client')) {
                                        Log.warning('Component Manifest: Ignoring provided "sap-context-token=' + sCacheToken + '" for model "' + sModelName + '" (' + oUri.toString() + '). ' + 'Parameter metadataUrlParams["sap-client"] = "' + mMetadataUrlParams['sap-client'] + '" must be identical with configuration "sap-client=' + oConfig.getSAPParam('sap-client') + '"', '["sap.ui5"]["models"]["' + sModelName + '"]', sLogComponentName);
                                        return;
                                    }
                                }
                                if (mMetadataUrlParams && mMetadataUrlParams['sap-context-token'] && mMetadataUrlParams['sap-context-token'] !== sCacheToken) {
                                    Log.warning('Component Manifest: Overriding existing "sap-context-token=' + mMetadataUrlParams['sap-context-token'] + '" with provided value "' + sCacheToken + '" for model "' + sModelName + '" (' + oUri.toString() + ').', '["sap.ui5"]["models"]["' + sModelName + '"]', sLogComponentName);
                                }
                                if (!mMetadataUrlParams) {
                                    oModelConfig.settings = oModelConfig.settings || {};
                                    mMetadataUrlParams = oModelConfig.settings.metadataUrlParams = oModelConfig.settings.metadataUrlParams || {};
                                }
                                mMetadataUrlParams['sap-context-token'] = sCacheToken;
                            };
                            applyCacheToken();
                        }
                    }
                }
            }
            oModelConfig.uri = oUri.toString();
        }
        if (oModelConfig.uriSettingName === undefined) {
            switch (oModelConfig.type) {
            case 'sap.ui.model.odata.ODataModel':
            case 'sap.ui.model.odata.v2.ODataModel':
            case 'sap.ui.model.odata.v4.ODataModel':
                oModelConfig.uriSettingName = 'serviceUrl';
                break;
            case 'sap.ui.model.resource.ResourceModel':
                oModelConfig.uriSettingName = 'bundleUrl';
                break;
            default:
            }
        }
        var sSystemParameter;
        var oComponentData;
        if (oComponent) {
            oComponentData = oComponent.getComponentData();
        } else {
            oComponentData = mOptions.componentData;
        }
        sSystemParameter = oComponentData && oComponentData.startupParameters && oComponentData.startupParameters['sap-system'];
        if (!sSystemParameter) {
            sSystemParameter = oConfig.getSAPParam('sap-system');
        }
        var bAddOrigin = false;
        var ODataUtils;
        if (sSystemParameter && [
                'sap.ui.model.odata.ODataModel',
                'sap.ui.model.odata.v2.ODataModel'
            ].indexOf(oModelConfig.type) != -1) {
            bAddOrigin = true;
            ODataUtils = sap.ui.requireSync('sap/ui/model/odata/ODataUtils');
        }
        if (oModelConfig.uri) {
            if (bAddOrigin) {
                oModelConfig.preOriginBaseUri = oModelConfig.uri.split('?')[0];
                oModelConfig.uri = ODataUtils.setOrigin(oModelConfig.uri, { alias: sSystemParameter });
                oModelConfig.postOriginBaseUri = oModelConfig.uri.split('?')[0];
            }
            if (oModelConfig.uriSettingName !== undefined) {
                oModelConfig.settings = oModelConfig.settings || {};
                if (!oModelConfig.settings[oModelConfig.uriSettingName]) {
                    oModelConfig.settings[oModelConfig.uriSettingName] = oModelConfig.uri;
                }
            } else if (oModelConfig.settings) {
                oModelConfig.settings = [
                    oModelConfig.uri,
                    oModelConfig.settings
                ];
            } else {
                oModelConfig.settings = [oModelConfig.uri];
            }
        } else {
            if (bAddOrigin && oModelConfig.uriSettingName !== undefined && oModelConfig.settings && oModelConfig.settings[oModelConfig.uriSettingName]) {
                oModelConfig.preOriginBaseUri = oModelConfig.settings[oModelConfig.uriSettingName].split('?')[0];
                oModelConfig.settings[oModelConfig.uriSettingName] = ODataUtils.setOrigin(oModelConfig.settings[oModelConfig.uriSettingName], { alias: sSystemParameter });
                oModelConfig.postOriginUri = oModelConfig.settings[oModelConfig.uriSettingName].split('?')[0];
            }
        }
        if (bAddOrigin && oModelConfig.settings && oModelConfig.settings.annotationURI) {
            var aAnnotationUris = [].concat(oModelConfig.settings.annotationURI);
            var aOriginAnnotations = [];
            for (var i = 0; i < aAnnotationUris.length; i++) {
                aOriginAnnotations.push(ODataUtils.setAnnotationOrigin(aAnnotationUris[i], {
                    alias: sSystemParameter,
                    preOriginBaseUri: oModelConfig.preOriginBaseUri,
                    postOriginBaseUri: oModelConfig.postOriginBaseUri
                }));
            }
            oModelConfig.settings.annotationURI = aOriginAnnotations;
        }
        if (oModelConfig.type === 'sap.ui.model.resource.ResourceModel' && oModelConfig.settings && Array.isArray(oModelConfig.settings.enhanceWith)) {
            oModelConfig.settings.enhanceWith.forEach(function (mBundle) {
                if (mBundle.bundleUrl) {
                    mBundle.bundleUrl = oManifest.resolveUri(mBundle.bundleUrl, mBundle.bundleUrlRelativeTo);
                }
            });
        }
        if (oModelConfig.settings && !Array.isArray(oModelConfig.settings)) {
            oModelConfig.settings = [oModelConfig.settings];
        }
        mModelConfigurations[sModelName] = oModelConfig;
    }
    return mModelConfigurations;
};
Component._createManifestModels = function (mModelConfigurations, sLogComponentName) {
    var mModels = {};
    for (var sModelName in mModelConfigurations) {
        var oModelConfig = mModelConfigurations[sModelName];
        try {
            sap.ui.requireSync(oModelConfig.type.replace(/\./g, '/'));
        } catch (oError) {
            Log.error('Component Manifest: Class "' + oModelConfig.type + '" for model "' + sModelName + '" could not be loaded. ' + oError, '["sap.ui5"]["models"]["' + sModelName + '"]', sLogComponentName);
            continue;
        }
        var fnModelClass = ObjectPath.get(oModelConfig.type);
        if (!fnModelClass) {
            Log.error('Component Manifest: Class "' + oModelConfig.type + '" for model "' + sModelName + '" could not be found', '["sap.ui5"]["models"]["' + sModelName + '"]', sLogComponentName);
            continue;
        }
        var aArgs = [null].concat(oModelConfig.settings || []);
        var fnFactory = fnModelClass.bind.apply(fnModelClass, aArgs);
        var oModel = new fnFactory();
        mModels[sModelName] = oModel;
    }
    return mModels;
};
function getPreloadModelConfigsFromManifest(oManifest, oComponentData, mCacheTokens) {
    var mModelConfigs = {
        afterManifest: {},
        afterPreload: {}
    };
    var oManifestDataSources = jQuery.extend(true, {}, oManifest.getEntry('/sap.app/dataSources'));
    var oManifestModels = jQuery.extend(true, {}, oManifest.getEntry('/sap.ui5/models'));
    var mAllModelConfigurations = Component._createManifestModelConfigurations({
        models: oManifestModels,
        dataSources: oManifestDataSources,
        manifest: oManifest,
        componentData: oComponentData,
        cacheTokens: mCacheTokens
    });
    var sPreloadModels = new UriParameters(window.location.href).get('sap-ui-xx-preload-component-models-' + oManifest.getComponentName());
    var aPreloadModels = sPreloadModels && sPreloadModels.split(',');
    for (var sModelName in mAllModelConfigurations) {
        var mModelConfig = mAllModelConfigurations[sModelName];
        if (!mModelConfig.preload && aPreloadModels && aPreloadModels.indexOf(sModelName) > -1) {
            mModelConfig.preload = true;
            Log.warning('FOR TESTING ONLY!!! Activating preload for model "' + sModelName + '" (' + mModelConfig.type + ')', oManifest.getComponentName(), 'sap.ui.core.Component');
        }
        if (mModelConfig.type === 'sap.ui.model.resource.ResourceModel' && Array.isArray(mModelConfig.settings) && mModelConfig.settings.length > 0 && mModelConfig.settings[0].async !== true) {
            mModelConfigs.afterPreload[sModelName] = mModelConfig;
        } else if (mModelConfig.preload) {
            if (sap.ui.loader._.getModuleState(mModelConfig.type.replace(/\./g, '/') + '.js')) {
                mModelConfigs.afterManifest[sModelName] = mModelConfig;
            } else {
                Log.warning('Can not preload model "' + sModelName + '" as required class has not been loaded: "' + mModelConfig.type + '"', oManifest.getComponentName(), 'sap.ui.core.Component');
            }
        }
    }
    return mModelConfigs;
}
function getManifestUrl(sComponentName) {
    return sap.ui.require.toUrl(sComponentName.replace(/\./g, '/') + '/manifest.json');
}
function registerModulePath(sName, sUrl) {
    var mPaths = {};
    mPaths[sName.replace(/\./g, '/')] = sUrl;
    sap.ui.loader.config({ paths: mPaths });
}
function loadManifests(oRootMetadata, oRootManifest) {
    var aManifestsToLoad = [];
    var aMetadataObjects = [];
    function collectLoadManifestPromises(oMetadata, oManifest) {
        if (!oMetadata._oManifest) {
            var sName = oMetadata.getComponentName();
            var sDefaultManifestUrl = getManifestUrl(sName);
            var pLoadManifest;
            if (oManifest) {
                pLoadManifest = Promise.resolve(JSON.parse(JSON.stringify(oManifest.getRawJson())));
            } else {
                pLoadManifest = LoaderExtensions.loadResource({
                    url: sDefaultManifestUrl,
                    dataType: 'json',
                    async: true
                }).catch(function (oError) {
                    Log.error('Failed to load component manifest from "' + sDefaultManifestUrl + '" (component ' + sName + ')! Reason: ' + oError);
                    return {};
                });
            }
            aManifestsToLoad.push(pLoadManifest);
            aMetadataObjects.push(oMetadata);
        }
        var oParentMetadata = oMetadata.getParent();
        if (oParentMetadata && oParentMetadata instanceof ComponentMetadata && !oParentMetadata.isBaseClass()) {
            collectLoadManifestPromises(oParentMetadata);
        }
    }
    collectLoadManifestPromises(oRootMetadata, oRootManifest);
    return Promise.all(aManifestsToLoad).then(function (aManifestJson) {
        for (var i = 0; i < aManifestJson.length; i++) {
            if (aManifestJson[i]) {
                aMetadataObjects[i]._applyManifest(aManifestJson[i]);
            }
        }
    });
}
Component._fnLoadComponentCallback = null;
Component._fnOnInstanceCreated = null;
Component.create = function (mOptions) {
    if (mOptions == null || typeof mOptions !== 'object') {
        throw new TypeError('Component.create() must be called with a configuration object.');
    }
    var mParameters = merge({}, mOptions);
    mParameters.async = true;
    if (mParameters.manifest === undefined) {
        mParameters.manifest = true;
    }
    return componentFactory(mParameters);
};
sap.ui.component = function (vConfig) {
    if (!vConfig) {
        throw new Error('sap.ui.component cannot be called without parameter!');
    }
    var fnLogProperties = function (name) {
        return {
            type: 'sap.ui.component',
            name: name
        };
    };
    if (typeof vConfig === 'string') {
        Log.warning('Do not use deprecated function \'sap.ui.component\' (' + vConfig + ') + for Component instance lookup. ' + 'Use \'Component.get\' instead', 'sap.ui.component', null, fnLogProperties.bind(null, vConfig));
        return sap.ui.getWCCore().getComponent(vConfig);
    }
    if (vConfig.async) {
        Log.info('Do not use deprecated factory function \'sap.ui.component\' (' + vConfig['name'] + '). ' + 'Use \'Component.create\' instead', 'sap.ui.component', null, fnLogProperties.bind(null, vConfig['name']));
    } else {
        Log.warning('Do not use synchronous component creation (' + vConfig['name'] + ')! ' + 'Use the new asynchronous factory \'Component.create\' instead', 'sap.ui.component', null, fnLogProperties.bind(null, vConfig['name']));
    }
    return componentFactory(vConfig);
};
function componentFactory(vConfig) {
    function createInstance(oClass) {
        var sName = vConfig.name, sId = vConfig.id, oComponentData = vConfig.componentData, sController = sName + '.Component', mSettings = vConfig.settings;
        var oInstance = new oClass(jQuery.extend({}, mSettings, {
            id: sId,
            componentData: oComponentData,
            _cacheTokens: vConfig.asyncHints && vConfig.asyncHints.cacheTokens
        }));
        assert(oInstance instanceof Component, 'The specified component "' + sController + '" must be an instance of sap.ui.core.Component!');
        Log.info('Component instance Id = ' + oInstance.getId());
        var bHandleValidation = oInstance.getMetadata().handleValidation() !== undefined || vConfig.handleValidation;
        if (bHandleValidation) {
            if (oInstance.getMetadata().handleValidation() !== undefined) {
                bHandleValidation = oInstance.getMetadata().handleValidation();
            } else {
                bHandleValidation = vConfig.handleValidation;
            }
            sap.ui.getWCCore().getMessageManager().registerObject(oInstance, bHandleValidation);
        }
        activateServices(oInstance);
        if (typeof Component._fnOnInstanceCreated === 'function') {
            var oPromise = Component._fnOnInstanceCreated(oInstance, vConfig);
            if (vConfig.async && oPromise instanceof Promise) {
                return oPromise.then(function () {
                    return oInstance;
                });
            }
        }
        return oInstance;
    }
    var vClassOrPromise = loadComponent(vConfig, {
        failOnError: true,
        createModels: true,
        waitFor: vConfig.asyncHints && vConfig.asyncHints.waitFor
    });
    if (vConfig.async) {
        var sCurrentOwnerId = ManagedObject._sOwnerId;
        return vClassOrPromise.then(function (oClass) {
            return runWithOwner(function () {
                return createInstance(oClass);
            }, sCurrentOwnerId);
        });
    } else {
        return createInstance(vClassOrPromise);
    }
}
Component.load = function (mOptions) {
    var mParameters = merge({}, mOptions);
    mParameters.async = true;
    if (mParameters.manifest === undefined) {
        mParameters.manifest = true;
    }
    return loadComponent(mParameters, { preloadOnly: mParameters.asyncHints && mParameters.asyncHints.preloadOnly });
};
Component.get = function (sId) {
    return sap.ui.getWCCore().getComponent(sId);
};
sap.ui.component.load = function (oConfig, bFailOnError) {
    Log.warning('Do not use deprecated function \'sap.ui.component.load\'! Use \'Component.load\' instead');
    return loadComponent(oConfig, {
        failOnError: bFailOnError,
        preloadOnly: oConfig.asyncHints && oConfig.asyncHints.preloadOnly
    });
};
function loadComponent(oConfig, mOptions) {
    var sName = oConfig.name, sUrl = oConfig.url, oConfiguration = sap.ui.getWCCore().getConfiguration(), bComponentPreload = /^(sync|async)$/.test(oConfiguration.getComponentPreload()), vManifest = oConfig.manifest, bManifestFirst, sManifestUrl, oManifest, mModels, mModelConfigs, fnCallLoadComponentCallback;
    function createSanitizedManifest(oRawManifestJSON, mOptions) {
        var oManifest = new Manifest(JSON.parse(JSON.stringify(oRawManifestJSON)), mOptions);
        return oConfig.async ? Promise.resolve(oManifest) : oManifest;
    }
    if (sName && sUrl) {
        registerModulePath(sName, sUrl);
    }
    Interaction.setStepComponent(sName);
    if (vManifest === undefined) {
        bManifestFirst = oConfig.manifestFirst === undefined ? oConfiguration.getManifestFirst() : !!oConfig.manifestFirst;
        sManifestUrl = oConfig.manifestUrl;
    } else {
        if (oConfig.async === undefined) {
            oConfig.async = true;
        }
        bManifestFirst = !!vManifest;
        sManifestUrl = vManifest && typeof vManifest === 'string' ? vManifest : undefined;
        oManifest = vManifest && typeof vManifest === 'object' ? createSanitizedManifest(vManifest, { url: oConfig && oConfig.altManifestUrl }) : undefined;
    }
    if (!oManifest && sManifestUrl) {
        oManifest = Manifest.load({
            manifestUrl: sManifestUrl,
            componentName: sName,
            async: oConfig.async
        });
    }
    if (oManifest && !oConfig.async) {
        sName = oManifest.getComponentName();
        if (sName && sUrl) {
            registerModulePath(sName, sUrl);
        }
    }
    if (!(oManifest && oConfig.async)) {
        if (!sName) {
            throw new Error('The name of the component is undefined.');
        }
        assert(typeof sName === 'string', 'sName must be a string');
    }
    if (bManifestFirst && !oManifest) {
        oManifest = Manifest.load({
            manifestUrl: getManifestUrl(sName),
            componentName: sName,
            async: oConfig.async,
            failOnError: false
        });
    }
    function getControllerModuleName() {
        return (sName + '.Component').replace(/\./g, '/');
    }
    function prepareControllerClass(oClass) {
        var sController = sName + '.Component';
        if (!oClass) {
            var sMsg = 'The specified component controller \'' + sController + '\' could not be found!';
            if (mOptions.failOnError) {
                throw new Error(sMsg);
            } else {
                Log.warning(sMsg);
            }
        }
        if (oManifest) {
            var oMetadataProxy = createMetadataProxy(oClass.getMetadata(), oManifest);
            var oClassProxy = function () {
                var args = Array.prototype.slice.call(arguments);
                var mSettings;
                if (args.length === 0 || typeof args[0] === 'object') {
                    mSettings = args[0] = args[0] || {};
                } else if (typeof args[0] === 'string') {
                    mSettings = args[1] = args[1] || {};
                }
                mSettings._metadataProxy = oMetadataProxy;
                if (mModels) {
                    mSettings._manifestModels = mModels;
                }
                var oInstance = Object.create(oClass.prototype);
                oClass.apply(oInstance, args);
                return oInstance;
            };
            oClassProxy.getMetadata = function () {
                return oMetadataProxy;
            };
            oClassProxy.extend = function () {
                throw new Error('Extending Components created by Manifest is not supported!');
            };
            return oClassProxy;
        } else {
            return oClass;
        }
    }
    function processOptions(vObj, bIgnoreLazy) {
        assert(typeof vObj === 'string' && vObj || typeof vObj === 'object' && typeof vObj.name === 'string' && vObj.name, 'reference either must be a non-empty string or an object with a non-empty \'name\' and an optional \'url\' property');
        if (typeof vObj === 'object') {
            if (vObj.url) {
                if (typeof vObj.url === 'object') {
                    if (vObj.url.final) {
                        jQuery.sap.registerModulePath(vObj.name, vObj.url);
                    } else {
                        registerModulePath(vObj.name, vObj.url.url);
                    }
                } else {
                    registerModulePath(vObj.name, vObj.url);
                }
            }
            return vObj.lazy && bIgnoreLazy !== true ? undefined : vObj.name;
        }
        return vObj;
    }
    function preload(sComponentName, bAsync) {
        var sController = sComponentName + '.Component', http2 = sap.ui.getWCCore().getConfiguration().getDepCache(), sPreloadName;
        if (bComponentPreload && sComponentName != null && !sap.ui.loader._.getModuleState(sController.replace(/\./g, '/') + '.js')) {
            if (bAsync) {
                sPreloadName = sController.replace(/\./g, '/') + (http2 ? '-h2-preload.js' : '-preload.js');
                return sap.ui.loader._.loadJSResourceAsync(sPreloadName, true);
            }
            try {
                sPreloadName = sController + '-preload';
                sap.ui.requireSync(sPreloadName.replace(/\./g, '/'));
            } catch (e) {
                Log.warning('couldn\'t preload component from ' + sPreloadName + ': ' + (e && e.message || e));
            }
        } else if (bAsync) {
            return Promise.resolve();
        }
    }
    function preloadDependencies(sComponentName, oManifest, bAsync) {
        var aPromises = [];
        var fnCollect = bAsync ? function (oPromise) {
            aPromises.push(oPromise);
        } : function () {
        };
        oManifest.defineResourceRoots();
        var mLibs = oManifest.getEntry('/sap.ui5/dependencies/libs');
        if (mLibs) {
            var aLibs = [];
            for (var sLibName in mLibs) {
                if (!mLibs[sLibName].lazy) {
                    aLibs.push(sLibName);
                }
            }
            if (aLibs.length > 0) {
                Log.info('Component "' + sComponentName + '" is loading libraries: "' + aLibs.join(', ') + '"');
                fnCollect(sap.ui.getWCCore().loadLibraries(aLibs, { async: bAsync }));
            }
        }
        var sExtendedComponent = oManifest.getEntry('/sap.ui5/extends/component');
        if (sExtendedComponent) {
            fnCollect(preload(sExtendedComponent, bAsync));
        }
        var aComponents = [];
        var mComponents = oManifest.getEntry('/sap.ui5/dependencies/components');
        if (mComponents) {
            for (var sComponentName in mComponents) {
                if (!mComponents[sComponentName].lazy) {
                    aComponents.push(sComponentName);
                }
            }
        }
        var mUsages = oManifest.getEntry('/sap.ui5/componentUsages');
        if (mUsages) {
            for (var sUsage in mUsages) {
                if (mUsages[sUsage].lazy === false && aComponents.indexOf(mUsages[sUsage].name) === -1) {
                    aComponents.push(mUsages[sUsage].name);
                }
            }
        }
        if (aComponents.length > 0) {
            aComponents.forEach(function (sComponentName) {
                fnCollect(preload(sComponentName, bAsync));
            });
        }
        return bAsync ? Promise.all(aPromises) : undefined;
    }
    if (oConfig.async) {
        var hints = oConfig.asyncHints || {}, promises = [], reflect = function (oPromise) {
                oPromise = oPromise.then(function (v) {
                    return {
                        result: v,
                        rejected: false
                    };
                }, function (v) {
                    return {
                        result: v,
                        rejected: true
                    };
                });
                return oPromise;
            }, collect = function (oPromise) {
                if (oPromise) {
                    promises.push(reflect(oPromise));
                }
            }, identity = function ($) {
                return $;
            }, phase1Preloads, libs;
        if (oManifest && mOptions.createModels) {
            collect(oManifest.then(function (oManifest) {
                mModelConfigs = getPreloadModelConfigsFromManifest(oManifest, oConfig.componentData, hints.cacheTokens);
                return oManifest;
            }).then(function (oManifest) {
                if (Object.keys(mModelConfigs.afterManifest).length > 0) {
                    mModels = Component._createManifestModels(mModelConfigs.afterManifest, oManifest.getComponentName());
                }
                return oManifest;
            }));
        }
        phase1Preloads = [];
        if (Array.isArray(hints.preloadBundles)) {
            hints.preloadBundles.forEach(function (vBundle) {
                phase1Preloads.push(sap.ui.loader._.loadJSResourceAsync(processOptions(vBundle, true), true));
            });
        }
        if (Array.isArray(hints.libs)) {
            libs = hints.libs.map(processOptions).filter(identity);
            phase1Preloads.push(sap.ui.getWCCore().loadLibraries(libs, { preloadOnly: true }));
        }
        phase1Preloads = Promise.all(phase1Preloads);
        if (libs && !mOptions.preloadOnly) {
            phase1Preloads = phase1Preloads.then(function () {
                return sap.ui.getWCCore().loadLibraries(libs);
            });
        }
        collect(phase1Preloads);
        if (!oManifest) {
            collect(preload(sName, true));
        } else {
            collect(oManifest.then(function (oManifest) {
                var sComponentName = oManifest.getComponentName();
                if (sUrl) {
                    registerModulePath(sComponentName, sUrl);
                }
                return preload(sComponentName, true).then(function () {
                    return oManifest._processI18n(true);
                }).then(function () {
                    if (!mOptions.createModels) {
                        return null;
                    }
                    var aResourceModelNames = Object.keys(mModelConfigs.afterPreload);
                    if (aResourceModelNames.length === 0) {
                        return null;
                    }
                    return new Promise(function (resolve, reject) {
                        sap.ui.require(['sap/ui/model/resource/ResourceModel'], function (ResourceModel) {
                            resolve(ResourceModel);
                        }, reject);
                    }).then(function (ResourceModel) {
                        function loadResourceBundle(sModelName) {
                            var mModelConfig = mModelConfigs.afterPreload[sModelName];
                            if (Array.isArray(mModelConfig.settings) && mModelConfig.settings.length > 0) {
                                var mModelSettings = mModelConfig.settings[0];
                                return ResourceModel.loadResourceBundle(mModelSettings, true).then(function (oResourceBundle) {
                                    mModelSettings.bundle = oResourceBundle;
                                }, function (err) {
                                    Log.error('Component Manifest: Could not preload ResourceBundle for ResourceModel. ' + 'The model will be skipped here and tried to be created on Component initialization.', '["sap.ui5"]["models"]["' + sModelName + '"]', sComponentName);
                                    Log.error(err);
                                    delete mModelConfigs.afterPreload[sModelName];
                                });
                            } else {
                                return Promise.resolve();
                            }
                        }
                        return Promise.all(aResourceModelNames.map(loadResourceBundle)).then(function () {
                            if (Object.keys(mModelConfigs.afterPreload).length > 0) {
                                var mResourceModels = Component._createManifestModels(mModelConfigs.afterPreload, oManifest.getComponentName());
                                if (!mModels) {
                                    mModels = {};
                                }
                                for (var sKey in mResourceModels) {
                                    mModels[sKey] = mResourceModels[sKey];
                                }
                            }
                        });
                    });
                });
            }));
            fnCallLoadComponentCallback = function (oLoadedManifest) {
                if (typeof Component._fnLoadComponentCallback === 'function') {
                    var oConfigCopy = jQuery.extend(true, {}, oConfig);
                    var oManifestCopy = jQuery.extend(true, {}, oLoadedManifest);
                    try {
                        Component._fnLoadComponentCallback(oConfigCopy, oManifestCopy);
                    } catch (oError) {
                        Log.error('Callback for loading the component "' + oManifest.getComponentName() + '" run into an error. The callback was skipped and the component loading resumed.', oError, 'sap.ui.core.Component');
                    }
                }
            };
        }
        if (hints.components) {
            jQuery.each(hints.components, function (i, vComp) {
                collect(preload(processOptions(vComp), true));
            });
        }
        return Promise.all(promises).then(function (v) {
            var aResults = [], bErrorFound = false, vError;
            bErrorFound = v.some(function (oResult) {
                if (oResult && oResult.rejected) {
                    vError = oResult.result;
                    return true;
                }
                aResults.push(oResult.result);
            });
            if (bErrorFound) {
                return Promise.reject(vError);
            }
            return aResults;
        }).then(function (v) {
            if (oManifest && fnCallLoadComponentCallback) {
                oManifest.then(fnCallLoadComponentCallback);
            }
            return v;
        }).then(function (v) {
            Log.debug('Component.load: all promises fulfilled, then ' + v);
            if (oManifest) {
                return oManifest.then(function (oLoadedManifest) {
                    oManifest = oLoadedManifest;
                    sName = oManifest.getComponentName();
                    return preloadDependencies(sName, oManifest, true);
                });
            } else {
                return v;
            }
        }).then(function () {
            if (mOptions.preloadOnly) {
                return true;
            }
            return new Promise(function (resolve, reject) {
                sap.ui.require([getControllerModuleName()], function (oClass) {
                    resolve(oClass);
                }, reject);
            }).then(function (oClass) {
                var oMetadata = oClass.getMetadata();
                var sName = oMetadata.getComponentName();
                var sDefaultManifestUrl = getManifestUrl(sName);
                var pLoaded;
                if (oManifest && typeof vManifest !== 'object' && (typeof sManifestUrl === 'undefined' || sManifestUrl === sDefaultManifestUrl)) {
                    pLoaded = loadManifests(oMetadata, oManifest);
                } else {
                    pLoaded = loadManifests(oMetadata);
                }
                return pLoaded.then(function () {
                    return prepareControllerClass(oClass);
                });
            });
        }).then(function (oControllerClass) {
            if (!oManifest) {
                return oControllerClass;
            }
            var aModuleNames = [];
            var sRootViewType;
            var oRootView = oManifest.getEntry('/sap.ui5/rootView');
            if (typeof oRootView === 'string') {
                sRootViewType = 'XML';
            } else if (oRootView && typeof oRootView === 'object' && oRootView.type) {
                sRootViewType = oRootView.type;
            }
            if (sRootViewType && ViewType[sRootViewType]) {
                var sViewClass = 'sap/ui/core/mvc/' + ViewType[sRootViewType] + 'View';
                aModuleNames.push(sViewClass);
            }
            var oRouting = oManifest.getEntry('/sap.ui5/routing');
            if (oRouting && oRouting.routes) {
                var sRouterClass = oManifest.getEntry('/sap.ui5/routing/config/routerClass') || 'sap.ui.core.routing.Router';
                var sRouterClassModule = sRouterClass.replace(/\./g, '/');
                aModuleNames.push(sRouterClassModule);
            }
            var mManifestModels = jQuery.extend(true, {}, oManifest.getEntry('/sap.ui5/models'));
            var mManifestDataSources = jQuery.extend(true, {}, oManifest.getEntry('/sap.app/dataSources'));
            var mAllModelConfigurations = Component._createManifestModelConfigurations({
                models: mManifestModels,
                dataSources: mManifestDataSources,
                manifest: oManifest,
                cacheTokens: hints.cacheTokens
            });
            for (var mModelName in mAllModelConfigurations) {
                if (!mAllModelConfigurations.hasOwnProperty(mModelName)) {
                    continue;
                }
                var oModelConfig = mAllModelConfigurations[mModelName];
                if (!oModelConfig.type) {
                    continue;
                }
                var sModuleName = oModelConfig.type.replace(/\./g, '/');
                if (aModuleNames.indexOf(sModuleName) === -1) {
                    aModuleNames.push(sModuleName);
                }
            }
            if (aModuleNames.length > 0) {
                return Promise.all(aModuleNames.map(function (sModuleName) {
                    return new Promise(function (resolve, reject) {
                        var bResolved = false;
                        function logErrorAndResolve(err) {
                            if (bResolved) {
                                return;
                            }
                            Log.warning('Can not preload module "' + sModuleName + '". ' + 'This will most probably cause an error once the module is used later on.', oManifest.getComponentName(), 'sap.ui.core.Component');
                            Log.warning(err);
                            bResolved = true;
                            resolve();
                        }
                        sap.ui.require([sModuleName], resolve, logErrorAndResolve);
                    });
                })).then(function () {
                    return oControllerClass;
                });
            } else {
                return oControllerClass;
            }
        }).then(function (oControllerClass) {
            var waitFor = mOptions.waitFor;
            if (waitFor) {
                var aPromises = Array.isArray(waitFor) ? waitFor : [waitFor];
                return Promise.all(aPromises).then(function () {
                    return oControllerClass;
                });
            }
            return oControllerClass;
        }).catch(function (vError) {
            if (mModels) {
                for (var sName in mModels) {
                    var oModel = mModels[sName];
                    if (oModel && typeof oModel.destroy === 'function') {
                        oModel.destroy();
                    }
                }
            }
            throw vError;
        });
    }
    if (oManifest) {
        preloadDependencies(sName, oManifest);
    }
    preload(sName);
    return prepareControllerClass(sap.ui.requireSync(getControllerModuleName()));
}
export default Component;