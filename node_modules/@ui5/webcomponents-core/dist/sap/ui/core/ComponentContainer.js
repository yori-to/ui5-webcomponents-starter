import ManagedObject from '../base/ManagedObject.js';
import Control from './Control.js';
import Component from './Component.js';
import Core from './Core.js';
import library from './library.js';
import ComponentContainerRenderer from './ComponentContainerRenderer.js';
import Log from '../../base/Log.js';
var ComponentLifecycle = library.ComponentLifecycle;
var ComponentContainer = Control.extend('sap.ui.core.ComponentContainer', {
    metadata: {
        library: 'sap.ui.core',
        properties: {
            name: {
                type: 'string',
                defaultValue: null
            },
            url: {
                type: 'sap.ui.core.URI',
                defaultValue: null
            },
            async: {
                type: 'boolean',
                defaultValue: false
            },
            handleValidation: {
                type: 'boolean',
                defaultValue: false
            },
            settings: {
                type: 'object',
                defaultValue: null
            },
            propagateModel: {
                type: 'boolean',
                defaultValue: false
            },
            width: {
                type: 'sap.ui.core.CSSSize',
                group: 'Dimension',
                defaultValue: null
            },
            height: {
                type: 'sap.ui.core.CSSSize',
                group: 'Dimension',
                defaultValue: null
            },
            lifecycle: {
                type: 'sap.ui.core.ComponentLifecycle',
                defaultValue: ComponentLifecycle.Legacy
            },
            autoPrefixId: {
                type: 'boolean',
                defaultValue: false
            },
            usage: {
                type: 'string',
                defaultValue: null
            },
            manifest: {
                type: 'any',
                defaultValue: null
            }
        },
        associations: {
            component: {
                type: 'sap.ui.core.UIComponent',
                multiple: false
            }
        },
        events: {
            componentCreated: { parameters: { component: { type: 'sap.ui.core.UIComponent' } } },
            componentFailed: { parameters: { reason: { type: 'object' } } }
        },
        designtime: 'sap/ui/core/designtime/ComponentContainer.designtime'
    }
});
function setContainerComponent(oComponentContainer, vComponent, bSuppressInvalidate, bDestroyOldComponent) {
    var oComponent = typeof vComponent === 'string' ? Core.getComponent(vComponent) : vComponent;
    var oOldComponent = oComponentContainer.getComponentInstance();
    if (oOldComponent !== oComponent) {
        if (oOldComponent) {
            oOldComponent.setContainer(undefined);
            if (bDestroyOldComponent) {
                oOldComponent.destroy();
            } else {
                oComponentContainer._propagateProperties(true, oOldComponent, ManagedObject._oEmptyPropagatedProperties, true);
            }
        }
        oComponentContainer.setAssociation('component', oComponent, bSuppressInvalidate);
        oComponent = oComponentContainer.getComponentInstance();
        if (oComponent) {
            oComponent.setContainer(oComponentContainer);
            oComponentContainer.propagateProperties(true);
        }
    }
}
ComponentContainer.prototype.getComponentInstance = function () {
    var sComponentId = this.getComponent();
    return sComponentId && Core.getComponent(sComponentId);
};
ComponentContainer.prototype.setComponent = function (vComponent, bSuppressInvalidate) {
    setContainerComponent(this, vComponent, bSuppressInvalidate, this.getLifecycle() === ComponentLifecycle.Container || typeof this.getUsage() === 'string' && this.getUsage() && this.getLifecycle() === ComponentLifecycle.Legacy);
    return this;
};
ComponentContainer.prototype.applySettings = function (mSettings, oScope) {
    if (mSettings) {
        if (mSettings.manifest === 'true' || mSettings.manifest === 'false') {
            mSettings.manifest = mSettings.manifest === 'true';
        }
        if (mSettings.manifest && mSettings.async === undefined) {
            mSettings.async = true;
        }
    }
    Control.prototype.applySettings.apply(this, arguments);
};
function createComponentConfig(oComponentContainer) {
    var sName = oComponentContainer.getName();
    var vManifest = oComponentContainer.getManifest();
    var sUrl = oComponentContainer.getUrl();
    var mSettings = oComponentContainer.getSettings();
    var mConfig = {
        name: sName ? sName : undefined,
        manifest: vManifest !== null ? vManifest : false,
        async: oComponentContainer.getAsync(),
        url: sUrl ? sUrl : undefined,
        handleValidation: oComponentContainer.getHandleValidation(),
        settings: mSettings !== null ? mSettings : undefined
    };
    return mConfig;
}
ComponentContainer.prototype._createComponent = function () {
    var oOwnerComponent = Component.getOwnerComponentFor(this), sUsageId = this.getUsage(), mConfig = createComponentConfig(this);
    if (oOwnerComponent && sUsageId) {
        mConfig = oOwnerComponent._enhanceWithUsageConfig(sUsageId, mConfig);
    }
    if (this.getAutoPrefixId()) {
        if (mConfig.id) {
            mConfig.id = this.getId() + '-' + mConfig.id;
        }
        if (mConfig.settings && mConfig.settings.id) {
            mConfig.settings.id = this.getId() + '-' + mConfig.settings.id;
        }
    }
    return Component._createComponent(mConfig, oOwnerComponent);
};
ComponentContainer.prototype.onBeforeRendering = function () {
    var oComponent = this.getComponentInstance(), sUsage = this.getUsage(), sName = this.getName(), sManifest = this.getManifest();
    if (!this._oComponentPromise && !oComponent && (sUsage || sName || sManifest)) {
        oComponent = this._createComponent();
        if (oComponent instanceof Promise) {
            this._oComponentPromise = oComponent;
            oComponent.then(function (oComponent) {
                delete this._oComponentPromise;
                this.setComponent(oComponent);
                this.fireComponentCreated({ component: oComponent });
            }.bind(this), function (oReason) {
                delete this._oComponentPromise;
                this.fireComponentFailed({ reason: oReason });
                Log.error('Failed to load component for container ' + this.getId() + '. Reason: ' + oReason);
            }.bind(this));
        } else if (oComponent) {
            this.setComponent(oComponent, true);
            this.fireComponentCreated({ component: oComponent });
        } else {
            this.fireComponentFailed({ reason: new Error('The component could not be created.') });
        }
    }
    if (oComponent && oComponent.onBeforeRendering) {
        oComponent.onBeforeRendering();
    }
};
ComponentContainer.prototype.onAfterRendering = function () {
    var oComponent = this.getComponentInstance();
    if (oComponent && oComponent.onAfterRendering) {
        oComponent.onAfterRendering();
    }
};
ComponentContainer.prototype.exit = function () {
    setContainerComponent(this, undefined, true, this.getLifecycle() !== ComponentLifecycle.Application);
};
ComponentContainer.prototype.propagateProperties = function (vName) {
    var oComponent = this.getComponentInstance();
    if (oComponent && this.getPropagateModel()) {
        this._propagateProperties(vName, oComponent);
        Control.prototype.propagateProperties.apply(this, arguments);
    }
};
ComponentContainer.prototype._propagateContextualSettings = function () {
    var oComponent = this.getComponentInstance();
    if (oComponent) {
        oComponent._applyContextualSettings(this._getContextualSettings());
    }
};
export default ComponentContainer;