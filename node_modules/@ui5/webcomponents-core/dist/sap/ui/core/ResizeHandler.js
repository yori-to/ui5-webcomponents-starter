import BaseObject from '../base/Object.js';
import Log from '../../base/Log.js';
import ActivityDetection from '../util/ActivityDetection.js';
import IntervalTrigger from './IntervalTrigger.js';
import jQuery from '../thirdparty/jquery.js';
var log = Log.getLogger('sap.ui.core.ResizeHandler', Log.Level.ERROR);
var oCoreRef = null;
var ResizeHandler = BaseObject.extend('sap.ui.core.ResizeHandler', {
    constructor: function (oCore) {
        BaseObject.apply(this);
        oCoreRef = oCore;
        this.aResizeListeners = [];
        this.aSuspendedDomRefs = [];
        this.bRegistered = false;
        this.iIdCounter = 0;
        this.fDestroyHandler = this.destroy.bind(this);
        jQuery(window).bind('unload', this.fDestroyHandler);
        ActivityDetection.attachActivate(initListener, this);
    }
});
function clearListener() {
    if (this.bRegistered) {
        this.bRegistered = false;
        IntervalTrigger.removeListener(this.checkSizes, this);
    }
}
function initListener() {
    if (!this.bRegistered && this.aResizeListeners.length > 0) {
        this.bRegistered = true;
        IntervalTrigger.addListener(this.checkSizes, this);
    }
}
ResizeHandler.prototype.destroy = function (oEvent) {
    ActivityDetection.detachActivate(initListener, this);
    jQuery(window).unbind('unload', this.fDestroyHandler);
    oCoreRef = null;
    this.aResizeListeners = [];
    this.aSuspendedDomRefs = [];
    clearListener.call(this);
};
ResizeHandler.prototype.attachListener = function (oRef, fHandler) {
    var bIsControl = BaseObject.isA(oRef, 'sap.ui.core.Control'), oDom = bIsControl ? oRef.getDomRef() : oRef, iWidth = oDom ? oDom.offsetWidth : 0, iHeight = oDom ? oDom.offsetHeight : 0, sId = 'rs-' + Date.now() + '-' + this.iIdCounter++, dbg;
    if (bIsControl) {
        dbg = 'Control ' + oRef.getId();
    } else if (oRef.id) {
        dbg = oRef.id;
    } else {
        dbg = String(oRef);
    }
    this.aResizeListeners.push({
        sId: sId,
        oDomRef: bIsControl ? null : oRef,
        oControl: bIsControl ? oRef : null,
        fHandler: fHandler,
        iWidth: iWidth,
        iHeight: iHeight,
        dbg: dbg
    });
    log.debug('registered ' + dbg);
    initListener.call(this);
    return sId;
};
ResizeHandler.prototype.detachListener = function (sId) {
    var aResizeListeners = this.aResizeListeners;
    for (var i = 0; i < aResizeListeners.length; i++) {
        if (aResizeListeners[i].sId === sId) {
            aResizeListeners.splice(i, 1);
            log.debug('deregistered ' + sId);
            break;
        }
    }
    if (aResizeListeners.length === 0) {
        clearListener.call(this);
    }
};
ResizeHandler.prototype.checkSizes = function () {
    var bDebug = log.isLoggable();
    if (bDebug) {
        log.debug('checkSizes:');
    }
    this.aResizeListeners.forEach(function (oResizeListener) {
        if (oResizeListener) {
            var bCtrl = !!oResizeListener.oControl, oDomRef = bCtrl ? oResizeListener.oControl.getDomRef() : oResizeListener.oDomRef;
            if (oDomRef && jQuery.contains(document.documentElement, oDomRef) && !this._isSuspended(oDomRef)) {
                var iOldWidth = oResizeListener.iWidth, iOldHeight = oResizeListener.iHeight, iNewWidth = oDomRef.offsetWidth, iNewHeight = oDomRef.offsetHeight;
                if (iOldWidth != iNewWidth || iOldHeight != iNewHeight) {
                    oResizeListener.iWidth = iNewWidth;
                    oResizeListener.iHeight = iNewHeight;
                    var oEvent = jQuery.Event('resize');
                    oEvent.target = oDomRef;
                    oEvent.currentTarget = oDomRef;
                    oEvent.size = {
                        width: iNewWidth,
                        height: iNewHeight
                    };
                    oEvent.oldSize = {
                        width: iOldWidth,
                        height: iOldHeight
                    };
                    oEvent.control = bCtrl ? oResizeListener.oControl : null;
                    if (bDebug) {
                        log.debug('resize detected for \'' + oResizeListener.dbg + '\': ' + oEvent.oldSize.width + 'x' + oEvent.oldSize.height + ' -> ' + oEvent.size.width + 'x' + oEvent.size.height);
                    }
                    oResizeListener.fHandler(oEvent);
                }
            }
        }
    }, this);
    if (ResizeHandler._keepActive != true && ResizeHandler._keepActive != false) {
        ResizeHandler._keepActive = false;
    }
    if (!ActivityDetection.isActive() && !ResizeHandler._keepActive) {
        clearListener.call(this);
    }
};
ResizeHandler.register = function (oRef, fHandler) {
    if (!oCoreRef || !oCoreRef.oResizeHandler) {
        return null;
    }
    return oCoreRef.oResizeHandler.attachListener(oRef, fHandler);
};
ResizeHandler.deregister = function (sId) {
    if (!oCoreRef || !oCoreRef.oResizeHandler) {
        return;
    }
    oCoreRef.oResizeHandler.detachListener(sId);
};
ResizeHandler.deregisterAllForControl = function (sControlId) {
    if (!oCoreRef || !oCoreRef.oResizeHandler) {
        return;
    }
    oCoreRef.oResizeHandler.aResizeListeners.filter(function (oResizeListener) {
        return oResizeListener && oResizeListener.oControl && oResizeListener.oControl.getId() === sControlId;
    }).forEach(function (oResizeListener) {
        ResizeHandler.deregister(oResizeListener.sId);
    });
};
ResizeHandler.suspend = function (oDomRef) {
    if (!oCoreRef || !oCoreRef.oResizeHandler) {
        return false;
    }
    if (!oDomRef || !jQuery.contains(document.documentElement, oDomRef)) {
        return false;
    }
    var oResizeHandler = oCoreRef.oResizeHandler;
    if (oResizeHandler.aSuspendedDomRefs.indexOf(oDomRef) === -1) {
        oResizeHandler.aSuspendedDomRefs.push(oDomRef);
    }
    return true;
};
ResizeHandler.resume = function (oDomRef) {
    if (!oCoreRef || !oCoreRef.oResizeHandler) {
        return false;
    }
    var oResizeHandler = oCoreRef.oResizeHandler, iIndex = oResizeHandler.aSuspendedDomRefs.indexOf(oDomRef);
    if (iIndex === -1) {
        return false;
    }
    oResizeHandler.aSuspendedDomRefs.splice(iIndex, 1);
    oResizeHandler.checkSizes();
    return true;
};
ResizeHandler.prototype._isSuspended = function (oDomRef) {
    var aSuspendedDomRefs = this.aSuspendedDomRefs, oNextSuspendedDomRef;
    for (var i = 0; i < aSuspendedDomRefs.length; i++) {
        oNextSuspendedDomRef = aSuspendedDomRefs[i];
        if (oNextSuspendedDomRef === oDomRef || jQuery.contains(oNextSuspendedDomRef, oDomRef)) {
            return true;
        }
    }
    return false;
};
export default ResizeHandler;