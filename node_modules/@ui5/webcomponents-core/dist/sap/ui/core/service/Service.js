import BaseObject from '../../base/Object.js';
import assert from '../../../base/assert.js';
import Log from '../../../base/Log.js';
var Service = BaseObject.extend('sap.ui.core.service.Service', {
    metadata: {
        'abstract': true,
        'library': 'sap.ui.core'
    },
    constructor: function (oServiceContext) {
        BaseObject.apply(this);
        if (oServiceContext) {
            assert(typeof oServiceContext.scopeObject === 'object', 'The service context requires a scope object!');
            assert(typeof oServiceContext.scopeType === 'string', 'The service context requires a scope type!');
        }
        this._oServiceContext = oServiceContext;
        if (typeof this.init === 'function') {
            this.init();
        }
    }
});
Service.create = function (oServiceInfo) {
    var AnonymousService = function AnonymousService(oServiceContext) {
        for (var sMember in oServiceInfo) {
            if (!sMember.match(/^(metadata|constructor|getContext|destroy)$/)) {
                this[sMember] = oServiceInfo[sMember];
            } else {
                Log.warning('The member ' + sMember + ' is not allowed for anonymous service declaration and will be ignored!');
            }
        }
        Service.apply(this, arguments);
    };
    AnonymousService.prototype = Object.create(Service.prototype);
    return AnonymousService;
};
Service.prototype.getInterface = function () {
    var oProxy = Object.create(null);
    for (var sMember in this) {
        if (!sMember.match(/^_|^metadata$|^constructor$|^getInterface$|^destroy$|^init$|^exit$|^getContext$/) && typeof this[sMember] === 'function') {
            oProxy[sMember] = this[sMember].bind(this);
        }
    }
    this.getInterface = function () {
        return oProxy;
    };
    return oProxy;
};
Service.prototype.getContext = function () {
    return this._oServiceContext;
};
Service.prototype.destroy = function () {
    if (typeof this.exit === 'function') {
        this.exit();
    }
    BaseObject.prototype.destroy.apply(this, arguments);
    delete this._oServiceContext;
};
export default Service;