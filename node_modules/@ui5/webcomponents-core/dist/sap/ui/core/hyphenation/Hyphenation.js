import jQuery from '../../../../jquery.sap.global.js';
import ManagedObject from '../../base/ManagedObject.js';
import Log from '../../../base/Log.js';
import Locale from '../Locale.js';
import LocaleData from '../LocaleData.js';
var oTestingWords = {
    'bg': 'непротивоконституционствувателствувайте',
    'ca': 'Psiconeuroimmunoendocrinologia',
    'hr': 'prijestolonasljednikovičičinima',
    'cs': 'nejnezdevětadevadesáteronásobitelnějšími',
    'da': 'Gedebukkebensoverogundergeneralkrigskommandersergenten',
    'nl': 'meervoudigepersoonlijkheidsstoornissen',
    'en-us': 'pneumonoultramicroscopicsilicovolcanoconiosis',
    'et': 'Sünnipäevanädalalõpupeopärastlõunaväsimus',
    'fi': 'kolmivaihekilowattituntimittari',
    'fr': 'hippopotomonstrosesquippedaliophobie',
    'de': 'Kindercarnavalsoptochtvoorbereidingswerkzaamhedenplan',
    'el-monoton': 'ηλεκτροεγκεφαλογράφημα',
    'hi': 'किंकर्तव्यविमूढ़',
    'hu': 'Megszentségteleníthetetlenségeskedéseitekért',
    'it': 'hippopotomonstrosesquippedaliofobia',
    'lt': 'nebeprisikiškiakopūstlapiaujančiuosiuose',
    'nb-no': 'supercalifragilisticexpialidocious',
    'pl': 'dziewięćdziesięciokilkuletniemu',
    'pt': 'pneumoultramicroscopicossilicovulcanoconiose',
    'ru': 'превысокомногорассмотрительствующий',
    'sr': 'Семпаравиливичинаверсаламилитипиковски',
    'sl': 'Dialektičnomaterialističen',
    'es': 'Electroencefalografistas',
    'sv': 'Realisationsvinstbeskattning',
    'th': 'ตัวอย่างข้อความที่จะใช้ในการยืนยันการถ่ายโอน',
    'tr': 'Muvaffakiyetsizleştiricileştiriveremeyebileceklerimizdenmişsinizcesine',
    'uk': 'Нікотинамідаденіндинуклеотидфосфат'
};
var oThirdPartySupportedLanguages = {
    'bg': true,
    'ca': true,
    'hr': true,
    'cs': false,
    'da': true,
    'nl': true,
    'en-us': true,
    'et': true,
    'fi': true,
    'fr': true,
    'de': true,
    'el-monoton': true,
    'hi': true,
    'hu': true,
    'it': true,
    'lt': true,
    'nb-no': true,
    'pl': false,
    'pt': true,
    'ru': true,
    'sr': false,
    'sl': true,
    'es': true,
    'sv': true,
    'th': true,
    'tr': true,
    'uk': true
};
var mLanguageNamesInEnglish = {
    'bg': 'Bulgarian',
    'ca': 'Catalan',
    'hr': 'Croatian',
    'cs': 'Czech',
    'da': 'Danish',
    'nl': 'Dutch',
    'en': 'English',
    'et': 'Estonian',
    'fi': 'Finnish',
    'fr': 'French',
    'de': 'German',
    'el': 'Greek',
    'hi': 'Hindi',
    'hu': 'Hungarian',
    'it': 'Italian',
    'lt': 'Lithuanian',
    'nb': 'Norwegian Bokmål',
    'no': 'Norwegian',
    'pl': 'Polish',
    'pt': 'Portuguese',
    'ru': 'Russian',
    'sr': 'Serbian',
    'sl': 'Slovenian',
    'es': 'Spanish',
    'sv': 'Swedish',
    'th': 'Thai',
    'tr': 'Turkish',
    'uk': 'Ukrainian'
};
var oBrowserSupportCSS = {};
var oSupportCheck = {};
var oThirdPartySupportCheck = {};
var oHyphenationInstance = null;
var fakeBody = null;
var oHyphenateMethods = {};
var oPromisesForLang = {};
var aLanguagesQueue = [];
function initializeLanguage(sLanguage, oConfig, resolve) {
    Log.info('[UI5 Hyphenation] Initializing third-party module for language ' + getLanguageDisplayName(sLanguage), 'sap.ui.core.hyphenation.Hyphenation.initialize()');
    window.hyphenopoly.initializeLanguage(oConfig).then(onLanguageInitialized.bind(this, sLanguage, resolve));
}
function reInitializeLanguage(sLanguage, oConfig, resolve) {
    Log.info('[UI5 Hyphenation] Re-initializing third-party module for language ' + getLanguageDisplayName(sLanguage), 'sap.ui.core.hyphenation.Hyphenation.initialize()');
    window.hyphenopoly.reInitializeLanguage(sLanguage, oConfig).then(onLanguageInitialized.bind(this, sLanguage, resolve));
}
function onLanguageInitialized(sLanguage, resolve, hyphenateMethod) {
    oHyphenateMethods[sLanguage] = hyphenateMethod;
    oHyphenationInstance.bIsInitialized = true;
    if (aLanguagesQueue.length > 0) {
        aLanguagesQueue.forEach(function (oElement) {
            initializeLanguage(oElement.sLanguage, oElement.oConfig, oElement.resolve);
        });
        aLanguagesQueue = [];
    }
    oHyphenationInstance.bLoading = false;
    resolve(getLanguageFromPattern(sLanguage));
}
function prepareConfig(sLanguage, oConfig) {
    var oConfigurationForLanguage = {
        'require': [sLanguage],
        'hyphen': '\xAD',
        'compound': 'all',
        'path': jQuery.sap.getResourcePath('sap/ui/thirdparty/hyphenopoly')
    };
    if (oConfig) {
        if ('hyphen' in oConfig) {
            oConfigurationForLanguage.hyphen = oConfig.hyphen;
        }
        if ('minWordLength' in oConfig) {
            oConfigurationForLanguage.minWordLength = oConfig.minWordLength;
        }
        if ('exceptions' in oConfig) {
            Log.info('[UI5 Hyphenation] Add hyphenation exceptions \'' + JSON.stringify(oConfig.exceptions) + '\' for language ' + getLanguageDisplayName(sLanguage), 'sap.ui.core.hyphenation.Hyphenation');
            var aWordsExceptions = [];
            Object.keys(oConfig.exceptions).forEach(function (sWord) {
                aWordsExceptions.push(oConfig.exceptions[sWord]);
            });
            if (aWordsExceptions.length > 0) {
                oConfigurationForLanguage.exceptions = {};
                oConfigurationForLanguage.exceptions[sLanguage] = aWordsExceptions.join(', ');
            }
        }
    }
    return oConfigurationForLanguage;
}
function loadScript(sPath, sFilename) {
    return new Promise(function (resolve, reject) {
        var script = document.createElement('script');
        script.async = true;
        script.src = sPath + sFilename;
        script.addEventListener('load', resolve);
        script.addEventListener('error', function () {
            return reject('Error loading script: ' + sFilename);
        });
        script.addEventListener('abort', function () {
            return reject(sFilename + ' Script loading aborted.');
        });
        document.head.appendChild(script);
    });
}
var css = function createCss() {
    var props = [
        'visibility:hidden;',
        '-moz-hyphens:auto;',
        '-webkit-hyphens:auto;',
        '-ms-hyphens:auto;',
        'hyphens:auto;',
        'width:48px;',
        'font-size:12px;',
        'line-height:12px;',
        'border:none;',
        'padding:0;',
        'word-wrap:normal'
    ];
    return props.join('');
}();
function createTest(sLang) {
    if (!fakeBody) {
        fakeBody = document.createElement('body');
    }
    var testDiv = document.createElement('div');
    testDiv.lang = sLang;
    testDiv.id = sLang;
    testDiv.style.cssText = css;
    testDiv.appendChild(document.createTextNode(oTestingWords[sLang]));
    fakeBody.appendChild(testDiv);
}
function appendTests(oTarget) {
    if (fakeBody) {
        oTarget.appendChild(fakeBody);
        return fakeBody;
    }
    return null;
}
function clearTests() {
    if (fakeBody) {
        fakeBody.parentNode.removeChild(fakeBody);
    }
}
function checkCSSHyphensSupport(oElement) {
    return oElement.style.hyphens === 'auto' || oElement.style.webkitHyphens === 'auto' || oElement.style.msHyphens === 'auto' || oElement.style['-moz-hyphens'] === 'auto';
}
function getLanguage(sLang) {
    var oLocale;
    if (sLang) {
        oLocale = new Locale(sLang);
    } else {
        oLocale = sap.ui.getWCCore().getConfiguration().getLocale();
    }
    var sLanguage = oLocale.getLanguage().toLowerCase();
    switch (sLanguage) {
    case 'en':
        sLanguage = 'en-us';
        break;
    case 'nb':
        sLanguage = 'nb-no';
        break;
    case 'no':
        sLanguage = 'nb-no';
        break;
    case 'el':
        sLanguage = 'el-monoton';
        break;
    }
    return sLanguage;
}
function getLanguageFromPattern(sPatternName) {
    if (typeof sPatternName === 'string') {
        return sPatternName.substring(0, 2);
    } else {
        return null;
    }
}
function getLanguageDisplayName(sPatternName) {
    var sLang = getLanguageFromPattern(sPatternName);
    if (mLanguageNamesInEnglish.hasOwnProperty(sLang)) {
        return '\'' + mLanguageNamesInEnglish[sLang] + '\' (code:\'' + sLang + '\')';
    } else {
        return '\'' + sLang + '\'';
    }
}
function fireError(sErrorMessage) {
    oHyphenationInstance.fireError(sErrorMessage);
    Log.error('[UI5 Hyphenation] ' + sErrorMessage, 'sap.ui.core.hyphenation.Hyphenation');
    oHyphenationInstance.bLoading = false;
}
var Hyphenation = ManagedObject.extend('sap.ui.core.hyphenation.Hyphenation', {
    metadata: {
        library: 'sap.ui.core',
        events: { error: { parameters: { sErrorMessage: { type: 'string' } } } }
    }
});
Hyphenation.prototype.canUseNativeHyphenation = function (sLang) {
    var sLanguage = getLanguage(sLang);
    var bCanUseNativeHyphenation;
    if (!this.isLanguageSupported(sLang)) {
        return null;
    }
    if (!oBrowserSupportCSS.hasOwnProperty(sLanguage)) {
        createTest(sLanguage);
        var testContainer = appendTests(document.documentElement);
        if (testContainer !== null) {
            var el = document.getElementById(sLanguage);
            if (checkCSSHyphensSupport(el) && el.offsetHeight > 12) {
                bCanUseNativeHyphenation = true;
            } else {
                bCanUseNativeHyphenation = false;
            }
            clearTests();
        }
        oBrowserSupportCSS[sLanguage] = bCanUseNativeHyphenation;
        if (bCanUseNativeHyphenation) {
            Log.info('[UI5 Hyphenation] Browser-native hyphenation can be used for language ' + getLanguageDisplayName(sLanguage), 'sap.ui.core.hyphenation.Hyphenation.canUseNativeHyphenation()');
        } else {
            Log.info('[UI5 Hyphenation] Browser-native hyphenation is not supported by current platform for language ' + getLanguageDisplayName(sLanguage), 'sap.ui.core.hyphenation.Hyphenation.canUseNativeHyphenation()');
        }
    } else {
        bCanUseNativeHyphenation = oBrowserSupportCSS[sLanguage];
    }
    return bCanUseNativeHyphenation;
};
Hyphenation.prototype.canUseThirdPartyHyphenation = function (sLang) {
    var sLanguage = getLanguage(sLang), bCanUseThirdPartyHyphenation;
    if (!this.isLanguageSupported(sLang)) {
        return null;
    }
    if (!oThirdPartySupportCheck.hasOwnProperty(sLanguage)) {
        bCanUseThirdPartyHyphenation = oThirdPartySupportedLanguages.hasOwnProperty(sLanguage) && oThirdPartySupportedLanguages[sLanguage];
        if (bCanUseThirdPartyHyphenation) {
            Log.info('[UI5 Hyphenation] Third-party hyphenation can be used for language ' + getLanguageDisplayName(sLanguage), 'sap.ui.core.hyphenation.Hyphenation.canUseThirdPartyHyphenation()');
        } else {
            Log.info('[UI5 Hyphenation] Third-party hyphenation is not supported for language ' + getLanguageDisplayName(sLanguage), 'sap.ui.core.hyphenation.Hyphenation.canUseThirdPartyHyphenation()');
        }
        oThirdPartySupportCheck[sLanguage] = bCanUseThirdPartyHyphenation;
    } else {
        bCanUseThirdPartyHyphenation = oThirdPartySupportCheck[sLanguage];
    }
    return bCanUseThirdPartyHyphenation;
};
Hyphenation.prototype.isLanguageSupported = function (sLang) {
    var sLanguage = getLanguage(sLang), bIsSupported;
    if (!oSupportCheck.hasOwnProperty(sLanguage)) {
        bIsSupported = oTestingWords.hasOwnProperty(sLanguage);
        if (!bIsSupported) {
            Log.info('[UI5 Hyphenation] Language ' + getLanguageDisplayName(sLanguage) + ' is not known to the Hyphenation API', 'sap.ui.core.hyphenation.Hyphenation.isLanguageSupported()');
        }
        oSupportCheck[sLanguage] = bIsSupported;
    } else {
        bIsSupported = oSupportCheck[sLanguage];
    }
    return bIsSupported;
};
Hyphenation.prototype.hyphenate = function (sText, sLang) {
    var sLanguage = getLanguage(sLang);
    if (!oHyphenateMethods.hasOwnProperty(sLanguage)) {
        fireError('Language ' + getLanguageDisplayName(sLanguage) + ' is not initialized. You have to initialize it first with method \'initialize()\'');
        return sText;
    }
    return oHyphenateMethods[sLanguage](sText);
};
Hyphenation.prototype.getInitializedLanguages = function () {
    return Object.keys(oHyphenateMethods).map(function (sLangPattern) {
        return getLanguageFromPattern(sLangPattern);
    });
};
Hyphenation.prototype.isLanguageInitialized = function (sLang) {
    var sLang = getLanguage(sLang);
    return Object.keys(oHyphenateMethods).indexOf(sLang) != -1;
};
Hyphenation.prototype.getExceptions = function (sLang) {
    var sLang = getLanguage(sLang);
    if (this.isLanguageInitialized(sLang)) {
        return window.hyphenopoly.languages[sLang].exceptions;
    } else {
        fireError('Language ' + getLanguageDisplayName(sLang) + ' is not initialized. You have to initialize it first with method \'initialize()\'');
    }
};
Hyphenation.prototype.addExceptions = function (sLang, oExceptions) {
    var sLang = getLanguage(sLang);
    if (this.isLanguageInitialized(sLang)) {
        Log.info('[UI5 Hyphenation] Add hyphenation exceptions \'' + JSON.stringify(oExceptions) + '\' for language ' + getLanguageDisplayName(sLang), 'sap.ui.core.hyphenation.Hyphenation.addExceptions()');
        Object.keys(oExceptions).forEach(function (key) {
            window.hyphenopoly.languages[sLang].cache[key] = oExceptions[key];
            window.hyphenopoly.languages[sLang].exceptions[key] = oExceptions[key];
        });
    } else {
        fireError('Language ' + getLanguageDisplayName(sLang) + ' is not initialized. You have to initialize it first with method \'initialize()\'');
    }
};
Hyphenation.prototype.initialize = function (sLang, oConfig) {
    var sLanguage = getLanguage(sLang);
    var oConfig = prepareConfig(sLanguage, oConfig);
    if (oThirdPartySupportedLanguages[sLanguage]) {
        if (!oHyphenationInstance.bIsInitialized && !oHyphenationInstance.bLoading) {
            oHyphenationInstance.bLoading = true;
            oPromisesForLang[sLanguage] = new Promise(function (resolve, reject) {
                loadScript(oConfig.path, '/hyphenopoly.bundle.js').then(initializeLanguage.bind(this, sLanguage, oConfig, resolve));
            });
            return oPromisesForLang[sLanguage];
        } else if (oHyphenationInstance.bLoading && !oHyphenateMethods[sLanguage] && oPromisesForLang[sLanguage]) {
            return oPromisesForLang[sLanguage];
        } else if (this.isLanguageInitialized(sLanguage)) {
            oPromisesForLang[sLanguage] = new Promise(function (resolve, reject) {
                reInitializeLanguage(sLanguage, oConfig, resolve);
            });
        } else {
            oPromisesForLang[sLanguage] = new Promise(function (resolve, reject) {
                if (!oHyphenationInstance.bIsInitialized) {
                    aLanguagesQueue.push({
                        sLanguage: sLanguage,
                        oConfig: oConfig,
                        resolve: resolve
                    });
                } else {
                    initializeLanguage(sLanguage, oConfig, resolve);
                }
            });
        }
        oHyphenationInstance.bLoading = true;
        return oPromisesForLang[sLanguage];
    } else {
        var sMessage = 'Language ' + getLanguageDisplayName(sLang) + ' can not be initialized. It is either not supported by the third-party module or an error occurred';
        fireError(sMessage);
        return new Promise(function (resolve, reject) {
            reject(sMessage);
        });
    }
};
Hyphenation.getInstance = function () {
    if (!oHyphenationInstance) {
        oHyphenationInstance = new Hyphenation();
        oHyphenationInstance.bIsInitialized = false;
        oHyphenationInstance.bLoading = false;
    }
    return oHyphenationInstance;
};
export default Hyphenation;