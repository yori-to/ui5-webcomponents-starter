import ManagedObject from '../base/ManagedObject.js';
import Component from './Component.js';
import library from './library.js';
import UIComponentMetadata from './UIComponentMetadata.js';
import Controller from './mvc/Controller.js';
import View from './mvc/View.js';
import ObjectPath from '../../base/util/ObjectPath.js';
import Log from '../../base/Log.js';
var ViewType = library.mvc.ViewType;
var UIComponent = Component.extend('sap.ui.core.UIComponent', {
    constructor: function (sId, mSettings) {
        var bCreated = false;
        try {
            if (typeof sId !== 'string') {
                mSettings = sId;
                sId = undefined;
            }
            if (mSettings && mSettings._routerHashChanger) {
                this._oRouterHashChanger = mSettings._routerHashChanger;
                delete mSettings._routerHashChanger;
            }
            Component.apply(this, arguments);
            bCreated = true;
        } finally {
            if (!bCreated) {
                this._destroyCreatedInstances();
            }
        }
    },
    metadata: {
        'abstract': true,
        rootView: null,
        publicMethods: ['render'],
        aggregations: {
            'rootControl': {
                type: 'sap.ui.core.Control',
                multiple: false,
                visibility: 'hidden'
            }
        },
        designtime: 'sap/ui/core/designtime/UIComponent.designtime',
        routing: {}
    }
}, UIComponentMetadata);
UIComponent._fnOnInstanceInitialized = null;
UIComponent._fnOnInstanceDestroy = null;
UIComponent.prototype.init = function () {
    var that = this;
    var oPreprocessors = {};
    if (this.getAutoPrefixId()) {
        oPreprocessors.id = function (sId) {
            return that.createId(sId);
        };
    }
    var oRoutingManifestEntry = this._getManifestEntry('/sap.ui5/routing', true) || {}, oRoutingConfig = oRoutingManifestEntry.config || {}, vRoutes = oRoutingManifestEntry.routes;
    if (vRoutes) {
        var Router = sap.ui.requireSync('sap/ui/core/routing/Router');
        var fnRouterConstructor = getConstructorFunctionFor(this._getRouterClassName() || Router);
        this._oRouter = new fnRouterConstructor(vRoutes, oRoutingConfig, this, oRoutingManifestEntry.targets, this._oRouterHashChanger);
        this._oTargets = this._oRouter.getTargets();
        this._oViews = this._oRouter.getViews();
    } else if (oRoutingManifestEntry.targets) {
        var Targets = sap.ui.requireSync('sap/ui/core/routing/Targets');
        var Views = sap.ui.requireSync('sap/ui/core/routing/Views');
        this._oViews = new Views({ component: this });
        var fnTargetsConstructor = getConstructorFunctionFor(oRoutingConfig.targetsClass || Targets);
        this._oTargets = new fnTargetsConstructor({
            targets: oRoutingManifestEntry.targets,
            config: oRoutingConfig,
            views: this._oViews
        });
    }
    this.runAsOwner(function () {
        ManagedObject.runWithPreprocessors(function () {
            that.setAggregation('rootControl', that.createContent());
        }, oPreprocessors);
    });
    var oRootControl = this.getRootControl();
    if (oRootControl instanceof View) {
        if (oRoutingConfig.targetParent === undefined) {
            oRoutingConfig.targetParent = oRootControl.getId();
        }
        if (this._oTargets) {
            this._oTargets._setRootViewId(oRootControl.getId());
        }
    }
    if (typeof UIComponent._fnOnInstanceInitialized === 'function') {
        UIComponent._fnOnInstanceInitialized(this);
    }
};
function getConstructorFunctionFor(vRoutingObjectConstructor) {
    var fnConstructor;
    if (typeof vRoutingObjectConstructor === 'string') {
        fnConstructor = ObjectPath.get(vRoutingObjectConstructor);
        if (!fnConstructor) {
            Log.error('The specified class for router or targets \'' + vRoutingObjectConstructor + '\' is undefined.', this);
        }
    } else {
        fnConstructor = vRoutingObjectConstructor;
    }
    return fnConstructor;
}
UIComponent.prototype.destroy = function () {
    if (typeof UIComponent._fnOnInstanceDestroy === 'function') {
        UIComponent._fnOnInstanceDestroy(this);
    }
    this._destroyCreatedInstances();
    Component.prototype.destroy.apply(this, arguments);
};
UIComponent.prototype._destroyCreatedInstances = function () {
    if (this._oRouter) {
        this._oRouter.destroy();
        delete this._oRouter;
    } else {
        if (this._oTargets) {
            this._oTargets.destroy();
            this._oTargets = null;
        }
        if (this._oViews) {
            this._oViews.destroy();
            this._oViews = null;
        }
    }
};
UIComponent.getRouterFor = function (oControllerOrView) {
    var oView = oControllerOrView;
    if (oView instanceof Controller) {
        oView = oView.getView();
    }
    if (oView instanceof View) {
        var oComponent = Component.getOwnerComponentFor(oView);
        if (oComponent) {
            return oComponent.getRouter();
        } else {
            return undefined;
        }
    }
};
UIComponent.prototype.getRouter = function () {
    return this._oRouter;
};
UIComponent.prototype.getTargets = function () {
    return this._oTargets;
};
UIComponent.prototype.getAutoPrefixId = function () {
    return !!this.getManifestObject().getEntry('/sap.ui5/autoPrefixId');
};
UIComponent.prototype.byId = function (sId) {
    return sap.ui.getWCCore().byId(this.createId(sId));
};
UIComponent.prototype.createId = function (sId) {
    if (!this.isPrefixedId(sId)) {
        sId = this.getId() + '---' + sId;
    }
    return sId;
};
UIComponent.prototype.getLocalId = function (sId) {
    var sPrefix = this.getId() + '---';
    return sId && sId.indexOf(sPrefix) === 0 ? sId.slice(sPrefix.length) : null;
};
UIComponent.prototype.isPrefixedId = function (sId) {
    return !!(sId && sId.indexOf(this.getId() + '---') === 0);
};
UIComponent.prototype.createContent = function () {
    var oRootView = this._getManifestEntry('/sap.ui5/rootView', true);
    if (oRootView && typeof oRootView === 'string') {
        return View._legacyCreate({
            viewName: oRootView,
            type: ViewType.XML
        });
    } else if (oRootView && typeof oRootView === 'object') {
        if (oRootView.id) {
            oRootView.id = this.createId(oRootView.id);
        }
        if (oRootView.async) {
            oRootView.processingMode = 'sequential';
        }
        return View._legacyCreate(oRootView);
    } else if (oRootView) {
        throw new Error('Configuration option \'rootView\' of component \'' + this.getMetadata().getName() + '\' is invalid! \'rootView\' must be type of string or object!');
    }
    return null;
};
UIComponent.prototype.getRootControl = function () {
    return this.getAggregation('rootControl');
};
UIComponent.prototype.render = function (oRenderManager) {
    var oControl = this.getRootControl();
    if (oControl && oRenderManager) {
        oRenderManager.renderControl(oControl);
    }
};
UIComponent.prototype.getUIArea = function () {
    return this.oContainer ? this.oContainer.getUIArea() : null;
};
UIComponent.prototype.getEventingParent = function () {
    return this.getUIArea();
};
UIComponent.prototype.setContainer = function (oContainer) {
    this.oContainer = oContainer;
    if (oContainer) {
        this._applyContextualSettings(oContainer._getContextualSettings());
    } else {
        this._oContextualSettings = ManagedObject._defaultContextualSettings;
        if (!this._bIsBeingDestroyed) {
            setTimeout(function () {
                if (!this.oContainer) {
                    this._propagateContextualSettings();
                }
            }.bind(this), 0);
        }
    }
    return this;
};
UIComponent.prototype.onBeforeRendering = function () {
};
UIComponent.prototype.onAfterRendering = function () {
};
UIComponent.prototype._getRouterClassName = function () {
    var oRoutingManifestEntry = this._getManifestEntry('/sap.ui5/routing', true) || {}, oRoutingConfig = oRoutingManifestEntry.config || {};
    return oRoutingConfig.routerClass;
};
export default UIComponent;