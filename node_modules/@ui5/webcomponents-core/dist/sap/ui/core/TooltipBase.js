import Control from './Control.js';
import Popup from './Popup.js';
import library from './library.js';
import KeyCodes from '../events/KeyCodes.js';
import jQuery from '../thirdparty/jquery.js';
import '../dom/jquery/control.js';
var OpenState = library.OpenState;
var TooltipBase = Control.extend('sap.ui.core.TooltipBase', {
    metadata: {
        'abstract': true,
        library: 'sap.ui.core',
        properties: {
            text: {
                type: 'string',
                group: 'Misc',
                defaultValue: ''
            },
            openDuration: {
                type: 'int',
                group: 'Behavior',
                defaultValue: 200
            },
            closeDuration: {
                type: 'int',
                group: 'Behavior',
                defaultValue: 200
            },
            myPosition: {
                type: 'sap.ui.core.Dock',
                group: 'Behavior',
                defaultValue: 'begin top'
            },
            atPosition: {
                type: 'sap.ui.core.Dock',
                group: 'Behavior',
                defaultValue: 'begin bottom'
            },
            offset: {
                type: 'string',
                group: 'Behavior',
                defaultValue: '10 3'
            },
            collision: {
                type: 'sap.ui.core.Collision',
                group: 'Behavior',
                defaultValue: 'flip'
            },
            openDelay: {
                type: 'int',
                group: 'Misc',
                defaultValue: 500
            },
            closeDelay: {
                type: 'int',
                group: 'Misc',
                defaultValue: 100
            }
        },
        events: { closed: {} }
    }
});
TooltipBase.prototype._getPopup = function () {
    var oPopup = new Popup();
    oPopup.setShadow(true);
    TooltipBase.prototype._getPopup = function () {
        return oPopup;
    };
    return oPopup;
};
TooltipBase.prototype.onfocusin = function (oEvent) {
    var oSC = jQuery(oEvent.target).control(0);
    if (oSC != null) {
        var oDomRef = oSC.getFocusDomRef();
        this.sStoredTooltip = null;
        if (oDomRef.title && oDomRef.title != '') {
            this.sStoredTooltip = oDomRef.title;
            oDomRef.title = '';
        }
        var oPopup = this._getPopup();
        if (!(oPopup.isOpen() && oPopup.getContent() == this)) {
            sap.ui.getWCCore().getRenderManager().render(this, sap.ui.getWCCore().getStaticAreaRef(), true);
        }
        var sValue = oDomRef.getAttribute('aria-describedby');
        var sIdsString = this.getId() + '-title ' + this.getId() + '-txt';
        if (sValue == null || sValue == '') {
            oDomRef.setAttribute('aria-describedby', sIdsString);
        } else if (sValue.indexOf(sIdsString) == -1) {
            oDomRef.setAttribute('aria-describedby', sValue + ' ' + sIdsString);
        }
    }
};
TooltipBase.prototype.onfocusout = function (oEvent) {
    var oSC = jQuery(oEvent.target).control(0);
    if (oSC != null) {
        var oDomRef = oSC.getFocusDomRef();
        if (this.sStoredTooltip) {
            oDomRef.title = this.sStoredTooltip;
        }
        var sValue = oDomRef.getAttribute('aria-describedby');
        var sIdsString = this.getId() + '-title ' + this.getId() + '-txt';
        if (sValue && sValue.indexOf(sIdsString) >= 0) {
            if (sValue.trim() == sIdsString) {
                oDomRef.removeAttribute('aria-describedby');
            } else {
                sValue = sValue.replace(sIdsString, '');
                oDomRef.setAttribute('aria-describedby', sValue);
            }
        }
    }
    if (TooltipBase.sOpenTimeout) {
        clearTimeout(TooltipBase.sOpenTimeout);
        TooltipBase.sOpenTimeout = undefined;
    }
    this.sCloseNowTimeout = setTimeout(this['closePopup'].bind(this), this.getCloseDelay());
};
TooltipBase.prototype.isStandardTooltip = function (oTooltip) {
    return typeof oTooltip === 'string' && !!oTooltip.trim();
};
TooltipBase.prototype.onmouseover = function (oEvent) {
    var oEventSource = jQuery(oEvent.target).control(0), oCurrentElement = jQuery(oEvent.currentTarget).control(0), oLeftElement = jQuery(oEvent.relatedTarget).control(0);
    if (!oEventSource) {
        return;
    }
    if (oEventSource === this) {
        if (this.sCloseNowTimeout) {
            clearTimeout(this.sCloseNowTimeout);
            this.sCloseNowTimeout = null;
        }
        oEvent.stopPropagation();
        oEvent.preventDefault();
        return;
    }
    if (oCurrentElement === oEventSource || !this.isStandardTooltip(oEventSource.getTooltip())) {
        if (this.sCloseNowTimeout) {
            clearTimeout(this.sCloseNowTimeout);
            this.sCloseNowTimeout = null;
            oEvent.stopPropagation();
            oEvent.preventDefault();
        }
    }
    if (oLeftElement) {
        if (oLeftElement.getParent()) {
            if (oLeftElement.getParent() === oCurrentElement && oCurrentElement === oEventSource) {
                var oLeftElementTooltip = oLeftElement.getTooltip();
                if (!this.isStandardTooltip(oLeftElementTooltip) && (!oLeftElementTooltip || !(oLeftElementTooltip instanceof TooltipBase))) {
                    if (this.sCloseNowTimeout) {
                        clearTimeout(this.sCloseNowTimeout);
                        this.sCloseNowTimeout = null;
                        oEvent.stopPropagation();
                        oEvent.preventDefault();
                    }
                }
            }
        }
    }
    if (this._currentControl === oEventSource || !this.isStandardTooltip(oEventSource.getTooltip())) {
        this.removeStandardTooltips();
        if (TooltipBase.sOpenTimeout) {
            clearTimeout(TooltipBase.sOpenTimeout);
        }
        TooltipBase.sOpenTimeout = setTimeout(this['openPopup'].bind(this, this._currentControl), this.getOpenDelay());
        oEvent.stopPropagation();
        oEvent.preventDefault();
    }
};
TooltipBase.prototype.onmouseout = function (oEvent) {
    if (TooltipBase.sOpenTimeout) {
        clearTimeout(TooltipBase.sOpenTimeout);
        TooltipBase.sOpenTimeout = undefined;
    }
    if (!this.sCloseNowTimeout) {
        this.sCloseNowTimeout = setTimeout(this['closePopup'].bind(this), this.getCloseDelay());
    }
    this.restoreStandardTooltips();
    oEvent.stopPropagation();
    oEvent.preventDefault();
};
TooltipBase.prototype.closePopup = function () {
    var oPopup = this._getPopup();
    if (this.sCloseNowTimeout) {
        clearTimeout(this.sCloseNowTimeout);
    }
    this.sCloseNowTimeout = undefined;
    oPopup.attachClosed(this.handleClosed, this);
    oPopup.close();
    this.restoreStandardTooltips();
};
TooltipBase.prototype.handleClosed = function () {
    this._getPopup().detachClosed(this.handleClosed, this);
    this.fireClosed();
};
TooltipBase.prototype.openPopup = function (oSC) {
    if (!this.getVisible()) {
        return;
    }
    if (oSC.getTooltip() != null) {
        if (this.sCloseNowTimeout) {
            clearTimeout(this.sCloseNowTimeout);
            this.sCloseNowTimeout = null;
            return;
        }
        var oPopup = this._getPopup();
        if (oPopup.isOpen() && oPopup.getContent() == this) {
            return;
        }
        sap.ui.getWCCore().getRenderManager().render(this, sap.ui.getWCCore().getStaticAreaRef(), true);
        var oDomRef = oSC.getDomRef();
        oPopup.setContent(this);
        oPopup.setPosition(this.getMyPosition(), this.getAtPosition(), oDomRef, this.getOffset(), this.getCollision());
        oPopup.setDurations(this.getOpenDuration(), this.getCloseDuration());
        oPopup.open();
        this.removeStandardTooltips();
    }
};
TooltipBase.prototype.removeStandardTooltips = function () {
    var oDomRef = this._currentControl.getDomRef();
    if (!this.aStoredTooltips) {
        this.aStoredTooltips = [];
    } else {
        return;
    }
    var tooltip = '';
    while (oDomRef && !(oDomRef === document)) {
        tooltip = oDomRef.title;
        if (tooltip) {
            this.aStoredTooltips.push({
                domref: oDomRef,
                tooltip: tooltip
            });
            oDomRef.title = '';
        }
        oDomRef = oDomRef.parentNode;
    }
    if (this._currentControl.getTooltipDomRefs) {
        var aDomRefs = this._currentControl.getTooltipDomRefs();
        for (var i = 0; i < aDomRefs.length; i++) {
            oDomRef = aDomRefs[i];
            if (oDomRef) {
                tooltip = oDomRef.title;
                if (tooltip) {
                    this.aStoredTooltips.push({
                        domref: oDomRef,
                        tooltip: tooltip
                    });
                    oDomRef.title = '';
                }
            }
        }
    }
};
TooltipBase.prototype.restoreStandardTooltips = function () {
    var oPopup = this._getPopup();
    var eState = oPopup.getOpenState();
    if (eState === OpenState.OPEN || eState === OpenState.OPENING) {
        return;
    }
    if (TooltipBase.sOpenTimeout) {
        return;
    }
    if (this.aStoredTooltips) {
        for (var i = 0; i < this.aStoredTooltips.length; i++) {
            var oDomRef = this.aStoredTooltips[i].domref;
            oDomRef.title = this.aStoredTooltips[i].tooltip;
        }
    }
    this.aStoredTooltips = null;
};
TooltipBase.prototype._setParent = TooltipBase.prototype.setParent;
TooltipBase.prototype.setParent = function (oParent, sAggregationName) {
    var _oPopup = this._getPopup();
    if (_oPopup && _oPopup.isOpen()) {
        this.closePopup();
    }
    this._setParent.apply(this, arguments);
};
TooltipBase.prototype.onkeydown = function (oEvent) {
    if (oEvent.ctrlKey && oEvent.which == KeyCodes.I) {
        var oEventSource = jQuery(oEvent.target).control(0);
        if (oEventSource != null) {
            if (this._currentControl === oEventSource || !this.isStandardTooltip(oEventSource.getTooltip())) {
                this.removeStandardTooltips();
                this.openPopup(this._currentControl);
                oEvent.preventDefault();
                oEvent.stopPropagation();
            }
        }
    } else if (oEvent.which == KeyCodes.ESCAPE) {
        if (TooltipBase.sOpenTimeout) {
            clearTimeout(TooltipBase.sOpenTimeout);
            TooltipBase.sOpenTimeout = undefined;
        }
        var bWasOpen = this.oPopup && this.oPopup.isOpen();
        this.closePopup();
        if (bWasOpen) {
            oEvent.preventDefault();
            oEvent.stopPropagation();
        }
    }
};
TooltipBase.prototype._closeOrPreventOpen = function () {
    var oPopup = this._getPopup();
    if (oPopup.isOpen()) {
        this.closePopup();
    } else if (TooltipBase.sOpenTimeout) {
        clearTimeout(TooltipBase.sOpenTimeout);
        TooltipBase.sOpenTimeout = undefined;
    }
};
export default TooltipBase;