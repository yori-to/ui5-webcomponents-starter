import Element from './Element.js';
import assert from '../../base/assert.js';
import Log from '../../base/Log.js';
import jQuery from '../thirdparty/jquery.js';
var CustomStyleClassSupport = function () {
    if (!(this instanceof Element)) {
        return;
    }
    var fOriginalClone = this.clone;
    this.clone = function () {
        var oClone = fOriginalClone.apply(this, arguments);
        if (this.aCustomStyleClasses) {
            oClone.aCustomStyleClasses = this.aCustomStyleClasses.slice();
        }
        if (this.mCustomStyleClassMap) {
            oClone.mCustomStyleClassMap = jQuery.extend({}, this.mCustomStyleClassMap);
        }
        return oClone;
    };
    var rNonWhiteSpace = /\S+/g;
    this.addStyleClass = function (sStyleClass, bSuppressRerendering) {
        assert(typeof sStyleClass === 'string', 'sStyleClass must be a string');
        var aClasses, bModified = false;
        var aChangedScopes = [], aScopes = getScopes();
        if (!this.aCustomStyleClasses) {
            this.aCustomStyleClasses = [];
        }
        if (!this.mCustomStyleClassMap) {
            this.mCustomStyleClassMap = {};
        }
        if (sStyleClass && typeof sStyleClass === 'string') {
            if (sStyleClass.indexOf('"') > -1) {
                return this;
            }
            if (sStyleClass.indexOf('\'') > -1) {
                return this;
            }
            aClasses = sStyleClass.match(rNonWhiteSpace) || [];
            aClasses.forEach(function (sClass) {
                if (!this.mCustomStyleClassMap[sClass]) {
                    this.mCustomStyleClassMap[sClass] = true;
                    this.aCustomStyleClasses.push(sClass);
                    if (aScopes && aScopes.indexOf(sClass) > -1) {
                        aChangedScopes.push(sClass);
                    }
                    bModified = true;
                }
            }.bind(this));
            if (!bModified) {
                return this;
            }
            var oRoot = this.getDomRef();
            if (oRoot) {
                jQuery(oRoot).addClass(sStyleClass);
            } else if (bSuppressRerendering === false) {
                this.invalidate();
            }
            if (aChangedScopes.length > 0) {
                fireThemeScopingChangedEvent(this, aChangedScopes, true);
            }
        }
        return this;
    };
    this.removeStyleClass = function (sStyleClass, bSuppressRerendering) {
        assert(typeof sStyleClass === 'string', 'sStyleClass must be a string');
        var aClasses, bExist = false, nIndex;
        var aChangedScopes = [], aScopes = getScopes();
        if (sStyleClass && typeof sStyleClass === 'string' && this.aCustomStyleClasses && this.mCustomStyleClassMap) {
            aClasses = sStyleClass.match(rNonWhiteSpace) || [];
            aClasses.forEach(function (sClass) {
                if (this.mCustomStyleClassMap[sClass]) {
                    bExist = true;
                    nIndex = this.aCustomStyleClasses.indexOf(sClass);
                    if (nIndex !== -1) {
                        this.aCustomStyleClasses.splice(nIndex, 1);
                        delete this.mCustomStyleClassMap[sClass];
                        if (aScopes && aScopes.indexOf(sClass) > -1) {
                            aChangedScopes.push(sClass);
                        }
                    }
                }
            }.bind(this));
        }
        if (bExist) {
            var oRoot = this.getDomRef();
            if (oRoot) {
                jQuery(oRoot).removeClass(sStyleClass);
            } else if (bSuppressRerendering === false) {
                this.invalidate();
            }
            if (aChangedScopes.length > 0) {
                fireThemeScopingChangedEvent(this, aChangedScopes, false);
            }
        }
        return this;
    };
    this.toggleStyleClass = function (sStyleClass, bAdd) {
        assert(typeof sStyleClass === 'string', 'sStyleClass must be a string');
        if (sStyleClass && typeof sStyleClass === 'string') {
            if (bAdd === true) {
                this.addStyleClass(sStyleClass);
            } else if (bAdd === false) {
                this.removeStyleClass(sStyleClass);
            } else if (bAdd === undefined) {
                this.hasStyleClass(sStyleClass) ? this.removeStyleClass(sStyleClass) : this.addStyleClass(sStyleClass);
            } else {
                Log.warning(this.toString() + '- toggleStyleClass(): bAdd should be a boolean or undefined, but is \'' + bAdd + '\'');
            }
        }
        return this;
    };
    this.hasStyleClass = function (sStyleClass) {
        assert(typeof sStyleClass === 'string', 'sStyleClass must be a string');
        var aClasses;
        if (sStyleClass && typeof sStyleClass === 'string' && this.mCustomStyleClassMap) {
            aClasses = sStyleClass.match(rNonWhiteSpace) || [];
            return aClasses.length !== 0 && aClasses.every(function (sClass) {
                return this.mCustomStyleClassMap[sClass];
            }.bind(this));
        }
        return false;
    };
    this.getMetadata().addPublicMethods([
        'addStyleClass',
        'removeStyleClass',
        'toggleStyleClass',
        'hasStyleClass'
    ]);
};
var Parameters;
function getScopes() {
    if (!Parameters) {
        Parameters = sap.ui.require('sap/ui/core/theming/Parameters');
    }
    if (Parameters) {
        return Parameters._getScopes(true);
    }
}
function fireThemeScopingChangedEvent(oElement, aScopeClasses, bIsAdded) {
    sap.ui.getWCCore().fireThemeScopingChanged({
        scopes: aScopeClasses,
        added: bIsAdded,
        element: oElement
    });
}
export default CustomStyleClassSupport;