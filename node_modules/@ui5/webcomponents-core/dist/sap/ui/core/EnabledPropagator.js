import Control from './Control.js';
var EnabledPropagator = function (bDefault, bLegacy) {
    if (!(this instanceof Control)) {
        throw new Error('EnabledPropagator only supports subclasses of Control');
    }
    if (bDefault === undefined) {
        bDefault = true;
    }
    function findParentWithEnabled(oControl) {
        var oParent = oControl.getParent();
        while (oParent && !oParent.getEnabled && oParent.getParent) {
            oParent = oParent.getParent();
        }
        return oParent;
    }
    if (this.getEnabled === undefined) {
        this.getEnabled = function () {
            var oParent = findParentWithEnabled(this);
            return oParent && oParent.getEnabled && !oParent.getEnabled() ? false : this.getProperty('enabled');
        };
        if (bLegacy) {
            this.getMetadata().addProperty('Enabled', {
                type: 'boolean',
                group: 'Behavior',
                defaultValue: !!bDefault
            });
        }
        this.getMetadata().addProperty('enabled', {
            type: 'boolean',
            group: 'Behavior',
            defaultValue: !!bDefault
        });
        this.getMetadata().addPublicMethods('getEnabled');
    } else {
        var fnOld = this.getEnabled;
        this.getEnabled = function () {
            var oParent = findParentWithEnabled(this);
            return oParent && oParent.getEnabled && !oParent.getEnabled() ? false : fnOld.apply(this);
        };
    }
    if (this.setEnabled === undefined) {
        this.setEnabled = function (bEnabled) {
            return this.setProperty('enabled', bEnabled);
        };
        this.getMetadata().addPublicMethods('setEnabled');
    }
};
export default EnabledPropagator;