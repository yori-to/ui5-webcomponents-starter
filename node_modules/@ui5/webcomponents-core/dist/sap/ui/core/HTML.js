import jQuery from '../thirdparty/jquery.js';
import Log from '../../base/Log.js';
import Control from './Control.js';
import RenderManager from './RenderManager.js';
import HTMLRenderer from './HTMLRenderer.js';
import sanitizeHTML from '../../base/security/sanitizeHTML.js';
var RenderPrefixes = RenderManager.RenderPrefixes;
var HTML = Control.extend('sap.ui.core.HTML', {
    metadata: {
        library: 'sap.ui.core',
        properties: {
            content: {
                type: 'string',
                group: 'Misc',
                defaultValue: null
            },
            preferDOM: {
                type: 'boolean',
                group: 'Misc',
                defaultValue: true
            },
            sanitizeContent: {
                type: 'boolean',
                group: 'Misc',
                defaultValue: false
            },
            visible: {
                type: 'boolean',
                group: 'Appearance',
                defaultValue: true
            }
        },
        events: { afterRendering: { parameters: { isPreservedDOM: { type: 'boolean' } } } }
    }
});
HTML.prototype.getDomRef = function (sSuffix) {
    var sId = sSuffix ? this.getId() + '-' + sSuffix : this.getId();
    return (RenderPrefixes.Dummy + sId ? window.document.getElementById(RenderPrefixes.Dummy + sId) : null) || (sId ? window.document.getElementById(sId) : null);
};
HTML.prototype.setContent = function (sContent) {
    function parseHTML(s) {
        if (jQuery.parseHTML) {
            var a = jQuery.parseHTML(s);
            if (a) {
                var start = 0, end = a.length;
                while (start < end && a[start].nodeType != 1) {
                    start++;
                }
                while (start < end && a[end - 1].nodeType != 1) {
                    end--;
                }
                if (start > 0 || end < a.length) {
                    a = a.slice(start, end);
                }
                return jQuery(a);
            }
        }
        return jQuery(s);
    }
    if (this.getSanitizeContent()) {
        Log.trace('sanitizing HTML content for ' + this);
        sContent = sanitizeHTML(sContent);
    }
    this.setProperty('content', sContent, true);
    if (this.getDomRef()) {
        var $newContent = parseHTML(this.getContent());
        jQuery(this.getDomRef()).replaceWith($newContent);
        this._postprocessNewContent($newContent);
    } else {
        this.invalidate();
    }
    return this;
};
HTML.prototype.setSanitizeContent = function (bSanitizeContent) {
    this.setProperty('sanitizeContent', bSanitizeContent, true);
    if (bSanitizeContent) {
        this.setContent(this.getContent());
    }
    return this;
};
HTML.prototype.onBeforeRendering = function () {
    if (this.getPreferDOM() && this.getDomRef() && !RenderManager.isPreservedContent(this.getDomRef())) {
        RenderManager.preserveContent(this.getDomRef(), true, false);
    }
};
HTML.prototype.onAfterRendering = function () {
    if (!this.getVisible()) {
        return;
    }
    var $placeholder = jQuery(RenderPrefixes.Dummy + this.getId() ? window.document.getElementById(RenderPrefixes.Dummy + this.getId()) : null);
    var $oldContent = RenderManager.findPreservedContent(this.getId());
    var $newContent;
    var isPreservedDOM = false;
    if (!this.getPreferDOM() || $oldContent.size() == 0) {
        $oldContent.remove();
        $newContent = new jQuery(this.getContent());
        $placeholder.replaceWith($newContent);
    } else if ($oldContent.size() > 0) {
        $placeholder.replaceWith($oldContent);
        $newContent = $oldContent;
        isPreservedDOM = true;
    } else {
        $placeholder.remove();
    }
    this._postprocessNewContent($newContent);
    this.fireAfterRendering({ isPreservedDOM: isPreservedDOM });
};
HTML.prototype._postprocessNewContent = function ($newContent) {
    if ($newContent && $newContent.size() > 0) {
        if ($newContent.length > 1) {
            Log.warning('[Unsupported Feature]: ' + this + ' has rendered ' + $newContent.length + ' root nodes!');
        } else {
            var sContentId = $newContent.attr('id');
            if (sContentId && sContentId != this.getId()) {
                Log.warning('[Unsupported Feature]: Id of HTML Control \'' + this.getId() + '\' does not match with content id \'' + sContentId + '\'!');
            }
        }
        RenderManager.markPreservableContent($newContent, this.getId());
        if ($newContent.find('#' + this.getId().replace(/(:|\.)/g, '\\$1')).length === 0) {
            $newContent.filter(':not([id])').first().attr('id', this.getId());
        }
    } else {
        Log.debug('' + this + ' is empty after rendering, setting bOutput to false');
        this.bOutput = false;
    }
};
HTML.prototype.setDOMContent = function (oDom) {
    var $newContent = jQuery(oDom);
    if (this.getDomRef()) {
        jQuery(this.getDomRef()).replaceWith($newContent);
        this._postprocessNewContent($newContent);
    } else {
        $newContent.appendTo(RenderManager.getPreserveAreaRef());
        if (this.getUIArea()) {
            this.getUIArea().invalidate();
        }
        this._postprocessNewContent($newContent);
    }
    return this;
};
HTML.prototype.setTooltip = function () {
    Log.warning('The sap.ui.core.HTML control doesn\'t support tooltips. Add the tooltip to the HTML content instead.');
    return Control.prototype.setTooltip.apply(this, arguments);
};
'hasStyleClass addStyleClass removeStyleClass toggleStyleClass'.split(' ').forEach(function (method) {
    HTML.prototype[method] = function () {
        Log.warning('The sap.ui.core.HTML control doesn\'t support custom style classes. Manage custom CSS classes in the HTML content instead.');
        return Control.prototype[method].apply(this, arguments);
    };
});
export default HTML;