(function () {
  "use strict";
  function defineLessSupport() {
    sap.ui.define("sap/ui/core/plugin/LessSupport", ["sap/ui/thirdparty/jquery", "sap/ui/core/Core", "sap/ui/core/ThemeCheck", "sap/base/Log", "sap/base/util/UriParameters"], function (jQuery, Core, ThemeCheck, Log, UriParameters) {
      var LESS_FILENAME = "library.source";
      var CSS_FILENAME = "library";
      var LessSupport = function () {};
      LessSupport.prototype.startPlugin = function (oCore, bOnInit) {
        Log.info("Starting LessSupport plugin.");
        Log.warning("  NOT FOR PRODUCTIVE USAGE! LessSupport is an experimental feature which might change in future!");
        var oUriParams = new UriParameters(window.location.href);
        var sNoLess = oUriParams.get("sap-ui-xx-noless");
        if (sNoLess) {
          sNoLess = sNoLess.toLowerCase();
        }
        try {
          if (sNoLess !== "false" && (window.top.JsUnit || window.sap.ui.test && window.sap.ui.test.qunit)) {
            Log.info("  LessSupport has been deactivated for JSUnit Testrunner or QUnit.");
            return;
          }
        } catch (oExp) {}
        if (sNoLess && sNoLess !== "false") {
          Log.info("  LessSupport has been deactivated by URL parameter.");
          return;
        } else {
          Log.info("  LessSupport can be deactivated by adding the following parameter to your URL: \"sap-ui-xx-noless=X\".");
        }
        window.less = window.less || ({
          env: "development",
          relativeUrls: true,
          errorReporting: function (sMethod, ex, sRootHref) {
            if (sMethod === "add" && window.console) {
              window.console.error("Failed to parse: " + sRootHref, ex);
            }
          }
        });
        sap.ui.requireSync("sap/ui/thirdparty/less");
        this.oCore = oCore;
        this.bActive = true;
        this.oCore.includeLibraryTheme = jQuery.proxy(this.includeLibraryTheme, this);
        this.oCore.applyTheme = jQuery.proxy(this.applyTheme, this);
        var that = this, bUseLess = false;
        var aLibs = [];
        jQuery("link[id^=sap-ui-theme-]").each(function () {
          var _bUseLess = that.initLink(this);
          bUseLess = _bUseLess || bUseLess;
          if (_bUseLess) {
            aLibs.push(this.id.substr(13));
          }
        });
        this.refreshLess(bUseLess);
        var counter = 0;
        function checkThemeApplied() {
          var ok = true;
          var check;
          for (var i = 0; i < aLibs.length; i++) {
            check = ThemeCheck.checkStyle("less:" + aLibs[i], true);
            if (check) {
              jQuery(document.getElementById("sap-ui-theme-" + aLibs[i])).attr("data-sap-ui-ready", "true");
            }
            ok = ok && check;
          }
          counter++;
          if (counter > 100) {
            ok = true;
            Log.warning("LessSupport: Max theme check cycles reached.");
          }
          if (ok) {
            ThemeCheck.themeLoaded = true;
            setTimeout(function () {
              oCore.fireThemeChanged({
                theme: oCore.sTheme
              });
            }, 0);
          } else {
            that.iCheckThemeAppliedTimeout = setTimeout(checkThemeApplied, 100);
          }
        }
        if (bUseLess) {
          this.iCheckThemeAppliedTimeout = setTimeout(checkThemeApplied, 100);
        }
      };
      LessSupport.prototype.stopPlugin = function () {
        Log.info("Stopping LessSupport plugin.");
        if (this.bActive) {
          clearTimeout(this.iCheckThemeAppliedTimeout);
          delete this.iCheckThemeAppliedTimeout;
          jQuery("link[id^=sap-ui-theme-]").each(function () {
            var sLibName = this.id.substr(13);
            jQuery(document.getElementById("less:" + sLibName)).remove();
          });
          delete this.oCore.includeLibraryTheme;
          delete this.oCore.applyTheme;
          this.oCore = null;
        }
      };
      LessSupport.prototype.initLink = function (oLink) {
        var bUseLess = this.updateLink(oLink);
        jQuery("<style>").attr("id", "less:" + oLink.id.substr(13)).attr("type", "text/css").attr("media", this.media || "screen").insertAfter(oLink);
        return bUseLess;
      };
      LessSupport.prototype.updateLink = function (oLink) {
        var sLibName = oLink.id.substr(13);
        var pos;
        if ((pos = sLibName.indexOf("-[")) > 0) {
          sLibName = sLibName.substr(0, pos);
        }
        var sBaseUrl = this.oCore._getThemePath(sLibName, this.oCore.sTheme);
        var iLessLastModified = this.getLastModified(sBaseUrl + LESS_FILENAME + ".less");
        var iCssLastModified = this.getLastModified(sBaseUrl + CSS_FILENAME + ".css");
        var bUseLess = iLessLastModified == 0 && iCssLastModified > 0 || iLessLastModified > iCssLastModified;
        if (!bUseLess) {
          var sBaseThemeUrl = this.oCore._getThemePath(sLibName, "base");
          var iBaseLessLastModified = this.getLastModified(sBaseThemeUrl + LESS_FILENAME + ".less");
          var iBaseCssLastModified = this.getLastModified(sBaseThemeUrl + CSS_FILENAME + ".css");
          bUseLess = iBaseLessLastModified == 0 && iBaseCssLastModified > 0 || iBaseLessLastModified > iBaseCssLastModified;
        }
        var sFileName = bUseLess ? LESS_FILENAME : CSS_FILENAME;
        Log.debug("LessSupport.updateLink: " + sBaseUrl + sFileName + ": " + (bUseLess ? "LESS" : "CSS"));
        if (!bUseLess) {
          if (oLink.title) {
            delete oLink.title;
          }
          oLink.rel = "stylesheet";
          oLink.href = sBaseUrl + sFileName + ".css";
          this.unregisterLink(oLink);
          return false;
        }
        oLink.title = sLibName;
        oLink.rel = "stylesheet/less";
        oLink.href = sBaseUrl + sFileName + ".less";
        this.registerLink(oLink);
        return true;
      };
      LessSupport.prototype.getLastModified = function (sUrl) {
        var iLastModified;
        jQuery.ajax({
          url: sUrl,
          type: "HEAD",
          async: false,
          success: function (data, textStatus, xhr) {
            var sLastModified = xhr.getResponseHeader("Last-Modified");
            iLastModified = sLastModified ? Date.parse(sLastModified) : 0;
          },
          error: function (xhr, textStatus, error) {
            iLastModified = -1;
          }
        });
        Log.debug("CSS/LESS head-check: " + sUrl + "; last-modified: " + iLastModified);
        return iLastModified;
      };
      LessSupport.prototype.applyTheme = function (sThemeName, sThemeBaseUrl) {
        sap.ui.core.Core.prototype.applyTheme.apply(this.oCore, arguments);
        var that = this, bUseLess = false;
        jQuery("link[id^=sap-ui-theme-]").each(function () {
          bUseLess = that.updateLink(this) || bUseLess;
        });
        this.refreshLess(bUseLess);
      };
      LessSupport.prototype.includeLibraryTheme = function (sLibName) {
        sap.ui.core.Core.prototype.includeLibraryTheme.apply(this.oCore, arguments);
        var that = this, bUseLess = false;
        jQuery("link[id='sap-ui-theme-" + sLibName + "']").each(function () {
          bUseLess = that.initLink(this) || bUseLess;
        });
        this.refreshLess(bUseLess);
      };
      LessSupport.prototype.registerLink = function (oLink) {
        if (window.less && window.less.sheets) {
          var iIndex = window.less.sheets.indexOf(oLink);
          if (iIndex === -1) {
            window.less.sheets.push(oLink);
          }
        }
      };
      LessSupport.prototype.unregisterLink = function (oLink) {
        if (window.less && window.less.sheets) {
          var sLibName = oLink.id.substr(13);
          var iIndex = window.less.sheets.indexOf(oLink);
          if (iIndex >= 0) {
            window.less.sheets.splice(iIndex, 1);
            jQuery(document.getElementById("less:" + sLibName)).html("");
          }
        }
      };
      LessSupport.prototype.refreshLess = function (bUseLess) {
        if (bUseLess) {
          if (!document.getElementById("sap-ui-ide-less-mode")) {
            jQuery("<span>").attr("id", "sap-ui-ide-less-mode").css("position", "absolute").css("right", "10px").css("bottom", "10px").css("padding", "10px").css("border", "3px solid red").css("border-radius", "10px").css("opacity", "0.75").css("color", "black").css("background-color", "white").css("font-weight", "bold").css("z-index", "99999").append(jQuery("<span>").text("LESS MODE").css({
              "display": "block",
              "text-align": "center"
            })).append(jQuery("<a>").attr("href", "#").text("Deactivate").attr("title", "Less mode is active. Click to deactivate it (requires page refresh).").css({
              "float": "left",
              "clear": "left",
              "font-size": "0.75em",
              "text-decoration": "underline",
              "margin-right": "0.5em"
            }).bind("click", function (oEvent) {
              oEvent.preventDefault();
              if (window.confirm("Deactivating the Less Mode refreshes the page. Do you want to proceed?")) {
                var sSearch = window.location.search;
                window.location.search = (sSearch.charAt(0) === "?" ? sSearch + "&" : "?") + "sap-ui-xx-noless=true";
              }
            })).append(jQuery("<a>").attr("href", "#").text("Hide").attr("title", "Less mode is active. Click to hide this information.").css({
              "float": "right",
              "font-size": "0.75em",
              "text-decoration": "underline"
            }).bind("click", function (oEvent) {
              oEvent.preventDefault();
              jQuery(this).parent().css("display", "none");
            })).appendTo(window.document.body);
          }
        } else {
          jQuery("#sap-ui-ide-less-mode").remove();
        }
        if (window.less && window.less.refresh && window.less.sheets.length > 0) {
          var mLibVariables = {};
          var mLessHrefToLib = {};
          jQuery(window.less.sheets).each(function () {
            mLessHrefToLib[this.href] = jQuery(this).attr("id").substr(13);
          });
          var fnLessTreeRuleEval = window.less.tree.Rule.prototype.eval;
          window.less.tree.Rule.prototype.eval = function (env) {
            if (this.variable && typeof this.name === "string" && this.name.indexOf("@_PRIVATE_") !== 0) {
              var sLibName = mLessHrefToLib[this.currentFileInfo.rootFilename];
              if (!sLibName) {
                Log.warning("LessSupport: could not find libary (" + this.currentFileInfo.rootFilename + ")");
              }
              var mVariables = mLibVariables[sLibName];
              if (!mVariables) {
                mVariables = mLibVariables[sLibName] = {};
              }
              try {
                mVariables[this.name.substr(1)] = this.value.eval(env).toCSS(env);
              } catch (ex) {}
            }
            return fnLessTreeRuleEval.apply(this, arguments);
          };
          window.less.refresh();
          var Parameters = sap.ui.requireSync("sap/ui/core/theming/Parameters");
          Parameters._setOrLoadParameters(mLibVariables);
          window.less.tree.Rule.prototype.eval = fnLessTreeRuleEval;
        }
      };
      var oThis = new LessSupport();
      sap.ui.getWCCore().registerPlugin(oThis);
      LessSupport.refresh = function () {
        oThis.refreshLess(true);
        if (oThis.oCore.oThemeCheck) {
          oThis.oCore.oThemeCheck.fireThemeChangedEvent(false);
        }
      };
      return LessSupport;
    });
  }
  if (!(window.sap && window.sap.ui && window.sap.ui.define)) {
    var fnHandler = function () {
      document.removeEventListener("DOMContentLoaded", fnHandler, false);
      defineLessSupport();
    };
    document.addEventListener("DOMContentLoaded", fnHandler, false);
  } else {
    defineLessSupport();
  }
})();
