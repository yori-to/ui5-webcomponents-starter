import BaseObject from '../base/Object.js';
import ManagedObject from '../base/ManagedObject.js';
import ElementMetadata from './ElementMetadata.js';
import Device from '../Device.js';
import Interaction from '../performance/trace/Interaction.js';
import Log from '../../base/Log.js';
import assert from '../../base/assert.js';
import jQuery from '../thirdparty/jquery.js';
var Element = ManagedObject.extend('sap.ui.core.Element', {
    metadata: {
        stereotype: 'element',
        'abstract': true,
        publicMethods: [
            'getId',
            'getMetadata',
            'getTooltip_AsString',
            'getTooltip_Text',
            'getModel',
            'setModel',
            'hasModel',
            'bindElement',
            'unbindElement',
            'getElementBinding',
            'prop',
            'getLayoutData',
            'setLayoutData'
        ],
        library: 'sap.ui.core',
        aggregations: {
            tooltip: {
                name: 'tooltip',
                type: 'sap.ui.core.TooltipBase',
                altTypes: ['string'],
                multiple: false
            },
            customData: {
                name: 'customData',
                type: 'sap.ui.core.CustomData',
                multiple: true,
                singularName: 'customData'
            },
            layoutData: {
                name: 'layoutData',
                type: 'sap.ui.core.LayoutData',
                multiple: false,
                singularName: 'layoutData'
            },
            dependents: {
                name: 'dependents',
                type: 'sap.ui.core.Element',
                multiple: true
            },
            dragDropConfig: {
                name: 'dragDropConfig',
                type: 'sap.ui.core.dnd.DragDropBase',
                multiple: true,
                singularName: 'dragDropConfig'
            }
        }
    },
    constructor: function (sId, mSettings) {
        ManagedObject.apply(this, arguments);
    },
    renderer: null
}, ElementMetadata);
Element.defineClass = function (sClassName, oStaticInfo, fnMetaImpl) {
    return BaseObject.defineClass(sClassName, oStaticInfo, fnMetaImpl || ElementMetadata);
};
Element.prototype.getInterface = function () {
    return this;
};
Element.prototype._handleEvent = function (oEvent) {
    var that = this, sHandlerName = 'on' + oEvent.type;
    function each(aDelegates) {
        var i, l, oDelegate;
        if (aDelegates && (l = aDelegates.length) > 0) {
            aDelegates = l === 1 ? aDelegates : aDelegates.slice();
            for (i = 0; i < l; i++) {
                if (oEvent.isImmediateHandlerPropagationStopped()) {
                    return;
                }
                oDelegate = aDelegates[i].oDelegate;
                if (oDelegate[sHandlerName]) {
                    oDelegate[sHandlerName].call(aDelegates[i].vThis === true ? that : aDelegates[i].vThis || oDelegate, oEvent);
                }
            }
        }
    }
    each(this.aBeforeDelegates);
    if (oEvent.isImmediateHandlerPropagationStopped()) {
        return;
    }
    if (this[sHandlerName]) {
        this[sHandlerName](oEvent);
    }
    each(this.aDelegates);
};
Element.prototype.init = function () {
};
Element.prototype.exit = function () {
};
Element.create = ManagedObject.create;
Element.prototype.toString = function () {
    return 'Element ' + this.getMetadata().getName() + '#' + this.sId;
};
Element.prototype.getDomRef = function (sSuffix) {
    return (sSuffix ? this.getId() + '-' + sSuffix : this.getId()) ? window.document.getElementById(sSuffix ? this.getId() + '-' + sSuffix : this.getId()) : null;
};
Element.prototype.$ = function (sSuffix) {
    return jQuery(this.getDomRef(sSuffix));
};
Element.prototype.isActive = function () {
    return this.oParent && this.oParent.isActive();
};
Element.prototype.prop = function (sPropertyName, oValue) {
    var oPropertyInfo = this.getMetadata().getAllSettings()[sPropertyName];
    if (oPropertyInfo) {
        if (arguments.length == 1) {
            return this[oPropertyInfo._sGetter]();
        } else {
            this[oPropertyInfo._sMutator](oValue);
            return this;
        }
    }
};
Element.prototype.insertDependent = function (oElement, iIndex) {
    return this.insertAggregation('dependents', oElement, iIndex, true);
};
Element.prototype.addDependent = function (oElement) {
    return this.addAggregation('dependents', oElement, true);
};
Element.prototype.removeDependent = function (vElement) {
    return this.removeAggregation('dependents', vElement, true);
};
Element.prototype.removeAllDependents = function () {
    return this.removeAllAggregation('dependents', true);
};
Element.prototype.destroyDependents = function () {
    return this.destroyAggregation('dependents', true);
};
Element.prototype.rerender = function () {
    if (this.oParent) {
        this.oParent.rerender();
    }
};
Element.prototype.getUIArea = function () {
    return this.oParent ? this.oParent.getUIArea() : null;
};
Element.prototype.destroy = function (bSuppressInvalidate) {
    if (this.bIsDestroyed) {
        return;
    }
    Element._updateFocusInfo(this);
    ManagedObject.prototype.destroy.call(this, bSuppressInvalidate);
    if (bSuppressInvalidate !== 'KeepDom' || this.getMetadata().isInstanceOf('sap.ui.core.PopupInterface')) {
        this.$().remove();
    } else {
        Log.debug('DOM is not removed on destroy of ' + this);
    }
    this.data = noCustomDataAfterDestroy;
};
function noCustomDataAfterDestroy() {
    var argLength = arguments.length;
    if (argLength === 1 && arguments[0] !== null && typeof arguments[0] == 'object' || argLength > 1 && argLength < 4 && arguments[1] !== null) {
        Log.error('Cannot create custom data on an already destroyed element \'' + this + '\'');
        return this;
    }
    return Element.prototype.data.apply(this, arguments);
}
Element.prototype.fireEvent = function (sEventId, mParameters, bAllowPreventDefault, bEnableEventBubbling) {
    if (this.hasListeners(sEventId)) {
        Interaction.notifyStepStart(this);
    }
    if (typeof mParameters === 'boolean') {
        bEnableEventBubbling = bAllowPreventDefault;
        bAllowPreventDefault = mParameters;
        mParameters = null;
    }
    mParameters = mParameters || {};
    mParameters.id = mParameters.id || this.getId();
    if (Element._trackEvent) {
        Element._trackEvent(sEventId, this);
    }
    return ManagedObject.prototype.fireEvent.call(this, sEventId, mParameters, bAllowPreventDefault, bEnableEventBubbling);
};
Element._trackEvent = undefined;
Element.prototype.addDelegate = function (oDelegate, bCallBefore, oThis, bClone) {
    assert(oDelegate, 'oDelegate must be not null or undefined');
    if (!oDelegate) {
        return this;
    }
    this.removeDelegate(oDelegate);
    if (typeof bCallBefore === 'object') {
        bClone = oThis;
        oThis = bCallBefore;
        bCallBefore = false;
    }
    if (typeof oThis === 'boolean') {
        bClone = oThis;
        oThis = undefined;
    }
    (bCallBefore ? this.aBeforeDelegates : this.aDelegates).push({
        oDelegate: oDelegate,
        bClone: !!bClone,
        vThis: oThis === this ? true : oThis
    });
    return this;
};
Element.prototype.removeDelegate = function (oDelegate) {
    var i;
    for (i = 0; i < this.aDelegates.length; i++) {
        if (this.aDelegates[i].oDelegate == oDelegate) {
            this.aDelegates.splice(i, 1);
            i--;
        }
    }
    for (i = 0; i < this.aBeforeDelegates.length; i++) {
        if (this.aBeforeDelegates[i].oDelegate == oDelegate) {
            this.aBeforeDelegates.splice(i, 1);
            i--;
        }
    }
    return this;
};
Element.prototype.addEventDelegate = function (oDelegate, oThis) {
    return this.addDelegate(oDelegate, false, oThis, true);
};
Element.prototype.removeEventDelegate = function (oDelegate) {
    return this.removeDelegate(oDelegate);
};
Element.prototype.getFocusDomRef = function () {
    return this.getDomRef() || null;
};
function getAncestorScrollPositions(oDomRef) {
    var oParentDomRef, aScrollHierarchy = [];
    oParentDomRef = oDomRef.parentNode;
    while (oParentDomRef) {
        aScrollHierarchy.push({
            node: oParentDomRef,
            scrollLeft: oParentDomRef.scrollLeft,
            scrollTop: oParentDomRef.scrollTop
        });
        oParentDomRef = oParentDomRef.parentNode;
    }
    return aScrollHierarchy;
}
function restoreScrollPositions(aScrollHierarchy) {
    aScrollHierarchy.forEach(function (oScrollInfo) {
        var oDomRef = oScrollInfo.node;
        if (oDomRef.scrollLeft !== oScrollInfo.scrollLeft) {
            oDomRef.scrollLeft = oScrollInfo.scrollLeft;
        }
        if (oDomRef.scrollTop !== oScrollInfo.scrollTop) {
            oDomRef.scrollTop = oScrollInfo.scrollTop;
        }
    });
}
Element.prototype.focus = function (oFocusInfo) {
    var oFocusDomRef = this.getFocusDomRef(), aScrollHierarchy;
    oFocusInfo = oFocusInfo || {};
    if (oFocusDomRef) {
        if (oFocusInfo.preventScroll === true) {
            aScrollHierarchy = getAncestorScrollPositions(oFocusDomRef);
        }
        oFocusDomRef.focus();
        if (aScrollHierarchy && aScrollHierarchy.length > 0) {
            if (Device.browser.safari || Device.browser.msie || Device.browser.edge) {
                setTimeout(restoreScrollPositions.bind(null, aScrollHierarchy), 0);
            } else {
                restoreScrollPositions(aScrollHierarchy);
            }
        }
    }
};
Element.prototype.getFocusInfo = function () {
    return { id: this.getId() };
};
Element.prototype.applyFocusInfo = function (oFocusInfo) {
    this.focus(oFocusInfo);
    return this;
};
Element.prototype._refreshTooltipBaseDelegate = function (oTooltip) {
    var TooltipBase = sap.ui.require('sap/ui/core/TooltipBase');
    if (TooltipBase) {
        var oOldTooltip = this.getTooltip();
        if (oOldTooltip instanceof TooltipBase) {
            this.removeDelegate(oOldTooltip);
        }
        if (oTooltip instanceof TooltipBase) {
            oTooltip._currentControl = this;
            this.addDelegate(oTooltip);
        }
    }
};
Element.prototype.setTooltip = function (vTooltip) {
    this._refreshTooltipBaseDelegate(vTooltip);
    this.setAggregation('tooltip', vTooltip);
    return this;
};
Element.prototype.getTooltip = function () {
    return this.getAggregation('tooltip');
};
Element.runWithPreprocessors = ManagedObject.runWithPreprocessors;
Element.prototype.getTooltip_AsString = function () {
    var oTooltip = this.getTooltip();
    if (typeof oTooltip === 'string' || oTooltip instanceof String) {
        return oTooltip;
    }
    return undefined;
};
Element.prototype.getTooltip_Text = function () {
    var oTooltip = this.getTooltip();
    if (oTooltip && typeof oTooltip.getText === 'function') {
        return oTooltip.getText();
    }
    return oTooltip;
};
(function () {
    var getDataObject = function (element, key) {
        var aData = element.getAggregation('customData');
        if (aData) {
            for (var i = 0; i < aData.length; i++) {
                if (aData[i].getKey() == key) {
                    return aData[i];
                }
            }
        }
        return null;
    };
    var setData = function (element, key, value, writeToDom) {
        if (value === null) {
            var dataObject = getDataObject(element, key);
            if (!dataObject) {
                return;
            }
            var dataCount = element.getAggregation('customData').length;
            if (dataCount == 1) {
                element.destroyAggregation('customData', true);
            } else {
                element.removeAggregation('customData', dataObject, true);
                dataObject.destroy();
            }
        } else {
            var CustomData = sap.ui.requireSync('sap/ui/core/CustomData');
            var dataObject = getDataObject(element, key);
            if (dataObject) {
                dataObject.setValue(value);
                dataObject.setWriteToDom(writeToDom);
            } else {
                var dataObject = new CustomData({
                    key: key,
                    value: value,
                    writeToDom: writeToDom
                });
                element.addAggregation('customData', dataObject, true);
            }
        }
    };
    Element.prototype.data = function () {
        var argLength = arguments.length;
        if (argLength == 0) {
            var aData = this.getAggregation('customData'), result = {};
            if (aData) {
                for (var i = 0; i < aData.length; i++) {
                    result[aData[i].getKey()] = aData[i].getValue();
                }
            }
            return result;
        } else if (argLength == 1) {
            var arg0 = arguments[0];
            if (arg0 === null) {
                this.destroyAggregation('customData', true);
                return this;
            } else if (typeof arg0 == 'string') {
                var dataObject = getDataObject(this, arg0);
                return dataObject ? dataObject.getValue() : null;
            } else if (typeof arg0 == 'object') {
                for (var key in arg0) {
                    setData(this, key, arg0[key]);
                }
                return this;
            } else {
                throw new Error('When data() is called with one argument, this argument must be a string, an object or null, but is ' + typeof arg0 + ':' + arg0 + ' (on UI Element with ID \'' + this.getId() + '\')');
            }
        } else if (argLength == 2) {
            setData(this, arguments[0], arguments[1]);
            return this;
        } else if (argLength == 3) {
            setData(this, arguments[0], arguments[1], arguments[2]);
            return this;
        } else {
            throw new Error('data() may only be called with 0-3 arguments (on UI Element with ID \'' + this.getId() + '\')');
        }
    };
}());
Element.prototype.clone = function (sIdSuffix, aLocalIds) {
    var oClone = ManagedObject.prototype.clone.apply(this, arguments);
    for (var i = 0; i < this.aDelegates.length; i++) {
        if (this.aDelegates[i].bClone) {
            oClone.aDelegates.push(this.aDelegates[i]);
        }
    }
    for (var i = 0; i < this.aBeforeDelegates.length; i++) {
        if (this.aBeforeDelegates[i].bClone) {
            oClone.aBeforeDelegates.push(this.aBeforeDelegates[i]);
        }
    }
    if (this._sapui_declarativeSourceInfo) {
        oClone._sapui_declarativeSourceInfo = jQuery.extend({}, this._sapui_declarativeSourceInfo);
    }
    return oClone;
};
Element.prototype.findElements = ManagedObject.prototype.findAggregatedObjects;
function fireLayoutDataChange(oElement) {
    var oLayout = oElement.getParent();
    if (oLayout) {
        var oEvent = jQuery.Event('LayoutDataChange');
        oEvent.srcControl = oElement;
        oLayout._handleEvent(oEvent);
    }
}
Element.prototype.setLayoutData = function (oLayoutData) {
    this.setAggregation('layoutData', oLayoutData, true);
    fireLayoutDataChange(this);
    return this;
};
Element.prototype.destroyLayoutData = function () {
    this.destroyAggregation('layoutData', true);
    fireLayoutDataChange(this);
    return this;
};
Element.prototype.bindElement = ManagedObject.prototype.bindObject;
Element.prototype.unbindElement = ManagedObject.prototype.unbindObject;
Element.prototype.getElementBinding = ManagedObject.prototype.getObjectBinding;
Element.prototype._getFieldGroupIds = function () {
    var aFieldGroupIds;
    if (this.getMetadata().hasProperty('fieldGroupIds')) {
        aFieldGroupIds = this.getFieldGroupIds();
    }
    if (!aFieldGroupIds || aFieldGroupIds.length == 0) {
        var oParent = this.getParent();
        if (oParent && oParent._getFieldGroupIds) {
            return oParent._getFieldGroupIds();
        }
    }
    return aFieldGroupIds || [];
};
Element.prototype.getDomRefForSetting = function (sSettingsName) {
    var oSetting = this.getMetadata().getAllSettings()[sSettingsName];
    if (oSetting && oSetting.selector) {
        var oDomRef = this.getDomRef();
        if (oDomRef) {
            oDomRef = oDomRef.parentNode;
            if (oDomRef && oDomRef.querySelector) {
                var sSelector = oSetting.selector.replace(/\{id\}/g, this.getId().replace(/(:|\.)/g, '\\$1'));
                return oDomRef.querySelector(sSelector);
            }
        }
    }
    return null;
};
Element.prototype._getMediaContainerWidth = function () {
    if (typeof this._oContextualSettings === 'undefined') {
        return undefined;
    }
    return this._oContextualSettings.contextualWidth;
};
Element.prototype._getCurrentMediaContainerRange = function (sName) {
    var iWidth = this._getMediaContainerWidth();
    sName = sName || Device.media.RANGESETS.SAP_STANDARD;
    return Device.media.getCurrentRange(sName, iWidth);
};
Element.prototype._onContextualSettingsChanged = function () {
    var iWidth = this._getMediaContainerWidth(), bShouldUseContextualWidth = iWidth !== undefined, bProviderChanged = bShouldUseContextualWidth ^ !!this._bUsingContextualWidth, aListeners = this._aContextualWidthListeners || [];
    if (bProviderChanged) {
        if (bShouldUseContextualWidth) {
            aListeners.forEach(function (oL) {
                Device.media.detachHandler(oL.callback, oL.listener, oL.name);
            });
        } else {
            aListeners.forEach(function (oL) {
                Device.media.attachHandler(oL.callback, oL.listener, oL.name);
            });
        }
        this._bUsingContextualWidth = bShouldUseContextualWidth;
    }
    aListeners.forEach(function (oL) {
        var oMedia = this._getCurrentMediaContainerRange(oL.name);
        if (oMedia.from !== oL.media.from) {
            oL.media = oMedia;
            oL.callback.call(oL.listener || window, oMedia);
        }
    }, this);
};
Element.prototype._attachMediaContainerWidthChange = function (fnFunction, oListener, sName) {
    sName = sName || Device.media.RANGESETS.SAP_STANDARD;
    this._aContextualWidthListeners = this._aContextualWidthListeners || [];
    this._aContextualWidthListeners.push({
        callback: fnFunction,
        listener: oListener,
        name: sName,
        media: this._getCurrentMediaContainerRange(sName)
    });
    if (!this._bUsingContextualWidth) {
        Device.media.attachHandler(fnFunction, oListener, sName);
    }
};
Element.prototype._detachMediaContainerWidthChange = function (fnFunction, oListener, sName) {
    var oL;
    sName = sName || Device.media.RANGESETS.SAP_STANDARD;
    if (!this._aContextualWidthListeners) {
        return;
    }
    for (var i = 0, iL = this._aContextualWidthListeners.length; i < iL; i++) {
        oL = this._aContextualWidthListeners[i];
        if (oL.callback === fnFunction && oL.listener === oListener && oL.name === sName) {
            if (!this._bUsingContextualWidth) {
                Device.media.detachHandler(fnFunction, oListener, sName);
            }
            this._aContextualWidthListeners.splice(i, 1);
            break;
        }
    }
};
export default Element;