import Device from '../Device.js';
import ManagedObject from '../base/ManagedObject.js';
import BaseObject from '../base/Object.js';
import ObjectPool from '../base/ObjectPool.js';
import Control from './Control.js';
import IntervalTrigger from './IntervalTrigger.js';
import RenderManager from './RenderManager.js';
import Element from './Element.js';
import ResizeHandler from './ResizeHandler.js';
import library from './library.js';
import assert from '../../base/assert.js';
import Log from '../../base/Log.js';
import Version from '../../base/util/Version.js';
import uid from '../../base/util/uid.js';
import containsOrEquals from '../dom/containsOrEquals.js';
import jQuery from '../thirdparty/jquery.js';
import F6Navigation from '../events/F6Navigation.js';
import isMouseEventDelayed from '../events/isMouseEventDelayed.js';
import '../dom/jquery/control.js';
import '../dom/jquery/Focusable.js';
import '../dom/jquery/rect.js';
var CSSSize = library.CSSSize;
var OpenState = library.OpenState;
var Popup = ManagedObject.extend('sap.ui.core.Popup', {
    constructor: function (oContent, bModal, bShadow, bAutoClose) {
        assert(arguments.length == 0 || oContent && typeof oContent === 'object', 'oContent must be an object or there may be no arguments at all');
        assert(bModal === undefined || bModal === true || bModal === false, 'bModal must be true, false, or undefined');
        assert(bShadow === undefined || bShadow === true || bShadow === false, 'bShadow must be true, false, or undefined');
        assert(bAutoClose === undefined || bAutoClose === true || bAutoClose === false, 'bAutoClose must be true, false, or undefined');
        ManagedObject.apply(this);
        this._popupUID = uid();
        this.bOpen = false;
        this.eOpenState = OpenState.CLOSED;
        this._mEvents = {};
        this._mEvents['sap.ui.core.Popup.addFocusableContent-' + this._popupUID] = this._addFocusableArea;
        this._mEvents['sap.ui.core.Popup.removeFocusableContent-' + this._popupUID] = this._removeFocusableArea;
        this._mEvents['sap.ui.core.Popup.closePopup-' + this._popupUID] = this._closePopup;
        this._mEvents['sap.ui.core.Popup.onFocusEvent-' + this._popupUID] = this.onFocusEvent;
        this._mEvents['sap.ui.core.Popup.increaseZIndex-' + this._popupUID] = this._increaseMyZIndex;
        this._mEvents['sap.ui.core.Popup.contains-' + this._popupUID] = this._containsEventBusWrapper;
        if (oContent) {
            this.setContent(oContent);
        }
        this._oDefaultPosition = {
            my: Popup.Dock.CenterCenter,
            at: Popup.Dock.CenterCenter,
            of: document,
            offset: '0 0',
            collision: 'flip'
        };
        this._oPosition = jQuery.extend({}, this._oDefaultPosition);
        this._bModal = !!bModal;
        this._oPreviousFocus = null;
        this._sInitialFocusId = null;
        this._bShadow = typeof bShadow === 'boolean' ? bShadow : true;
        this._bAutoClose = !!bAutoClose;
        this._animations = {
            open: null,
            close: null
        };
        this._durations = {
            open: 'fast',
            close: 'fast'
        };
        this._iZIndex = -1;
        this._oBlindLayer = null;
        this.setNavigationMode();
        if (this.touchEnabled) {
            this._fAutoCloseHandler = function (oEvent) {
                if (oEvent.isMarked('delayedMouseEvent') || oEvent.isMarked('cancelAutoClose')) {
                    return;
                }
                if (this.eOpenState === OpenState.CLOSING || this.eOpenState === OpenState.CLOSED) {
                    return;
                }
                if (!this._contains(oEvent.target)) {
                    this.close();
                }
            };
        }
        this._F6NavigationHandler = function (oEvent) {
            var oSettings = {}, sMode = this._sF6NavMode, oDockElement;
            if (sMode == 'DOCK') {
                if (this._bModal) {
                    sMode = 'NONE';
                } else if (this._oLastPosition && this._oLastPosition.of) {
                    oDockElement = this._getOfDom(this._oLastPosition.of);
                    if (!oDockElement || oDockElement === document) {
                        oDockElement = null;
                        sMode = 'NONE';
                    }
                }
            }
            switch (sMode) {
            case 'SCOPE':
                oSettings.scope = this._$()[0];
                break;
            case 'DOCK':
                oSettings.target = oDockElement;
                var $DockPopup = jQuery(oDockElement).parents('[data-sap-ui-popup]');
                oSettings.scope = $DockPopup.length ? $DockPopup[0] : null;
                break;
            default:
                oSettings.skip = true;
            }
            F6Navigation.handleF6GroupNavigation(oEvent, oSettings);
        };
    },
    metadata: {
        library: 'sap.ui.core',
        publicMethods: [
            'open',
            'close',
            'setContent',
            'getContent',
            'setPosition',
            'setShadow',
            'setModal',
            'getModal',
            'setAutoClose',
            'setAutoCloseAreas',
            'isOpen',
            'getAutoClose',
            'getOpenState',
            'setAnimations',
            'setDurations',
            'attachOpened',
            'attachClosed',
            'detachOpened',
            'detachClosed'
        ],
        associations: {
            'childPopups': {
                type: 'sap.ui.core.Popup',
                multiple: true,
                visibility: 'hidden'
            }
        },
        events: {
            'opened': {},
            'closed': {}
        }
    }
});
Popup.prototype.getChildPopups = function () {
    return this.getAssociation('childPopups', []);
};
Popup.prototype.addChildPopup = function (vChildPopup) {
    return this.addAssociation('childPopups', vChildPopup);
};
Popup.prototype.removeChildPopup = function (vChildPopup) {
    return this.removeAssociation('childPopups', vChildPopup);
};
Popup._activateBlindLayer = true;
Popup.blStack = [];
Popup.Dock = {
    BeginTop: 'begin top',
    BeginCenter: 'begin center',
    BeginBottom: 'begin bottom',
    LeftTop: 'left top',
    LeftCenter: 'left center',
    LeftBottom: 'left bottom',
    CenterTop: 'center top',
    CenterCenter: 'center center',
    CenterBottom: 'center bottom',
    RightTop: 'right top',
    RightCenter: 'right center',
    RightBottom: 'right bottom',
    EndTop: 'end top',
    EndCenter: 'end center',
    EndBottom: 'end bottom'
};
Popup.prototype.touchEnabled = Device.support.touch && !Device.system.combi;
Popup.prototype.preventBrowserFocus = Device.support.touch && !Device.system.combi;
BaseObject.extend('sap.ui.core.Popup.Layer', {
    constructor: function () {
        var sDomString = this.getDomString();
        this._$Ref = jQuery(sDomString).appendTo(sap.ui.getWCCore().getStaticAreaRef());
    }
});
Popup.Layer.prototype.init = function (oRef, iZIndex) {
    this._$Ref.css({
        'visibility': 'visible',
        'z-index': iZIndex
    });
    this.update(oRef, iZIndex);
    this._$Ref.insertAfter(oRef).show();
};
Popup.Layer.prototype.update = function (oRef, iZIndex) {
    if (oRef.length) {
        var oRect = oRef.rect();
        this._$Ref.css({
            'left': oRect.left,
            'top': oRect.top
        });
        if (oRef.css('right') != 'auto' && oRef.css('right') != 'inherit') {
            this._$Ref.css({
                'right': oRef.css('right'),
                'width': 'auto'
            });
        } else {
            this._$Ref.css({
                'width': oRect.width,
                'right': 'auto'
            });
        }
        if (oRef.css('bottom') != 'auto' && oRef.css('bottom') != 'inherit') {
            this._$Ref.css({
                'bottom': oRef.css('bottom'),
                'height': 'auto'
            });
        } else {
            this._$Ref.css({
                'height': oRect.height,
                'bottom': 'auto'
            });
        }
        if (typeof iZIndex === 'number') {
            this._$Ref.css('z-index', iZIndex);
        }
    }
};
Popup.Layer.prototype.reset = function () {
    if (this._$Ref.length) {
        this._$Ref[0].style.display = 'none';
        this._$Ref[0].style.visibility = 'hidden';
        this._$Ref.appendTo(sap.ui.getWCCore().getStaticAreaRef());
    }
};
Popup.Layer.prototype.getDomString = function () {
    Log.error('sap.ui.core.Popup.Layer: getDomString function must be overwritten!');
    return '';
};
Popup.Layer.extend('sap.ui.core.Popup.BlindLayer', {
    constructor: function () {
        Popup.Layer.apply(this);
    }
});
Popup.BlindLayer.prototype.getDomString = function () {
    return '<div class="sapUiBliLy" id="sap-ui-blindlayer-' + uid() + '"><iframe scrolling="no" tabIndex="-1"></iframe></div>';
};
Popup.prototype.oBlindLayerPool = new ObjectPool(Popup.BlindLayer);
Popup.Layer.extend('sap.ui.core.Popup.ShieldLayer', {
    constructor: function () {
        Popup.Layer.apply(this);
    }
});
Popup.ShieldLayer.prototype.getDomString = function () {
    return '<div class="sapUiPopupShield" id="sap-ui-shieldlayer-' + uid() + '"></div>';
};
Popup.prototype.oShieldLayerPool = new ObjectPool(Popup.ShieldLayer);
(function () {
    var iLastZIndex = 0;
    var iMaxInteger = Math.pow(2, 32) - 1;
    Popup.setInitialZIndex = function (iInitialZIndex) {
        if (iInitialZIndex >= iMaxInteger) {
            throw new Error('Z-index can\'t be higher than Number.MAX_SAFE_INTEGER');
        }
        iLastZIndex = Math.max(iInitialZIndex, this.getLastZIndex());
    };
    Popup.getLastZIndex = function () {
        return iLastZIndex;
    };
    Popup.prototype.getLastZIndex = function () {
        return Popup.getLastZIndex();
    };
    Popup.getNextZIndex = function () {
        iLastZIndex += 10;
        if (iLastZIndex >= iMaxInteger) {
            throw new Error('Z-index can\'t be higher than Number.MAX_SAFE_INTEGER');
        }
        return iLastZIndex;
    };
    Popup.prototype.getNextZIndex = function () {
        return Popup.getNextZIndex();
    };
}());
var fnRectEqual = function (oRectOne, oRectTwo) {
    var iPuffer = 3;
    var iLeft = Math.abs(oRectOne.left - oRectTwo.left);
    var iTop = Math.abs(oRectOne.top - oRectTwo.top);
    var iWidth = Math.abs(oRectOne.width - oRectTwo.width);
    var iHeight = Math.abs(oRectOne.height - oRectTwo.height);
    if (iLeft > iPuffer || iTop > iPuffer || iWidth > iPuffer || iHeight > iPuffer) {
        return false;
    }
    return true;
};
Popup.prototype.open = function (iDuration, my, at, of, offset, collision, followOf) {
    assert(this.oContent, 'Popup content must have been set by now');
    if (this.eOpenState != OpenState.CLOSED) {
        return;
    }
    this.eOpenState = OpenState.OPENING;
    var oStatic;
    try {
        oStatic = sap.ui.getWCCore().getStaticAreaRef();
        oStatic = sap.ui.getWCCore().getUIArea(oStatic);
    } catch (e) {
        Log.error(e);
        throw new Error('Popup cannot be opened because static UIArea cannot be determined.');
    }
    this._bContentAddedToStatic = false;
    if (this.oContent instanceof Control && !this.oContent.getParent()) {
        oStatic.addContent(this.oContent, true);
        this._bContentAddedToStatic = true;
    }
    if (this.oContent.getUIArea) {
        var oArea = this.oContent.getUIArea();
        if (oArea === null) {
            Log.warning('The Popup content is NOT connected with a UIArea and may not work properly!');
        } else if (Popup._bEnableUIAreaCheck && oArea.getRootNode().id !== oStatic.getRootNode().id) {
            Log.warning('The Popup content is NOT connected with the static-UIArea and may not work properly!');
        }
    }
    if (typeof iDuration == 'string') {
        followOf = collision;
        collision = offset;
        offset = of;
        of = at;
        at = my;
        my = iDuration;
        iDuration = -1;
    }
    if (iDuration === undefined) {
        iDuration = -1;
    }
    assert(iDuration === -1 || typeof iDuration === 'number' && iDuration % 1 == 0, 'iDuration must be an integer (or omitted)');
    assert(my === undefined || typeof my === 'string', 'my must be a string or empty');
    assert(at === undefined || typeof at === 'string', 'at must be a string or empty');
    assert(!of || typeof of === 'object' || typeof of === 'function', 'of must be empty or an object');
    assert(!offset || typeof offset === 'string', 'offset must be empty or a string');
    assert(!collision || typeof collision === 'string', 'collision must be empty or a string');
    this._oPreviousFocus = Popup.getCurrentFocusInfo();
    if (this.isInPopup(of) || this.isInPopup(this._oPosition.of)) {
        var sParentId = this.getParentPopupId(of) || this.getParentPopupId(this._oPosition.of);
        var sChildId = '';
        var oContent = this.getContent();
        if (oContent instanceof Element) {
            sChildId = oContent.getId();
        } else if (typeof oContent === 'object') {
            sChildId = oContent.id;
        }
        this.addChildToPopup(sParentId, sChildId);
        this.addChildToPopup(sParentId, this._popupUID);
    }
    var $Ref = this._$(true);
    var iRealDuration = 'fast';
    if (iDuration === 0 || iDuration > 0) {
        iRealDuration = iDuration;
    } else if (this._durations.open === 0 || this._durations.open > 0) {
        iRealDuration = this._durations.open;
    }
    var _oPosition;
    if (my || at || of || offset || collision) {
        _oPosition = this._createPosition(my, at, of, offset, collision);
        this._oPosition = _oPosition;
    } else {
        _oPosition = this._oPosition;
    }
    if (!_oPosition.of) {
        _oPosition.of = this._oPosition.of || document;
    }
    this._iZIndex = this._iZIndex === this.getLastZIndex() ? this._iZIndex : this.getNextZIndex();
    var oStaticArea = sap.ui.getWCCore().getStaticAreaRef();
    $Ref.css({
        'position': 'absolute',
        'visibility': 'hidden'
    });
    if (!($Ref[0].parentNode == oStaticArea)) {
        $Ref.appendTo(oStaticArea);
    }
    $Ref.css('z-index', this._iZIndex);
    Log.debug('position popup content ' + $Ref.attr('id') + ' at ' + (window.JSON ? JSON.stringify(_oPosition.at) : String(_oPosition.at)));
    this._applyPosition(_oPosition);
    if (followOf !== undefined) {
        this.setFollowOf(followOf);
    }
    $Ref.toggleClass('sapUiShd', this._bShadow);
    var oDomRef = $Ref[0];
    if (oDomRef) {
        oDomRef.style.display = 'none';
        oDomRef.style.visibility = 'visible';
    }
    this._duringOpen();
    if (iRealDuration == 0) {
        this._opened();
    } else if (this._animations.open) {
        this._animations.open.call(null, $Ref, iRealDuration, this._opened.bind(this));
    } else {
        $Ref.fadeIn(iRealDuration, this._opened.bind(this));
    }
};
Popup.prototype._getDomRefToFocus = function () {
    var $Ref = this._$(false, true), oDomRefToFocus, oControl;
    if (this._shouldGetFocusAfterOpen()) {
        if (this._sInitialFocusId) {
            oControl = sap.ui.getWCCore().byId(this._sInitialFocusId);
            if (oControl) {
                oDomRefToFocus = oControl.getFocusDomRef();
            }
            oDomRefToFocus = oDomRefToFocus || window.document.getElementById(this._sInitialFocusId);
        }
        oDomRefToFocus = oDomRefToFocus || $Ref.firstFocusableDomRef();
    }
    return oDomRefToFocus;
};
Popup.prototype._opened = function () {
    if (this.eOpenState !== OpenState.OPENING) {
        return;
    }
    this.bOpen = true;
    var $Ref = this._$(false, true);
    if ($Ref[0] && $Ref[0].style) {
        $Ref[0].style.display = 'block';
    }
    if (this._shouldGetFocusAfterOpen()) {
        var domRefToFocus = this._getDomRefToFocus();
        if (domRefToFocus) {
            domRefToFocus.focus();
        }
        var oCurrentOfRef = this._getOfDom(this._oLastPosition.of);
        var oCurrentOfRect = jQuery(oCurrentOfRef).rect();
        if (this._oLastOfRect && oCurrentOfRect && !fnRectEqual(this._oLastOfRect, oCurrentOfRect)) {
            this._applyPosition(this._oLastPosition);
        }
    }
    this.eOpenState = OpenState.OPEN;
    if (this.getFollowOf()) {
        Popup.DockTrigger.addListener(Popup.checkDocking, this);
    }
    this._updateBlindLayer();
    this.fireOpened();
};
Popup.prototype._duringOpen = function () {
    var $Ref = this._$(false, true), oDomRefToFocus;
    if (isMouseEventDelayed()) {
        if (this._oTopShieldLayer) {
            clearTimeout(this._iTopShieldRemoveTimer);
            this._iTopShieldRemoveTimer = null;
        } else {
            this._oTopShieldLayer = this.oShieldLayerPool.borrowObject($Ref, this._iZIndex + 1);
        }
        this._iTopShieldRemoveTimer = setTimeout(function () {
            this.oShieldLayerPool.returnObject(this._oTopShieldLayer);
            this._oTopShieldLayer = null;
            this._iTopShieldRemoveTimer = null;
        }.bind(this), 500);
    }
    if (!!Device.browser.msie && !Device.os.windows_phone && Popup._activateBlindLayer) {
        this._oBlindLayer = this.oBlindLayerPool.borrowObject($Ref, this._iZIndex - 1);
    }
    if (this._bModal) {
        this._showBlockLayer();
    }
    if (this._shouldGetFocusAfterOpen() && document.activeElement && !this.isInPopup(document.activeElement)) {
        oDomRefToFocus = this._getDomRefToFocus();
        if (oDomRefToFocus !== document.activeElement) {
            document.activeElement.blur();
        }
    }
    if (this.oContent instanceof Element) {
        this.oContent.addDelegate(this);
    }
    this.bOpen = true;
    this._activateFocusHandle();
    this._$(false, true).on('keydown', jQuery.proxy(this._F6NavigationHandler, this));
    if (this._oBlindLayer) {
        this._resizeListenerId = ResizeHandler.register(this._$().get(0), jQuery.proxy(this.onresize, this));
    }
};
Popup.prototype._shouldGetFocusAfterOpen = function () {
    return this._bModal || this._bAutoClose || this._sInitialFocusId;
};
Popup.prototype._contains = function (oDomRef) {
    var oPopupDomRef = this._$().get(0);
    if (!oPopupDomRef) {
        return false;
    }
    var bContains = containsOrEquals(oPopupDomRef, oDomRef);
    var aChildPopups;
    if (!bContains) {
        aChildPopups = this.getChildPopups();
        bContains = aChildPopups.some(function (sChildID) {
            var oContainDomRef = sChildID ? window.document.getElementById(sChildID) : null;
            var bContains = containsOrEquals(oContainDomRef, oDomRef);
            if (!bContains) {
                var sEventId = 'sap.ui.core.Popup.contains-' + sChildID;
                var oData = { domRef: oDomRef };
                sap.ui.getWCCore().getEventBus().publish('sap.ui', sEventId, oData);
                bContains = oData.contains;
            }
            return bContains;
        });
    }
    return bContains;
};
Popup.prototype._containsEventBusWrapper = function (sChannel, sEvent, oData) {
    oData.contains = this._contains(oData.domRef);
};
Popup.prototype.onFocusEvent = function (oBrowserEvent) {
    var oEvent = jQuery.event.fix(oBrowserEvent);
    if (arguments.length > 1 && arguments[1] === 'sap.ui.core.Popup.onFocusEvent-' + this._popupUID) {
        oEvent = jQuery.event.fix(arguments[2]);
    }
    var type = oEvent.type == 'focus' || oEvent.type == 'activate' ? 'focus' : 'blur';
    var bContains = false;
    if (type == 'focus') {
        var oDomRef = this._$().get(0);
        if (oDomRef) {
            bContains = this._contains(oEvent.target);
            Log.debug('focus event on ' + oEvent.target.id + ', contains: ' + bContains);
            if (this._bModal && !bContains) {
                var bTopMost = Popup.blStack.length > 0 && Popup.blStack[Popup.blStack.length - 1].popup === this;
                if (bTopMost) {
                    if (Device.system.desktop || jQuery(oEvent.target).is(':input')) {
                        if (this.oLastBlurredElement) {
                            setTimeout(function () {
                                if (this.oLastBlurredElement) {
                                    this.oLastBlurredElement.focus();
                                }
                            }.bind(this), 0);
                        } else {
                            oDomRef.focus();
                        }
                    }
                }
            } else if (this._bAutoClose && bContains && this._sTimeoutId) {
                clearTimeout(this._sTimeoutId);
                this._sTimeoutId = null;
            }
        }
    } else if (type == 'blur') {
        Log.debug('blur event on ' + oEvent.target.id);
        if (this._bModal) {
            this.oLastBlurredElement = oEvent.target;
        } else if (this._bAutoClose) {
            if (!this.touchEnabled && !this._sTimeoutId) {
                if (oEvent.target === document.activeElement) {
                    return;
                }
                var iDuration = typeof this._durations.close === 'string' ? 0 : this._durations.close;
                this._sTimeoutId = setTimeout(function () {
                    this.close(iDuration, 'autocloseBlur');
                    var oOf = this._oLastPosition && this._oLastPosition.of;
                    if (oOf) {
                        var sParentPopupId = this.getParentPopupId(oOf);
                        if (sParentPopupId) {
                            var sEventId = 'sap.ui.core.Popup.onFocusEvent-' + sParentPopupId;
                            sap.ui.getWCCore().getEventBus().publish('sap.ui', sEventId, oEvent);
                        }
                    }
                }.bind(this), iDuration);
            }
        }
    }
};
Popup.prototype.setInitialFocusId = function (sId) {
    assert(!sId || typeof sId === 'string', 'sId must be a string or empty');
    this._sInitialFocusId = sId;
};
Popup.prototype.close = function (iDuration) {
    if (Popup._autoCloseDebug) {
        return;
    }
    if (this._sTimeoutId) {
        clearTimeout(this._sTimeoutId);
        this._sTimeoutId = null;
        if (arguments.length > 1) {
            var sAutoclose = arguments[1];
            if (typeof sAutoclose == 'string' && sAutoclose == 'autocloseBlur' && this._isFocusInsidePopup()) {
                return;
            }
        }
    }
    assert(iDuration === undefined || typeof iDuration === 'number' && iDuration % 1 == 0, 'iDuration must be empty or an integer');
    if (this.eOpenState == OpenState.CLOSED || this.eOpenState == OpenState.CLOSING) {
        return;
    }
    var iRealDuration = 'fast';
    if (iDuration === 0 || iDuration > 0) {
        iRealDuration = iDuration;
    } else if (this._durations.close === 0 || this._durations.close > 0) {
        iRealDuration = this._durations.close;
    }
    this.eOpenState = OpenState.CLOSING;
    if (this.getFollowOf()) {
        Popup.DockTrigger.removeListener(Popup.checkDocking, this);
    }
    if (this.oContent && this._bContentAddedToStatic) {
        sap.ui.getWCCore().getEventBus().publish('sap.ui', '__beforePopupClose', { domNode: this._$().get(0) });
        var oStatic = sap.ui.getWCCore().getStaticAreaRef();
        oStatic = sap.ui.getWCCore().getUIArea(oStatic);
        oStatic.removeContent(oStatic.indexOfContent(this.oContent), true);
    }
    this._bContentAddedToStatic = false;
    this._sTimeoutId = null;
    this._deactivateFocusHandle();
    this._$(false, true).off('keydown', this._F6NavigationHandler);
    if (this.oContent instanceof Element) {
        this.oContent.removeDelegate(this);
    }
    var $Ref = this._$();
    if (this._bEventBusEventsRegistered) {
        this._unregisterEventBusEvents();
    }
    if (this._oBlindLayer) {
        this.oBlindLayerPool.returnObject(this._oBlindLayer);
    }
    this._oBlindLayer = null;
    if (isMouseEventDelayed()) {
        if (this._oBottomShieldLayer) {
            clearTimeout(this._iBottomShieldRemoveTimer);
            this._iBottomShieldRemoveTimer = null;
        } else {
            this._oBottomShieldLayer = this.oShieldLayerPool.borrowObject($Ref, this._iZIndex - 3);
        }
        this._iBottomShieldRemoveTimer = setTimeout(function () {
            this.oShieldLayerPool.returnObject(this._oBottomShieldLayer);
            this._oBottomShieldLayer = null;
            this._iBottomShieldRemoveTimer = null;
        }.bind(this), 500);
    }
    if (this.isInPopup(this._oLastPosition.of)) {
        var sParentId = this.getParentPopupId(this._oLastPosition.of);
        var sChildId = '';
        var oContent = this.getContent();
        if (oContent instanceof Element) {
            sChildId = oContent.getId();
        } else if (typeof oContent === 'object') {
            sChildId = oContent.id;
        }
        this.removeChildFromPopup(sParentId, sChildId);
        this.removeChildFromPopup(sParentId, this._popupUID);
    }
    if (this._bModal && this.preventBrowserFocus) {
        $Ref.one('mousedown', function (oEvent) {
            oEvent.preventDefault();
        });
    }
    this._duringClose();
    if (iRealDuration == 0) {
        this._closed();
    } else if (this._animations.close) {
        this._animations.close.call(null, $Ref, iRealDuration, this._closed.bind(this));
    } else {
        $Ref.fadeOut(iRealDuration, this._closed.bind(this));
    }
};
Popup.prototype._closed = function () {
    if (this._bModal) {
        this._hideBlockLayer();
    }
    var $Ref = this._$(false, true);
    if ($Ref.length) {
        var oDomRef = $Ref.get(0);
        if (oDomRef) {
            oDomRef.style.display = 'none';
            oDomRef.style.visibility = 'hidden';
            oDomRef.style.left = '0px';
            oDomRef.style.top = '0px';
            oDomRef.style.right = '';
        }
        $Ref = this._$(false, true);
        oDomRef = $Ref.length ? $Ref[0] : null;
        if (oDomRef) {
            oDomRef.style.display = 'none';
            oDomRef.style.visibility = 'hidden';
            oDomRef.style.left = '0px';
            oDomRef.style.top = '0px';
            oDomRef.style.right = '';
        }
    }
    if (this._bModal) {
        Popup.applyFocusInfo(this._oPreviousFocus);
        this._oPreviousFocus = null;
        this.oLastBlurredElement = null;
    }
    this.bOpen = false;
    this.eOpenState = OpenState.CLOSED;
    var aChildPopups = this.getChildPopups();
    for (var j = 0, l = aChildPopups.length; j < l; j++) {
        this.closePopup(aChildPopups[j]);
    }
    this.fireClosed();
};
Popup.prototype._duringClose = function () {
    if (this._resizeListenerId) {
        ResizeHandler.deregister(this._resizeListenerId);
        this._resizeListenerId = null;
    }
};
Popup.getCurrentFocusInfo = function () {
    var _oPreviousFocus = null;
    var focusedControlId = sap.ui.getWCCore().getCurrentFocusedControlId();
    if (focusedControlId) {
        var oFocusedControl = sap.ui.getWCCore().byId(focusedControlId);
        _oPreviousFocus = {
            'sFocusId': focusedControlId,
            'oFocusInfo': oFocusedControl ? oFocusedControl.getFocusInfo() : {}
        };
    } else {
        try {
            var oElement = document.activeElement;
            if (oElement && oElement.nodeName) {
                _oPreviousFocus = {
                    'sFocusId': oElement.id,
                    'oFocusedElement': oElement,
                    'oFocusInfo': {}
                };
            }
        } catch (ex) {
            _oPreviousFocus = null;
        }
    }
    if (_oPreviousFocus) {
        _oPreviousFocus.popup = this;
    }
    return _oPreviousFocus;
};
Popup.applyFocusInfo = function (oPreviousFocus) {
    var oOptions = { preventScroll: true };
    if (oPreviousFocus) {
        var oFocusedControl = sap.ui.getWCCore().byId(oPreviousFocus.sFocusId);
        if (oFocusedControl) {
            oFocusedControl.applyFocusInfo(Object.assign(oOptions, oPreviousFocus.oFocusInfo));
        } else {
            var oElement = (oPreviousFocus.sFocusId ? window.document.getElementById(oPreviousFocus.sFocusId) : null) || oPreviousFocus.oFocusedElement;
            if (oElement) {
                oElement.focus(oOptions);
            }
        }
    }
};
Popup.prototype.setContent = function (oContent) {
    assert(typeof oContent === 'object', 'oContent must be an object');
    this.oContent = oContent;
    return this;
};
Popup.prototype.getContent = function () {
    return this.oContent;
};
Popup.prototype.setPosition = function (my, at, of, offset, collision) {
    assert(typeof my === 'string', 'my must be a string');
    assert(typeof at === 'string' || typeof at === 'object' && typeof at.left === 'number' && typeof at.top === 'number', 'my must be a string or an object with \'left\' and \'top\' properties');
    assert(!of || typeof of === 'object' || typeof of === 'function', 'of must be empty or an object');
    assert(!offset || typeof offset === 'string', 'offset must be empty or a string');
    assert(!collision || typeof collision === 'string', 'collision must be empty or a string');
    this._oPosition = this._createPosition(my, at, of, offset, collision);
    if (this.eOpenState != OpenState.CLOSED) {
        this._applyPosition(this._oPosition);
        this._oBlindLayer && this._oBlindLayer.update(this._$());
    }
    return this;
};
Popup.prototype._createPosition = function (my, at, of, offset, collision) {
    var bNewOffset = false;
    if (my && (my.indexOf('+') >= 0 || my.indexOf('-') >= 0)) {
        bNewOffset = true;
        if (offset && offset != '0 0') {
            Log.warning('offset used in my and in offset, the offset value will be ignored', 'sap.ui.core.Popup', 'setPosition');
        }
        offset = null;
    }
    var oPosition = jQuery.extend({}, this._oDefaultPosition, {
        'my': my || this._oDefaultPosition.my,
        'at': at || this._oDefaultPosition.at,
        'of': of,
        'offset': offset,
        'collision': collision
    });
    if (!jQuery.ui.version) {
        if (Popup._bNewOffset == null) {
            Popup._bNewOffset = true;
            var $Div = jQuery(document.createElement('div'));
            $Div.position({
                of: window,
                using: function (position, data) {
                    Popup._bNewOffset = data !== undefined;
                }
            });
        }
    }
    var aMy = [];
    var aOffset = [];
    if (Popup._bNewOffset || Version(jQuery.ui.version).compareTo('1.8.23') > 0) {
        if (offset && offset != '0 0') {
            aMy = oPosition.my.split(' ');
            aOffset = offset.split(' ');
            var aSign = [
                parseInt(aOffset[0]) < 0 ? '' : '+',
                parseInt(aOffset[1]) < 0 ? '' : '+'
            ];
            oPosition.my = aMy[0] + aSign[0] + aOffset[0] + ' ' + aMy[1] + aSign[1] + aOffset[1];
            oPosition.offset = null;
        }
    } else if (bNewOffset) {
        aMy = oPosition.my.split(' ');
        aOffset = [
            '',
            ''
        ];
        var iIndex = aMy[0].indexOf('+');
        if (iIndex < 0) {
            iIndex = aMy[0].indexOf('-');
        }
        if (iIndex >= 0) {
            aOffset[0] = aMy[0].slice(iIndex);
            aMy[0] = aMy[0].slice(0, iIndex);
        }
        iIndex = aMy[1].indexOf('+');
        if (iIndex < 0) {
            iIndex = aMy[1].indexOf('-');
        }
        if (iIndex >= 0) {
            aOffset[1] = aMy[1].slice(iIndex);
            aMy[1] = aMy[1].slice(0, iIndex);
        }
        oPosition.my = aMy[0] + ' ' + aMy[1];
        oPosition.offset = aOffset[0] + ' ' + aOffset[1];
    }
    return oPosition;
};
Popup.prototype._getPositionOffset = function () {
    var aOffset = [];
    if (this._oPosition.my && (this._oPosition.my.indexOf('+') >= 0 || this._oPosition.my.indexOf('-') >= 0)) {
        var aMy = this._oPosition.my.split(' ');
        var iIndex = aMy[0].indexOf('+');
        if (iIndex < 0) {
            iIndex = aMy[0].indexOf('-');
        }
        if (iIndex >= 0) {
            aOffset[0] = aMy[0].slice(iIndex);
        }
        iIndex = aMy[1].indexOf('+');
        if (iIndex < 0) {
            iIndex = aMy[1].indexOf('-');
        }
        if (iIndex >= 0) {
            aOffset[1] = aMy[1].slice(iIndex);
        }
    } else if (this._oPosition.offset) {
        aOffset = this._oPosition.offset.split(' ');
    }
    return aOffset;
};
Popup.prototype._applyPosition = function (oPosition) {
    var bRtl = sap.ui.getWCCore().getConfiguration().getRTL();
    var $Ref = this._$();
    if ($Ref.length) {
        var oAt = oPosition.at;
        var oDomRef = $Ref.get(0);
        if (typeof oAt === 'string') {
            oDomRef.style.display = 'block';
            oDomRef.style.left = '';
            oDomRef.style.right = '';
            $Ref.position(this._resolveReference(this._convertPositionRTL(oPosition, bRtl)));
            this._fixPositioning(oPosition, bRtl);
        } else if (CSSSize.isValid(oAt.left) && CSSSize.isValid(oAt.top)) {
            $Ref.css({
                'left': oAt.left,
                'top': oAt.top
            });
        } else if (CSSSize.isValid(oAt.right) && CSSSize.isValid(oAt.top)) {
            $Ref.css({
                'right': oAt.right,
                'top': oAt.top
            });
        } else if (typeof oAt.left === 'number' && typeof oAt.top === 'number') {
            var domRef = $Ref[0];
            if (domRef && domRef.style.right) {
                var width = $Ref.outerWidth();
                $Ref.css({
                    'right': document.documentElement.clientWidth - (oAt.left + width) + 'px',
                    'top': oAt.top + 'px'
                });
            } else {
                $Ref.css({
                    'left': oAt.left + 'px',
                    'top': oAt.top + 'px'
                });
            }
        }
        this._oLastPosition = oPosition;
        this._oLastOfRect = this._calcOfRect(oPosition.of);
    }
};
Popup.prototype._calcOfRect = function (oOf) {
    var oOfDom = this._getOfDom(oOf);
    if (oOfDom) {
        return jQuery(oOfDom).rect();
    }
    return null;
};
Popup.prototype._getOfDom = function (oOf) {
    if (oOf instanceof jQuery.Event) {
        return null;
    }
    var $Of;
    if (typeof oOf === 'string') {
        $Of = jQuery(document.getElementById(oOf));
    } else if (oOf instanceof jQuery) {
        $Of = oOf;
    } else {
        $Of = jQuery(oOf instanceof Element ? oOf.getDomRef() : oOf);
    }
    return $Of[0];
};
Popup.prototype._convertPositionRTL = function (oPosition, bRtl) {
    var oFixedPos = jQuery.extend({}, oPosition);
    if (bRtl) {
        var bNewOffset = false;
        if (oFixedPos.my && (oFixedPos.my.indexOf('+') >= 0 || oFixedPos.my.indexOf('-') >= 0)) {
            bNewOffset = true;
        }
        if ((oFixedPos.offset || bNewOffset) && (oFixedPos.my.indexOf('begin') > -1 || oFixedPos.my.indexOf('end') > -1) && (oFixedPos.at.indexOf('begin') > -1 || oFixedPos.at.indexOf('end') > -1)) {
            if (bNewOffset) {
                var aMy = oFixedPos.my.split(' ');
                if (aMy.length == 2) {
                    oFixedPos.my = '';
                    if (aMy[0]) {
                        if (aMy[0].indexOf('begin') > -1 || aMy[0].indexOf('end') > -1) {
                            if (aMy[0].indexOf('+') > -1) {
                                aMy[0] = aMy[0].replace('+', '-');
                            } else if (aMy[0].indexOf('-') > -1) {
                                aMy[0] = aMy[0].replace('-', '+');
                            }
                        }
                        oFixedPos.my = aMy[0];
                    }
                    if (aMy[1]) {
                        if (aMy[1].indexOf('begin') > -1 || aMy[1].indexOf('end') > -1) {
                            if (aMy[1].indexOf('+') > -1) {
                                aMy[1] = aMy[1].replace('+', '-');
                            } else if (aMy[1].indexOf('-') > -1) {
                                aMy[1] = aMy[1].replace('-', '+');
                            }
                        }
                        if (aMy[0]) {
                            oFixedPos.my = oFixedPos.my + ' ';
                        }
                        oFixedPos.my = oFixedPos.my + aMy[1];
                    }
                }
            } else {
                oFixedPos.offset = this._mirrorOffset(oFixedPos.offset);
            }
        }
        oFixedPos.my = oFixedPos.my.replace('begin', 'right').replace('end', 'left');
        oFixedPos.at = oFixedPos.at.replace('begin', 'right').replace('end', 'left');
    } else {
        oFixedPos.my = oFixedPos.my.replace('end', 'right').replace('begin', 'left');
        oFixedPos.at = oFixedPos.at.replace('end', 'right').replace('begin', 'left');
    }
    return oFixedPos;
};
Popup.prototype._mirrorOffset = function (sOffset) {
    var aOffset = jQuery.trim(sOffset).split(/\s/);
    var posX = parseInt(aOffset[0]);
    return -posX + ' ' + aOffset[aOffset.length - 1];
};
Popup.prototype._fixPositioning = function (sPosition, bRtl) {
    var my = sPosition.my;
    var $Ref = this._$();
    var right = 0;
    if (typeof my === 'string') {
        if (bRtl && (my.indexOf('right') > -1 || my.indexOf('begin') > -1 || my.indexOf('center') > -1)) {
            $Ref = this._$();
            right = jQuery(window).width() - $Ref.outerWidth() - $Ref.offset().left;
            $Ref.css({
                'right': right + 'px',
                'left': ''
            });
        } else if (my.indexOf('right') > -1 || my.indexOf('end') > -1) {
            $Ref = this._$();
            right = jQuery(window).width() - $Ref.outerWidth() - $Ref.offset().left;
            $Ref.css({
                'right': right + 'px',
                'left': ''
            });
        }
    }
};
Popup.prototype._resolveReference = function (oPosition) {
    var oResult = oPosition;
    if (oPosition.of instanceof Element) {
        oResult = jQuery.extend({}, oPosition, { of: oPosition.of.getDomRef() });
    }
    return oResult;
};
Popup.prototype.setShadow = function (bShowShadow) {
    assert(typeof bShowShadow === 'boolean', 'bShowShadow must be boolean');
    this._bShadow = bShowShadow;
    if (this.eOpenState != OpenState.CLOSED) {
        this._$().toggleClass('sapUiShd', bShowShadow);
    }
    return this;
};
Popup.prototype.setModal = function (bModal, sModalCSSClass) {
    assert(typeof bModal === 'boolean', 'bModal must be boolean');
    assert(!sModalCSSClass || typeof sModalCSSClass === 'string', 'sModalCSSClass must be empty or a string');
    var bOldModal = this._bModal;
    this._bModal = bModal;
    this._sModalCSSClass = sModalCSSClass;
    if (this.isOpen()) {
        if (bOldModal !== bModal) {
            if (bModal) {
                this._showBlockLayer();
            } else {
                this._hideBlockLayer();
            }
            if (this.touchEnabled && this._bAutoClose) {
                if (!bModal) {
                    jQuery(document).on('touchstart mousedown', jQuery.proxy(this._fAutoCloseHandler, this));
                } else {
                    jQuery(document).off('touchstart mousedown', this._fAutoCloseHandler);
                }
            }
        }
    }
    return this;
};
Popup.prototype.getModal = function () {
    return this._bModal;
};
Popup.prototype.setNavigationMode = function (sMode) {
    if (sMode != 'NONE' && sMode != 'DOCK' && sMode != 'SCOPE') {
        this._sF6NavMode = 'NONE';
    }
    this._sF6NavMode = sMode;
};
Popup.prototype.setAutoClose = function (bAutoClose) {
    assert(typeof bAutoClose === 'boolean', 'bAutoClose must be boolean');
    if (this.touchEnabled && this.isOpen() && this._bAutoClose !== bAutoClose) {
        if (!this._bModal) {
            if (bAutoClose) {
                jQuery(document).on('touchstart mousedown', jQuery.proxy(this._fAutoCloseHandler, this));
            } else {
                jQuery(document).off('touchstart mousedown', this._fAutoCloseHandler);
            }
        }
    }
    this._bAutoClose = bAutoClose;
    return this;
};
Popup.prototype.setAutoCloseAreas = function (aAutoCloseAreas) {
    assert(Array.isArray(aAutoCloseAreas), 'aAutoCloseAreas must be an array which contains either sap.ui.core.Element, DOM Element or an ID');
    if (!this._aAutoCloseAreas) {
        this._aAutoCloseAreas = [];
    }
    var createDelegate = function (oAutoCloseArea) {
        return {
            onBeforeRendering: function () {
                var oDomRef = oAutocloseArea.getDomRef();
                if (oDomRef && this.isOpen()) {
                    if (Device.browser.msie) {
                        jQuery(oDomRef).unbind('deactivate.' + this._popupUID, this.fEventHandler);
                    } else {
                        oDomRef.removeEventListener('blur', this.fEventHandler, true);
                    }
                }
            },
            onAfterRendering: function () {
                var oDomRef = oAutocloseArea.getDomRef();
                if (oDomRef && this.isOpen()) {
                    if (Device.browser.msie) {
                        jQuery(oDomRef).bind('deactivate.' + this._popupUID, this.fEventHandler);
                    } else {
                        oDomRef.addEventListener('blur', this.fEventHandler, true);
                    }
                }
            }
        };
    };
    var sId, oAutocloseArea, oDelegate, oAreaRef;
    for (var i = 0, l = aAutoCloseAreas.length; i < l; i++) {
        oAutocloseArea = aAutoCloseAreas[i];
        if (oAutocloseArea instanceof Element) {
            sId = oAutocloseArea.getId();
        } else if (typeof oAutocloseArea === 'object') {
            sId = oAutocloseArea.id;
        } else if (typeof oAutocloseArea === 'string') {
            sId = oAutocloseArea;
        }
        if (this.getChildPopups().indexOf(sId) === -1) {
            this.addChildPopup(sId);
            oAreaRef = { id: sId };
            if (oAutocloseArea instanceof Element) {
                oDelegate = createDelegate(oAutocloseArea);
                oAutocloseArea.addEventDelegate(oDelegate, this);
                oAreaRef.delegate = oDelegate;
            }
            this._aAutoCloseAreas.push(oAreaRef);
        }
    }
    return this;
};
Popup.prototype.setAnimations = function (fnOpen, fnClose) {
    assert(fnOpen === null || typeof fnOpen === 'function', 'fnOpen must be a function');
    assert(fnClose === null || typeof fnClose === 'function', 'fnClose must be a function');
    if (fnOpen && typeof fnOpen == 'function') {
        this._animations.open = fnOpen;
    }
    if (fnClose && typeof fnClose == 'function') {
        this._animations.close = fnClose;
    }
    return this;
};
Popup.prototype.setDurations = function (iOpenDuration, iCloseDuration) {
    assert(iOpenDuration === null || typeof iOpenDuration === 'number' && iOpenDuration % 1 == 0, 'iOpenDuration must be null or an integer');
    assert(!iCloseDuration || typeof iCloseDuration === 'number' && iCloseDuration % 1 == 0, 'iOpenDuration must be undefined or an integer');
    if (iOpenDuration > 0 || iOpenDuration === 0) {
        this._durations.open = iOpenDuration;
    }
    if (iCloseDuration > 0 || iCloseDuration === 0) {
        this._durations.close = iCloseDuration;
    }
    return this;
};
Popup.CLOSE_ON_SCROLL = 'close_Popup_if_of_is_moved';
Popup.prototype._fnCloseOnScroll = function (oEventParameters) {
    this.close();
};
Popup.prototype.setFollowOf = function (followOf) {
    Popup.DockTrigger.removeListener(Popup.checkDocking, this);
    var bUpdateOfRect = false;
    this._bFollowOf = true;
    this._followOfHandler = null;
    if (typeof followOf === 'function') {
        this._followOfHandler = followOf;
        bUpdateOfRect = true;
    } else if (typeof followOf === 'boolean') {
        bUpdateOfRect = followOf;
    } else if (followOf === Popup.CLOSE_ON_SCROLL) {
        this._followOfHandler = this._fnCloseOnScroll;
        bUpdateOfRect = true;
    } else {
        this._bFollowOf = false;
        if (followOf !== null) {
            Log.error('Trying to set an invalid type to \'followOf: ' + followOf);
        }
    }
    if (bUpdateOfRect && this._oLastPosition) {
        this._oLastOfRect = this._calcOfRect(this._oLastPosition.of);
    }
    if (this._bFollowOf && this.getOpenState() === OpenState.OPEN) {
        Popup.DockTrigger.addListener(Popup.checkDocking, this);
    }
};
Popup.prototype.getAutoClose = function () {
    return this._bAutoClose;
};
Popup.prototype.getFollowOf = function () {
    if (this._bFollowOf) {
        return typeof this._followOfHandler === 'function' ? this._followOfHandler : true;
    }
    return false;
};
Popup.prototype.isOpen = function () {
    return this.bOpen;
};
Popup.prototype.getOpenState = function () {
    return this.eOpenState;
};
Popup.prototype.destroy = function () {
    if (this._resizeListenerId) {
        ResizeHandler.deregister(this._resizeListenerId);
        this._resizeListenerId = null;
    }
    this.close(0);
    this.oContent = null;
    if (this._bFollowOf) {
        this.setFollowOf(null);
    }
    if (this._bEventBusEventsRegistered) {
        this._unregisterEventBusEvents();
    }
    if (this._iTopShieldRemoveTimer) {
        clearTimeout(this._iTopShieldRemoveTimer);
        this.oShieldLayerPool.returnObject(this._oTopShieldLayer);
        this._oTopShieldLayer = null;
        this._iTopShieldRemoveTimer = null;
    }
    if (this._iBottomShieldRemoveTimer) {
        clearTimeout(this._iBottomShieldRemoveTimer);
        this.oShieldLayerPool.returnObject(this._oBottomShieldLayer);
        this._oBottomShieldLayer = null;
        this._iBottomShieldRemoveTimer = null;
    }
    if (this._aAutoCloseAreas) {
        var oElement;
        this._aAutoCloseAreas.forEach(function (oAreaRef) {
            if (oAreaRef.delegate) {
                oElement = jQuery(document.getElementById(oAreaRef.id)).control(0);
                if (oElement) {
                    oElement.removeEventDelegate(oAreaRef.delegate);
                }
            }
        });
    }
    ManagedObject.prototype.destroy.apply(this, arguments);
};
Popup.prototype.exit = function () {
    delete this._mEvents;
};
Popup.prototype._addFocusEventListeners = function (sChannel, sEvent, oEventData) {
    if (!this.fEventHandler) {
        this.fEventHandler = jQuery.proxy(this.onFocusEvent, this);
    }
    var $PopupRoot = this._$();
    var aChildPopups = this.getChildPopups();
    var oDomRef = {};
    var i = 0, l = 0;
    if ($PopupRoot.length) {
        if (document.addEventListener && !Device.browser.msie) {
            document.addEventListener('focus', this.fEventHandler, true);
            $PopupRoot.get(0).addEventListener('blur', this.fEventHandler, true);
            for (i = 0, l = aChildPopups.length; i < l; i++) {
                oDomRef = aChildPopups[i] ? window.document.getElementById(aChildPopups[i]) : null;
                if (oDomRef) {
                    oDomRef.addEventListener('blur', this.fEventHandler, true);
                }
            }
        } else {
            jQuery(document).bind('activate.' + this._popupUID, this.fEventHandler);
            $PopupRoot.bind('deactivate.' + this._popupUID, this.fEventHandler);
            for (i = 0, l = aChildPopups.length; i < l; i++) {
                oDomRef = aChildPopups[i] ? window.document.getElementById(aChildPopups[i]) : null;
                if (oDomRef) {
                    jQuery(oDomRef).bind('deactivate.' + this._popupUID, this.fEventHandler);
                }
            }
        }
    }
};
Popup.prototype._removeFocusEventListeners = function (sChannel, sEvent, oEventData) {
    var $PopupRoot = this._$(false, true);
    if (!$PopupRoot.length) {
        return;
    }
    var aChildPopups = this.getChildPopups();
    var oDomRef = {};
    var i = 0, l = 0;
    if (document.removeEventListener && !Device.browser.msie) {
        document.removeEventListener('focus', this.fEventHandler, true);
        $PopupRoot.get(0).removeEventListener('blur', this.fEventHandler, true);
        for (i = 0, l = aChildPopups.length; i < l; i++) {
            oDomRef = aChildPopups[i] ? window.document.getElementById(aChildPopups[i]) : null;
            if (oDomRef) {
                oDomRef.removeEventListener('blur', this.fEventHandler, true);
            }
            this.closePopup(aChildPopups[i]);
        }
    } else {
        jQuery(document).unbind('activate.' + this._popupUID, this.fEventHandler);
        $PopupRoot.unbind('deactivate.' + this._popupUID, this.fEventHandler);
        for (i = 0, l = aChildPopups.length; i < l; i++) {
            oDomRef = aChildPopups[i] ? window.document.getElementById(aChildPopups[i]) : null;
            if (oDomRef) {
                jQuery(oDomRef).unbind('deactivate.' + this._popupUID, this.fEventHandler);
            }
        }
    }
    this.fEventHandler = null;
};
Popup.prototype._activateFocusHandle = function () {
    if (this._bModal || this._bAutoClose) {
        this._addFocusEventListeners();
    }
    if (this.touchEnabled && !this._bModal && this._bAutoClose) {
        jQuery(document).on('touchstart mousedown', jQuery.proxy(this._fAutoCloseHandler, this));
    }
};
Popup.prototype._deactivateFocusHandle = function () {
    if (this.fEventHandler) {
        this._removeFocusEventListeners();
    }
    if (this.touchEnabled && !this._bModal && this._bAutoClose) {
        jQuery(document).off('touchstart mousedown', this._fAutoCloseHandler);
    }
};
Popup.prototype._registerEventBusEvents = function (sChannel, sEvent, oEventData) {
    var that = this;
    jQuery.each(that._mEvents, function (sEventId, fnListener) {
        sap.ui.getWCCore().getEventBus().subscribe('sap.ui', sEventId, fnListener, that);
    });
    this._bEventBusEventsRegistered = true;
};
Popup.prototype._unregisterEventBusEvents = function (sChannel, sEvent, oEventData) {
    var that = this;
    jQuery.each(that._mEvents, function (sEventId, fnListener) {
        sap.ui.getWCCore().getEventBus().unsubscribe('sap.ui', sEventId, fnListener, that);
    });
    delete this._bEventBusEventsRegistered;
};
Popup.prototype._addFocusableArea = function (sChannel, sEvent, oEventData) {
    if (this.getChildPopups().indexOf(oEventData.id) === -1) {
        this.addChildPopup(oEventData.id);
    }
};
Popup.prototype._removeFocusableArea = function (sChannel, sEvent, oEventData) {
    this.removeChildPopup(oEventData.id);
};
Popup.prototype._closePopup = function (sChannel, sEvent, oEventData) {
    this.close(typeof this._durations.close === 'string' ? 0 : this._durations.close);
};
Popup.prototype._setIdentity = function ($Ref) {
    if (typeof $Ref === 'object') {
        $Ref.attr('data-sap-ui-popup', this._popupUID);
    } else {
        Log.warning('Incorrect DomRef-type for \'setIdentity\': ' + $Ref, this);
        return;
    }
    if (!this._bEventBusEventsRegistered) {
        this._registerEventBusEvents();
    }
};
Popup.prototype._$ = function (bForceReRender, bGetOnly) {
    var $ContentRef;
    if (this.oContent instanceof Control) {
        $ContentRef = this.oContent.$();
        if (bForceReRender || $ContentRef.length === 0 && !bGetOnly) {
            Log.info('Rendering of popup content: ' + this.oContent.getId());
            if ($ContentRef.length > 0) {
                RenderManager.preserveContent($ContentRef[0], true, false);
            }
            sap.ui.getWCCore().getRenderManager().render(this.oContent, sap.ui.getWCCore().getStaticAreaRef());
            $ContentRef = this.oContent.$();
        }
    } else if (this.oContent instanceof Element) {
        $ContentRef = this.oContent.$();
    } else {
        $ContentRef = jQuery(this.oContent);
    }
    this._setIdentity($ContentRef);
    return $ContentRef;
};
Popup.prototype._showBlockLayer = function () {
    var $BlockRef = jQuery('#sap-ui-blocklayer-popup'), sClassName = 'sapUiBLy' + (this._sModalCSSClass ? ' ' + this._sModalCSSClass : '');
    if ($BlockRef.length === 0) {
        $BlockRef = jQuery('<div id="sap-ui-blocklayer-popup" tabindex="0" class="' + sClassName + '"></div>');
        $BlockRef.appendTo(sap.ui.getWCCore().getStaticAreaRef());
    } else {
        $BlockRef.removeClass().addClass(sClassName);
    }
    Popup.blStack.push({
        zIndex: this._iZIndex - 2,
        popup: this
    });
    $BlockRef.css({
        'z-index': this._iZIndex - 2,
        'visibility': 'visible'
    }).show();
    jQuery('html').addClass('sapUiBLyBack');
};
Popup.prototype._hideBlockLayer = function () {
    Popup.blStack.pop();
    var $oBlockLayer = jQuery('#sap-ui-blocklayer-popup');
    if ($oBlockLayer.length) {
        var oBlockLayerDomRef = $oBlockLayer.get(0);
        if (Popup.blStack.length > 0) {
            oBlockLayerDomRef.style.zIndex = Popup.blStack[Popup.blStack.length - 1].zIndex;
            oBlockLayerDomRef.style.visibility = 'visible';
            oBlockLayerDomRef.style.display = 'block';
        } else {
            oBlockLayerDomRef.style.visibility = 'hidden';
            oBlockLayerDomRef.style.display = 'none';
            window.setTimeout(function () {
                jQuery('html').removeClass('sapUiBLyBack');
            }, 0);
        }
    }
};
Popup.prototype._isFocusInsidePopup = function () {
    var oDomRef = this._$(false).get(0);
    if (oDomRef && containsOrEquals(oDomRef, document.activeElement)) {
        return true;
    }
    return false;
};
Popup.DockTrigger = IntervalTrigger;
Popup.checkDocking = function () {
    if (this.getOpenState() === OpenState.OPEN) {
        var oCurrentOfRef = this._getOfDom(this._oLastPosition.of), oCurrentOfRect = jQuery(oCurrentOfRef).rect();
        if (!oCurrentOfRect) {
            this.close();
            return;
        } else if (oCurrentOfRect.left === 0 && oCurrentOfRect.top === 0 && oCurrentOfRect.height === 0 && oCurrentOfRect.height === 0 && this._oLastPosition.of.id) {
            this._oLastPosition.of = window.document.getElementById(this._oLastPosition.of.id);
            oCurrentOfRef = this._getOfDom(this._oLastPosition.of);
            oCurrentOfRect = jQuery(oCurrentOfRef).rect();
            if (!oCurrentOfRect) {
                this.close();
                return;
            }
        }
        if (!containsOrEquals(document.documentElement, oCurrentOfRef)) {
            if (oCurrentOfRef.id) {
                var oNewestOf = window.document.getElementById(oCurrentOfRef.id);
                var oNewestOfRect = jQuery(oNewestOf).rect();
                if (oNewestOfRect && !fnRectEqual(oCurrentOfRect, oNewestOfRect)) {
                    oCurrentOfRect = oNewestOfRect;
                    delete this._oLastPosition.of;
                    this._oLastPosition.of = oNewestOf;
                }
            }
        }
        if (this._oLastOfRect) {
            if (!fnRectEqual(this._oLastOfRect, oCurrentOfRect)) {
                if (this._followOfHandler) {
                    var oLastPositionCopy = jQuery.extend(true, {}, this._oLastPosition), oLastOfRectCopy = jQuery.extend(true, {}, this._oLastOfRect);
                    this._followOfHandler({
                        lastPosition: oLastPositionCopy,
                        lastOfRect: oLastOfRectCopy,
                        currentOfRect: oCurrentOfRect
                    });
                } else {
                    this._applyPosition(this._oLastPosition);
                }
            }
        }
    }
};
Popup.prototype.ontouchstart = function (oEvent) {
    this.onmousedown(oEvent, true);
    this._bMousedownCalled = true;
};
Popup.prototype.onmousedown = function (oEvent, bSupressChecking) {
    if (this._bMousedownCalled && !bSupressChecking) {
        this._bMousedownCalled = false;
        return;
    }
    if (this._iZIndex === this.getLastZIndex() || this.getModal()) {
        return;
    }
    this._increaseMyZIndex('', 'mousedown', oEvent);
};
Popup.prototype._increaseMyZIndex = function (sChannel, sEvent, oEventData) {
    var oParentPopup = this.getParentPopup(this._oLastPosition.of);
    if (oEventData && oEventData.type === 'mousedown' || oEventData && oEventData.isFromParentPopup || oParentPopup.length === 0) {
        this._iZIndex = this.getNextZIndex();
        var $Ref = this._$(false, true);
        $Ref.css('z-index', this._iZIndex);
        if (this._oBlindLayer) {
            this._oBlindLayer.update($Ref, this._iZIndex - 1);
        }
        if (oEventData && !oEventData.type || oEventData && oEventData.type != 'mousedown' || sEvent === 'mousedown') {
            var aChildPopups = this.getChildPopups();
            for (var i = 0, l = aChildPopups.length; i < l; i++) {
                this.increaseZIndex(aChildPopups[i], true);
            }
        }
    } else if (oParentPopup.length > 0) {
        var sPopupId = jQuery(oParentPopup.get(0)).attr('data-sap-ui-popup');
        this.increaseZIndex(sPopupId, false);
    }
};
Popup.prototype.onAfterRendering = function (oEvent) {
    var oContent = this.getContent();
    var $Ref = oContent instanceof Element ? oContent.$() : jQuery(oContent);
    $Ref.toggleClass('sapUiShd', this._bShadow);
    $Ref.css('position', 'absolute');
    this._setIdentity($Ref);
    var ref = $Ref[0];
    var left = ref.style.left;
    var right = ref.style.right;
    var top = ref.style.top;
    var bottom = ref.style.bottom;
    if (!(left && left != 'auto' || right && right != 'auto' || top && top != 'auto' || bottom && bottom != 'auto')) {
        Log.debug('reposition popup content ' + $Ref.attr('id') + ' at ' + (window.JSON ? JSON.stringify(this._oLastPosition.at) : String(this._oLastPosition.at)));
        this._applyPosition(this._oLastPosition);
    }
    $Ref.show().css({
        'visibility': 'visible',
        'z-index': this._iZIndex
    });
    if (this._oBlindLayer) {
        this._resizeListenerId = ResizeHandler.register(this._$().get(0), jQuery.proxy(this.onresize, this));
    }
    if (this.isOpen() && (this.getModal() || this.getAutoClose())) {
        this._addFocusEventListeners();
    }
    this._$(false, true).on('keydown', jQuery.proxy(this._F6NavigationHandler, this));
};
Popup.prototype.onBeforeRendering = function (oEvent) {
    if (this._resizeListenerId) {
        ResizeHandler.deregister(this._resizeListenerId);
        this._resizeListenerId = null;
    }
    if (this.isOpen() && (this.getModal() || this.getAutoClose())) {
        this._removeFocusEventListeners();
    }
    this._$(false, true).off('keydown', this._F6NavigationHandler);
};
Popup.prototype.onresize = function (oEvent) {
    if (this.eOpenState != OpenState.CLOSED && this._oBlindLayer) {
        var that = this;
        setTimeout(function () {
            that._updateBlindLayer();
        }, 0);
    }
};
Popup.prototype._updateBlindLayer = function () {
    if (this.eOpenState != OpenState.CLOSED && this._oBlindLayer) {
        this._oBlindLayer.update(this._$(false, true));
    }
};
Popup.prototype.isInPopup = function (oThis) {
    var $ParentPopup = this.getParentPopup(oThis);
    return $ParentPopup && $ParentPopup.length > 0;
};
Popup.prototype.getParentPopup = function (oThat) {
    var oThis = oThat ? oThat : this;
    var $This = jQuery(oThis instanceof Element ? oThis.getDomRef() : oThis);
    return $This.closest('[data-sap-ui-popup]');
};
Popup.prototype.getParentPopupId = function (oThis) {
    var $ParentPopup = this.getParentPopup(oThis);
    return $ParentPopup.attr('data-sap-ui-popup');
};
Popup.prototype.addChildToPopup = function (sParentPopupId, sChildPopupId) {
    var sEventId = 'sap.ui.core.Popup.addFocusableContent-' + sParentPopupId;
    sap.ui.getWCCore().getEventBus().publish('sap.ui', sEventId, { id: sChildPopupId });
};
Popup.prototype.removeChildFromPopup = function (sParentPopupId, sChildPopupId) {
    var sEventId = 'sap.ui.core.Popup.removeFocusableContent-' + sParentPopupId;
    sap.ui.getWCCore().getEventBus().publish('sap.ui', sEventId, { id: sChildPopupId });
};
Popup.prototype.closePopup = function (sPopupId) {
    var sEventId = 'sap.ui.core.Popup.closePopup-' + sPopupId;
    sap.ui.getWCCore().getEventBus().publish('sap.ui', sEventId);
};
Popup.prototype.increaseZIndex = function (sPopupId, bIsParent) {
    var sEventId = 'sap.ui.core.Popup.increaseZIndex-' + sPopupId;
    sap.ui.getWCCore().getEventBus().publish('sap.ui', sEventId, { isFromParentPopup: bIsParent ? bIsParent : false });
};
Popup.prototype.focusTabChain = function (mParameters) {
    var oSourceDomRef = mParameters.event.target, sName = mParameters.that.getMetadata().getName(), oFocusDomRef;
    if (!mParameters.$FocusablesContent || !mParameters.$FocusablesFooter || !mParameters.$FocusablesContent.length && !mParameters.$FocusablesFooter.length) {
        return;
    }
    if (oSourceDomRef.id === mParameters.firstFocusable) {
        Log.debug('First dummy focus element was focused', '', sName);
        if (mParameters.$FocusablesFooter.length > 0) {
            Log.debug('Last footer element will be focused', '', sName);
            oFocusDomRef = mParameters.$FocusablesFooter[mParameters.$FocusablesFooter.length - 1];
        } else {
            Log.debug('Last content element will be focused', '', sName);
            oFocusDomRef = mParameters.$FocusablesContent[mParameters.$FocusablesContent.length - 1];
        }
    } else if (oSourceDomRef.id === mParameters.lastFocusable) {
        Log.debug('Last dummy focus element was focues', '', sName);
        if (mParameters.$FocusablesContent.length > 0) {
            Log.debug('First content element will be focused', '', sName);
            oFocusDomRef = mParameters.$FocusablesContent[0];
        } else {
            Log.debug('First footer element will be focused', '', sName);
            oFocusDomRef = mParameters.$FocusablesFooter[0];
        }
    }
    if (oFocusDomRef) {
        setTimeout(function () {
            var oControl = sap.ui.getWCCore().byId(oFocusDomRef.id);
            if (oControl instanceof Control) {
                Log.debug('Focus will be handled by ' + oControl.getMetadata().getName(), '', sName);
            } else {
                Log.debug('oFocusDomRef will be focused', '', sName);
            }
            if (oControl) {
                oControl.focus();
            } else if (oFocusDomRef) {
                oFocusDomRef.focus();
            }
            return oControl ? oControl.getId() : oFocusDomRef.id;
        }, 0);
    }
};
export default Popup;