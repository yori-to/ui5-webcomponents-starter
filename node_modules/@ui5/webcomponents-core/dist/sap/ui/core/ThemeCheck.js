import Device from '../Device.js';
import BaseObject from '../base/Object.js';
import URI from '../thirdparty/URI.js';
import Log from '../../base/Log.js';
import includeStylesheet from '../dom/includeStylesheet.js';
import jQuery from '../thirdparty/jquery.js';
var maxThemeCheckCycles = 150;
var ThemeCheck = BaseObject.extend('sap.ui.core.ThemeCheck', {
    constructor: function (oCore) {
        this._oCore = oCore;
        this._iCount = 0;
        this._CUSTOMCSSCHECK = /\.sapUiThemeDesignerCustomCss/i;
        this._CUSTOMID = 'sap-ui-core-customcss';
        this._customCSSAdded = false;
        this._themeCheckedForCustom = null;
        this._sFallbackTheme = null;
        this._mThemeFallback = {};
        this._oThemeMetaDataCheckElement = null;
    },
    getInterface: function () {
        return this;
    },
    fireThemeChangedEvent: function (bOnlyOnInitFail) {
        clear(this);
        delayedCheckTheme.apply(this, [true]);
        if (!bOnlyOnInitFail && !this._sThemeCheckId) {
            this._oCore.fireThemeChanged({ theme: this._oCore.getConfiguration().getTheme() });
        }
    }
});
ThemeCheck.themeLoaded = false;
function safeAccessSheetCssRules(sheet) {
    try {
        return sheet.cssRules;
    } catch (e) {
        return null;
    }
}
function hasSheetCssRules(sheet) {
    var aCssRules = safeAccessSheetCssRules(sheet);
    return !!aCssRules && aCssRules.length > 0;
}
ThemeCheck.checkStyle = function (sId, bLog) {
    var oStyle = document.getElementById(sId);
    try {
        var bNoLinkElement = false, bLinkElementFinishedLoading = false, bSheet = false, bInnerHtml = false;
        bNoLinkElement = !oStyle;
        bLinkElementFinishedLoading = !!(oStyle && (oStyle.getAttribute('data-sap-ui-ready') === 'true' || oStyle.getAttribute('data-sap-ui-ready') === 'false'));
        bSheet = !!(oStyle && oStyle.sheet && oStyle.sheet.href === oStyle.href && hasSheetCssRules(oStyle.sheet));
        bInnerHtml = !!(oStyle && oStyle.innerHTML && oStyle.innerHTML.length > 0);
        var bResult = bNoLinkElement || bSheet || bInnerHtml || bLinkElementFinishedLoading;
        if (bLog) {
            Log.debug('ThemeCheck: ' + sId + ': ' + bResult + ' (noLinkElement: ' + bNoLinkElement + ', sheet: ' + bSheet + ', innerHtml: ' + bInnerHtml + ', linkElementFinishedLoading: ' + bLinkElementFinishedLoading + ')');
        }
        return bResult;
    } catch (e) {
        if (bLog) {
            Log.error('ThemeCheck: ' + sId + ': Error during check styles \'' + sId + '\'', e);
        }
    }
    return false;
};
function clear(oThemeCheck) {
    ThemeCheck.themeLoaded = false;
    if (oThemeCheck._sThemeCheckId) {
        clearTimeout(oThemeCheck._sThemeCheckId);
        oThemeCheck._sThemeCheckId = null;
        oThemeCheck._iCount = 0;
        oThemeCheck._sFallbackTheme = null;
        oThemeCheck._mThemeFallback = {};
        if (oThemeCheck._oThemeMetaDataCheckElement && oThemeCheck._oThemeMetaDataCheckElement.parentNode) {
            oThemeCheck._oThemeMetaDataCheckElement.parentNode.removeChild(oThemeCheck._oThemeMetaDataCheckElement);
            oThemeCheck._oThemeMetaDataCheckElement = null;
        }
    }
}
function checkTheme(oThemeCheck) {
    var mLibs = oThemeCheck._oCore.getLoadedLibraries();
    var sThemeName = oThemeCheck._oCore.getConfiguration().getTheme();
    var sPath = oThemeCheck._oCore._getThemePath('sap.ui.core', sThemeName) + 'custom.css';
    var bIsStandardTheme = sThemeName.indexOf('sap_') === 0 || sThemeName === 'base';
    var res = true;
    var aFailedLibs = [];
    if (!!oThemeCheck._customCSSAdded && oThemeCheck._themeCheckedForCustom === sThemeName) {
        mLibs[oThemeCheck._CUSTOMID] = {};
    }
    function checkLib(lib) {
        var sStyleId = 'sap-ui-theme-' + lib;
        var currentRes = ThemeCheck.checkStyle(sStyleId, true);
        if (currentRes) {
            var aOldStyles = document.querySelectorAll('link[data-sap-ui-foucmarker=\'' + sStyleId + '\']');
            if (aOldStyles.length > 0) {
                for (var i = 0, l = aOldStyles.length; i < l; i++) {
                    aOldStyles[i].parentNode.removeChild(aOldStyles[i]);
                }
                Log.debug('ThemeCheck: Old stylesheets removed for library: ' + lib);
            }
        }
        res = res && currentRes;
        if (res) {
            if (oThemeCheck._themeCheckedForCustom != sThemeName) {
                if (!bIsStandardTheme && checkCustom(oThemeCheck, lib)) {
                    var sCustomCssPath = sPath;
                    var sLibCssQueryParams = oThemeCheck._oCore._getLibraryCssQueryParams(mLibs['sap.ui.core']);
                    if (sLibCssQueryParams) {
                        sCustomCssPath += sLibCssQueryParams;
                    }
                    includeStylesheet(sCustomCssPath, oThemeCheck._CUSTOMID);
                    oThemeCheck._customCSSAdded = true;
                    Log.warning('ThemeCheck: delivered custom CSS needs to be loaded, Theme not yet applied');
                    oThemeCheck._themeCheckedForCustom = sThemeName;
                    res = false;
                    return false;
                } else {
                    var customCssLink = jQuery('LINK[id=\'' + oThemeCheck._CUSTOMID + '\']');
                    if (customCssLink.length > 0) {
                        customCssLink.remove();
                        Log.debug('ThemeCheck: Custom CSS removed');
                    }
                    oThemeCheck._customCSSAdded = false;
                }
            }
        }
        if (!bIsStandardTheme && currentRes && !oThemeCheck._mThemeFallback[lib]) {
            var oStyle = document.getElementById(sStyleId);
            if (oStyle && oStyle.getAttribute('data-sap-ui-ready') === 'false' && !(oStyle.sheet && hasSheetCssRules(oStyle.sheet))) {
                aFailedLibs.push(lib);
            }
        }
    }
    jQuery.each(mLibs, checkLib);
    if (aFailedLibs.length > 0) {
        if (!oThemeCheck._sFallbackTheme) {
            if (!oThemeCheck._oThemeMetaDataCheckElement) {
                oThemeCheck._oThemeMetaDataCheckElement = document.createElement('style');
                jQuery.each(mLibs, function (sLib) {
                    var sClassName = 'sapThemeMetaData-UI5-' + sLib.replace(/\./g, '-');
                    oThemeCheck._oThemeMetaDataCheckElement.classList.add(sClassName);
                });
                document.head.appendChild(oThemeCheck._oThemeMetaDataCheckElement);
            }
            oThemeCheck._sFallbackTheme = getFallbackTheme(oThemeCheck._oThemeMetaDataCheckElement);
        }
        if (oThemeCheck._sFallbackTheme) {
            aFailedLibs.forEach(function (lib) {
                var sStyleId = 'sap-ui-theme-' + lib;
                var oStyle = document.getElementById(sStyleId);
                Log.warning('ThemeCheck: Custom theme \'' + sThemeName + '\' could not be loaded for library \'' + lib + '\'. ' + 'Falling back to its base theme \'' + oThemeCheck._sFallbackTheme + '\'.');
                oThemeCheck._oCore._updateThemeUrl(oStyle, oThemeCheck._sFallbackTheme);
                oThemeCheck._mThemeFallback[lib] = true;
            });
            res = false;
        }
    }
    if (!res) {
        Log.warning('ThemeCheck: Theme not yet applied.');
    } else {
        oThemeCheck._themeCheckedForCustom = sThemeName;
    }
    return res;
}
function getFallbackTheme(oThemeMetaDataCheckElement) {
    function getThemeMetaData() {
        var sDataUri = window.getComputedStyle(oThemeMetaDataCheckElement).getPropertyValue('background-image');
        var aDataUriMatch = /\(["']?data:text\/plain;utf-8,(.*?)['"]?\)/i.exec(sDataUri);
        if (!aDataUriMatch || aDataUriMatch.length < 2) {
            return null;
        }
        var sMetaData = aDataUriMatch[1];
        if (sMetaData.charAt(0) !== '{' && sMetaData.charAt(sMetaData.length - 1) !== '}') {
            try {
                sMetaData = decodeURI(sMetaData);
            } catch (ex) {
            }
        }
        sMetaData = sMetaData.replace(/\\"/g, '"');
        sMetaData = sMetaData.replace(/%20/g, ' ');
        try {
            return JSON.parse(sMetaData);
        } catch (ex) {
            return null;
        }
    }
    var oThemeMetaData = getThemeMetaData();
    if (oThemeMetaData && oThemeMetaData.Extends && oThemeMetaData.Extends[0]) {
        return oThemeMetaData.Extends[0];
    } else {
        return null;
    }
}
function checkCustom(oThemeCheck, lib) {
    var cssFile = window.document.getElementById('sap-ui-theme-' + lib);
    if (!cssFile) {
        return false;
    }
    var style = window.getComputedStyle(cssFile, ':after');
    var content = style ? style.getPropertyValue('content') : null;
    if (!content && Device.browser.safari) {
        var html = document.documentElement;
        html.classList.add('sapUiThemeDesignerCustomCss');
        content = window.getComputedStyle(html, ':after').getPropertyValue('content');
        html.classList.remove('sapUiThemeDesignerCustomCss');
    }
    if (content && content !== 'none') {
        try {
            if (content[0] === '\'' || content[0] === '"') {
                content = content.substring(1, content.length - 1);
            }
            return content === 'true';
        } catch (e) {
            Log.error('Custom check: Error parsing JSON string for custom.css indication.', e);
        }
    }
    var aRules = cssFile.sheet ? safeAccessSheetCssRules(cssFile.sheet) : null;
    if (!aRules || aRules.length === 0) {
        Log.warning('Custom check: Failed retrieving a CSS rule from stylesheet ' + lib);
        return false;
    }
    for (var i = 0; i < 2 && i < aRules.length; i++) {
        if (oThemeCheck._CUSTOMCSSCHECK.test(aRules[i].selectorText)) {
            return true;
        }
    }
    return false;
}
function delayedCheckTheme(bFirst) {
    this._iCount++;
    var bEmergencyExit = this._iCount > maxThemeCheckCycles;
    if (!checkTheme(this) && !bEmergencyExit) {
        var iDelay;
        if (this._iCount <= 100) {
            iDelay = 2;
        } else if (this._iCount <= 110) {
            iDelay = 500;
        } else {
            iDelay = 1000;
        }
        this._sThemeCheckId = setTimeout(delayedCheckTheme.bind(this), iDelay);
    } else if (!bFirst) {
        clear(this);
        ThemeCheck.themeLoaded = true;
        this._oCore.fireThemeChanged({ theme: this._oCore.getConfiguration().getTheme() });
        if (bEmergencyExit) {
            Log.warning('ThemeCheck: max. check cycles reached.');
        }
    } else {
        ThemeCheck.themeLoaded = true;
    }
}
export default ThemeCheck;