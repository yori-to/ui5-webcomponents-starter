import BaseObject from '../../base/Object.js';
import Locale from '../Locale.js';
import LocaleData from '../LocaleData.js';
import NumberFormat from './NumberFormat.js';
var _UNITS = [
    {
        binaryFactor: 1,
        decimalFactor: 1,
        decimalUnit: 'Byte',
        binaryUnit: 'Byte'
    },
    {
        binaryFactor: 1,
        decimalFactor: 1,
        decimalUnit: 'Bytes',
        binaryUnit: 'Bytes'
    },
    {
        binaryFactor: Math.pow(2, 10),
        decimalFactor: 1000,
        decimalUnit: 'Kilobyte',
        binaryUnit: 'Kibibyte'
    },
    {
        binaryFactor: Math.pow(2, 20),
        decimalFactor: 1000000,
        decimalUnit: 'Megabyte',
        binaryUnit: 'Mebibyte'
    },
    {
        binaryFactor: Math.pow(2, 30),
        decimalFactor: 1000000000,
        decimalUnit: 'Gigabyte',
        binaryUnit: 'Gibibyte'
    },
    {
        binaryFactor: Math.pow(2, 40),
        decimalFactor: 1000000000000,
        decimalUnit: 'Terabyte',
        binaryUnit: 'Tebibyte'
    },
    {
        binaryFactor: Math.pow(2, 50),
        decimalFactor: 1000000000000000,
        decimalUnit: 'Petabyte',
        binaryUnit: 'Pebibyte'
    },
    {
        binaryFactor: Math.pow(2, 60),
        decimalFactor: 1000000000000000000,
        decimalUnit: 'Exabyte',
        binaryUnit: 'Exbibyte'
    },
    {
        binaryFactor: Math.pow(2, 70),
        decimalFactor: 1e+21,
        decimalUnit: 'Zettabyte',
        binaryUnit: 'Zebibyte'
    },
    {
        binaryFactor: Math.pow(2, 80),
        decimalFactor: 1e+24,
        decimalUnit: 'Yottabyte',
        binaryUnit: 'Yobibyte'
    }
];
var FileSizeFormat = BaseObject.extend('sap.ui.core.format.FileSizeFormat', {
    constructor: function (oFormatOptions) {
        throw new Error();
    }
});
FileSizeFormat.getInstance = function (oFormatOptions, oLocale) {
    return this.createInstance(oFormatOptions, oLocale);
};
FileSizeFormat.createInstance = function (oFormatOptions, oLocale) {
    var oFormat = Object.create(this.prototype);
    if (oFormatOptions instanceof Locale) {
        oLocale = oFormatOptions;
        oFormatOptions = undefined;
    }
    if (!oLocale) {
        oLocale = sap.ui.getWCCore().getConfiguration().getFormatSettings().getFormatLocale();
    }
    oFormat.oLocale = oLocale;
    oFormat.oLocaleData = LocaleData.getInstance(oLocale);
    oFormat.oNumberFormat = NumberFormat.getFloatInstance(oFormatOptions, oLocale);
    oFormat.oBundle = sap.ui.getWCCore().getLibraryResourceBundle('sap.ui.core', oLocale.toString());
    oFormat.bBinary = oFormatOptions ? !!oFormatOptions.binaryFilesize : false;
    return oFormat;
};
FileSizeFormat.prototype.format = function (oValue) {
    var fValue = null, fOriginValue;
    if (typeof oValue == 'string') {
        try {
            if (/^\s*[\+-]?0[xX]/.test(oValue)) {
                fValue = parseInt(oValue, 16);
            } else {
                fValue = parseFloat(oValue, 10);
            }
        } catch (e) {
        }
    } else if (typeof oValue == 'number') {
        fValue = oValue;
    }
    if (fValue === null) {
        return 'NaN';
    }
    fOriginValue = fValue;
    var oUnit = _getUnit(fValue, this.bBinary), sValue = this.oNumberFormat.format(fValue / oUnit.factor);
    if (!oUnit.noSecondRounding) {
        fValue = this.oNumberFormat.parse(sValue);
        if (this.bBinary && Math.abs(fValue) >= 1024 || !this.bBinary && Math.abs(fValue) >= 1000) {
            oUnit = _getUnit(fValue * oUnit.factor, this.bBinary);
            sValue = this.oNumberFormat.format(fOriginValue / oUnit.factor);
        }
    }
    return this.oBundle.getText('FileSize.' + oUnit.unit, sValue);
};
FileSizeFormat.prototype.parse = function (sValue) {
    var oUnit, _sValue, fValue, bBinary;
    if (!sValue) {
        return NaN;
    }
    for (var i = 0; i < _UNITS.length; i++) {
        oUnit = _UNITS[i];
        _sValue = _checkUnit(this.oBundle, oUnit.decimalUnit, sValue);
        if (_sValue) {
            bBinary = false;
            break;
        } else {
            _sValue = _checkUnit(this.oBundle, oUnit.binaryUnit, sValue);
            if (_sValue) {
                bBinary = true;
                break;
            }
        }
    }
    if (!_sValue) {
        _sValue = sValue;
        bBinary = false;
        oUnit = _UNITS[0];
    }
    fValue = this.oNumberFormat.parse(_sValue);
    return fValue * (bBinary ? oUnit.binaryFactor : oUnit.decimalFactor);
};
function _getUnit(fBytes, bBinary) {
    var b = Math.abs(fBytes), unit, factor;
    for (var i = _UNITS.length - 1; i >= 2; i--) {
        unit = _UNITS[i];
        factor = bBinary ? unit.binaryFactor : unit.decimalFactor;
        if (b >= factor) {
            return {
                factor: factor,
                unit: bBinary ? unit.binaryUnit : unit.decimalUnit,
                noSecondRounding: i == _UNITS.length - 1
            };
        }
    }
    return {
        factor: 1,
        unit: _UNITS[b >= 2 ? 1 : 0].decimalUnit
    };
}
function _checkUnit(oBundle, sUnit, sValue) {
    var sPattern = oBundle.getText('FileSize.' + sUnit), _oPattern;
    if (sPattern.startsWith('{0}')) {
        _oPattern = sPattern.substr(3, sPattern.length);
        if (typeof _oPattern == 'string' && _oPattern != '' ? sValue.toLowerCase().endsWith(_oPattern.toLowerCase()) : false) {
            return sValue.substr(0, sValue.length - _oPattern.length);
        }
    } else if (sPattern.endsWith('{0}')) {
        _oPattern = sPattern.substr(0, sPattern.length - 3);
        if (typeof _oPattern == 'string' && _oPattern != '' ? sValue.toLowerCase().startsWith(_oPattern.toLowerCase()) : false) {
            return sValue.substr(_oPattern.length, sValue.length);
        }
    } else {
        _oPattern = sPattern.split('{0}');
        if (_oPattern.length == 2 && (typeof _oPattern[0] == 'string' && _oPattern[0] != '' ? sValue.toLowerCase().startsWith(_oPattern[0].toLowerCase()) : false) && (typeof _oPattern[1] == 'string' && _oPattern[1] != '' ? sValue.toLowerCase().endsWith(_oPattern[1].toLowerCase()) : false)) {
            return sValue.substr(_oPattern[0].length, sValue.length - _oPattern[1].length);
        }
    }
    return null;
}
export default FileSizeFormat;