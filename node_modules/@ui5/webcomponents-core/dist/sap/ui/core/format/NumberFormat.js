import BaseObject from '../../base/Object.js';
import Locale from '../Locale.js';
import LocaleData from '../LocaleData.js';
import Log from '../../../base/Log.js';
import assert from '../../../base/assert.js';
import jQuery from '../../thirdparty/jquery.js';
var NumberFormat = BaseObject.extend('sap.ui.core.format.NumberFormat', {
    constructor: function (oFormatOptions) {
        throw new Error();
    }
});
var rNumPlaceHolder = /0+(\.0+)?/;
var mNumberType = {
    INTEGER: 'integer',
    FLOAT: 'float',
    CURRENCY: 'currency',
    UNIT: 'unit',
    PERCENT: 'percent'
};
var mRoundingMode = {
    FLOOR: 'floor',
    CEILING: 'ceiling',
    TOWARDS_ZERO: 'towards_zero',
    AWAY_FROM_ZERO: 'away_from_zero',
    HALF_FLOOR: 'half_floor',
    HALF_CEILING: 'half_ceiling',
    HALF_TOWARDS_ZERO: 'half_towards_zero',
    HALF_AWAY_FROM_ZERO: 'half_away_from_zero'
};
var mRoundingFunction = {};
mRoundingFunction[mRoundingMode.FLOOR] = Math.floor;
mRoundingFunction[mRoundingMode.CEILING] = Math.ceil;
mRoundingFunction[mRoundingMode.TOWARDS_ZERO] = function (nValue) {
    return nValue > 0 ? Math.floor(nValue) : Math.ceil(nValue);
};
mRoundingFunction[mRoundingMode.AWAY_FROM_ZERO] = function (nValue) {
    return nValue > 0 ? Math.ceil(nValue) : Math.floor(nValue);
};
mRoundingFunction[mRoundingMode.HALF_TOWARDS_ZERO] = function (nValue) {
    return nValue > 0 ? Math.ceil(nValue - 0.5) : Math.floor(nValue + 0.5);
};
mRoundingFunction[mRoundingMode.HALF_AWAY_FROM_ZERO] = function (nValue) {
    return nValue > 0 ? Math.floor(nValue + 0.5) : Math.ceil(nValue - 0.5);
};
mRoundingFunction[mRoundingMode.HALF_FLOOR] = function (nValue) {
    return Math.ceil(nValue - 0.5);
};
mRoundingFunction[mRoundingMode.HALF_CEILING] = Math.round;
NumberFormat.RoundingMode = mRoundingMode;
NumberFormat.oDefaultIntegerFormat = {
    minIntegerDigits: 1,
    maxIntegerDigits: 99,
    minFractionDigits: 0,
    maxFractionDigits: 0,
    groupingEnabled: false,
    groupingSize: 3,
    groupingSeparator: ',',
    decimalSeparator: '.',
    plusSign: '+',
    minusSign: '-',
    isInteger: true,
    type: mNumberType.INTEGER,
    showMeasure: false,
    style: 'standard',
    parseAsString: false,
    roundingMode: NumberFormat.RoundingMode.TOWARDS_ZERO,
    emptyString: NaN,
    showScale: true
};
NumberFormat.oDefaultFloatFormat = {
    minIntegerDigits: 1,
    maxIntegerDigits: 99,
    minFractionDigits: 0,
    maxFractionDigits: 99,
    groupingEnabled: true,
    groupingSize: 3,
    groupingSeparator: ',',
    decimalSeparator: '.',
    plusSign: '+',
    minusSign: '-',
    isInteger: false,
    type: mNumberType.FLOAT,
    showMeasure: false,
    style: 'standard',
    parseAsString: false,
    roundingMode: NumberFormat.RoundingMode.HALF_AWAY_FROM_ZERO,
    emptyString: NaN,
    showScale: true
};
NumberFormat.oDefaultPercentFormat = {
    minIntegerDigits: 1,
    maxIntegerDigits: 99,
    minFractionDigits: 0,
    maxFractionDigits: 99,
    groupingEnabled: true,
    groupingSize: 3,
    groupingSeparator: ',',
    decimalSeparator: '.',
    plusSign: '+',
    minusSign: '-',
    percentSign: '%',
    isInteger: false,
    type: mNumberType.PERCENT,
    showMeasure: false,
    style: 'standard',
    parseAsString: false,
    roundingMode: NumberFormat.RoundingMode.HALF_AWAY_FROM_ZERO,
    emptyString: NaN,
    showScale: true
};
NumberFormat.oDefaultCurrencyFormat = {
    minIntegerDigits: 1,
    maxIntegerDigits: 99,
    groupingEnabled: true,
    groupingSize: 3,
    groupingSeparator: ',',
    decimalSeparator: '.',
    plusSign: '+',
    minusSign: '-',
    isInteger: false,
    type: mNumberType.CURRENCY,
    showMeasure: true,
    currencyCode: true,
    currencyContext: 'standard',
    style: 'standard',
    customCurrencies: undefined,
    parseAsString: false,
    roundingMode: NumberFormat.RoundingMode.HALF_AWAY_FROM_ZERO,
    emptyString: NaN,
    showScale: true,
    ignorePrecision: true
};
NumberFormat.oDefaultUnitFormat = {
    minIntegerDigits: 1,
    maxIntegerDigits: 99,
    groupingEnabled: true,
    groupingSize: 3,
    groupingSeparator: ',',
    decimalSeparator: '.',
    plusSign: '+',
    minusSign: '-',
    isInteger: false,
    type: mNumberType.UNIT,
    showMeasure: true,
    style: 'standard',
    customUnits: undefined,
    allowedUnits: undefined,
    parseAsString: false,
    roundingMode: NumberFormat.RoundingMode.HALF_AWAY_FROM_ZERO,
    emptyString: NaN,
    showScale: true
};
NumberFormat.getInstance = function (oFormatOptions, oLocale) {
    return this.getFloatInstance(oFormatOptions, oLocale);
};
NumberFormat.getFloatInstance = function (oFormatOptions, oLocale) {
    var oFormat = this.createInstance(oFormatOptions, oLocale), oLocaleFormatOptions = this.getLocaleFormatOptions(oFormat.oLocaleData, mNumberType.FLOAT);
    oFormat.oFormatOptions = jQuery.extend(false, {}, this.oDefaultFloatFormat, oLocaleFormatOptions, oFormatOptions);
    return oFormat;
};
NumberFormat.getIntegerInstance = function (oFormatOptions, oLocale) {
    var oFormat = this.createInstance(oFormatOptions, oLocale), oLocaleFormatOptions = this.getLocaleFormatOptions(oFormat.oLocaleData, mNumberType.INTEGER);
    oFormat.oFormatOptions = jQuery.extend(false, {}, this.oDefaultIntegerFormat, oLocaleFormatOptions, oFormatOptions);
    return oFormat;
};
NumberFormat.getCurrencyInstance = function (oFormatOptions, oLocale) {
    var oFormat = this.createInstance(oFormatOptions, oLocale), sContext = oFormatOptions && oFormatOptions.currencyContext, oLocaleFormatOptions = this.getLocaleFormatOptions(oFormat.oLocaleData, mNumberType.CURRENCY, sContext);
    oFormat.oFormatOptions = jQuery.extend(false, {}, this.oDefaultCurrencyFormat, oLocaleFormatOptions, oFormatOptions);
    oFormat._defineCustomCurrencySymbols();
    return oFormat;
};
NumberFormat.getUnitInstance = function (oFormatOptions, oLocale) {
    var oFormat = this.createInstance(oFormatOptions, oLocale), oLocaleFormatOptions = this.getLocaleFormatOptions(oFormat.oLocaleData, mNumberType.UNIT);
    oFormat.oFormatOptions = jQuery.extend(false, {}, this.oDefaultUnitFormat, oLocaleFormatOptions, oFormatOptions);
    return oFormat;
};
NumberFormat.getPercentInstance = function (oFormatOptions, oLocale) {
    var oFormat = this.createInstance(oFormatOptions, oLocale), oLocaleFormatOptions = this.getLocaleFormatOptions(oFormat.oLocaleData, mNumberType.PERCENT);
    oFormat.oFormatOptions = jQuery.extend(false, {}, this.oDefaultPercentFormat, oLocaleFormatOptions, oFormatOptions);
    return oFormat;
};
NumberFormat.createInstance = function (oFormatOptions, oLocale) {
    var oFormat = Object.create(this.prototype), oPatternOptions;
    if (oFormatOptions instanceof Locale) {
        oLocale = oFormatOptions;
        oFormatOptions = undefined;
    }
    if (!oLocale) {
        oLocale = sap.ui.getWCCore().getConfiguration().getFormatSettings().getFormatLocale();
    }
    oFormat.oLocale = oLocale;
    oFormat.oLocaleData = LocaleData.getInstance(oLocale);
    oFormat.oOriginalFormatOptions = oFormatOptions;
    if (oFormatOptions) {
        if (oFormatOptions.pattern) {
            oPatternOptions = this.parseNumberPattern(oFormatOptions.pattern);
            jQuery.each(oPatternOptions, function (sName, vOption) {
                oFormatOptions[sName] = vOption;
            });
        }
        if (oFormatOptions.emptyString !== undefined) {
            assert(typeof oFormatOptions.emptyString !== 'string', 'The format option \'emptyString\' can not be with type \'string\'');
            assert(oFormatOptions.emptyString === 0 || oFormatOptions.emptyString === null || oFormatOptions.emptyString !== oFormatOptions.emptyString, 'The format option \'emptyString\' must be either 0, null or NaN');
        }
    }
    return oFormat;
};
NumberFormat.getDefaultUnitPattern = function (sShortName) {
    return '{0} ' + sShortName;
};
NumberFormat.getLocaleFormatOptions = function (oLocaleData, iType, sContext) {
    var oLocaleFormatOptions, sNumberPattern;
    switch (iType) {
    case mNumberType.PERCENT:
        sNumberPattern = oLocaleData.getPercentPattern();
        break;
    case mNumberType.CURRENCY:
        sNumberPattern = oLocaleData.getCurrencyPattern(sContext);
        break;
    case mNumberType.UNIT:
        sNumberPattern = oLocaleData.getDecimalPattern();
        break;
    default:
        sNumberPattern = oLocaleData.getDecimalPattern();
    }
    oLocaleFormatOptions = this.parseNumberPattern(sNumberPattern);
    oLocaleFormatOptions.plusSign = oLocaleData.getNumberSymbol('plusSign');
    oLocaleFormatOptions.minusSign = oLocaleData.getNumberSymbol('minusSign');
    oLocaleFormatOptions.decimalSeparator = oLocaleData.getNumberSymbol('decimal');
    oLocaleFormatOptions.groupingSeparator = oLocaleData.getNumberSymbol('group');
    oLocaleFormatOptions.percentSign = oLocaleData.getNumberSymbol('percentSign');
    oLocaleFormatOptions.pattern = sNumberPattern;
    switch (iType) {
    case mNumberType.FLOAT:
    case mNumberType.PERCENT:
        oLocaleFormatOptions.minFractionDigits = 0;
        oLocaleFormatOptions.maxFractionDigits = 99;
        break;
    case mNumberType.INTEGER:
        oLocaleFormatOptions.minFractionDigits = 0;
        oLocaleFormatOptions.maxFractionDigits = 0;
        oLocaleFormatOptions.groupingEnabled = false;
        break;
    case mNumberType.CURRENCY:
        oLocaleFormatOptions.minFractionDigits = undefined;
        oLocaleFormatOptions.maxFractionDigits = undefined;
        break;
    }
    return oLocaleFormatOptions;
};
NumberFormat.parseNumberPattern = function (sFormatString) {
    var iMinIntegerDigits = 0, iMinFractionDigits = 0, iMaxFractionDigits = 0, bGroupingEnabled = false, iGroupSize = 0, iBaseGroupSize = 0, iSeparatorPos = sFormatString.indexOf(';'), mSection = {
            Integer: 0,
            Fraction: 1
        }, iSection = mSection.Integer;
    if (iSeparatorPos !== -1) {
        sFormatString = sFormatString.substring(0, iSeparatorPos);
    }
    for (var i = 0; i < sFormatString.length; i++) {
        var sCharacter = sFormatString[i];
        switch (sCharacter) {
        case ',':
            if (bGroupingEnabled) {
                iGroupSize = iBaseGroupSize;
                iBaseGroupSize = 0;
            }
            bGroupingEnabled = true;
            break;
        case '.':
            iSection = mSection.Fraction;
            break;
        case '0':
            if (iSection === mSection.Integer) {
                iMinIntegerDigits++;
                if (bGroupingEnabled) {
                    iBaseGroupSize++;
                }
            } else {
                iMinFractionDigits++;
                iMaxFractionDigits++;
            }
            break;
        case '#':
            if (iSection === mSection.Integer) {
                if (bGroupingEnabled) {
                    iBaseGroupSize++;
                }
            } else {
                iMaxFractionDigits++;
            }
            break;
        }
    }
    if (!iGroupSize) {
        iGroupSize = iBaseGroupSize;
        iBaseGroupSize = 0;
    }
    return {
        minIntegerDigits: iMinIntegerDigits,
        minFractionDigits: iMinFractionDigits,
        maxFractionDigits: iMaxFractionDigits,
        groupingEnabled: bGroupingEnabled,
        groupingSize: iGroupSize,
        groupingBaseSize: iBaseGroupSize
    };
};
NumberFormat.prototype._defineCustomCurrencySymbols = function () {
    var oOptions = this.oFormatOptions;
    var mCurrencySymbols = this.oLocaleData.getCurrencySymbols();
    var fnFindDuplicates = function (mSymbols, mResult) {
        var aUniqueSymbols = [];
        var sSymbol;
        for (var sKey in mSymbols) {
            sSymbol = mSymbols[sKey];
            if (aUniqueSymbols.indexOf(sSymbol) === -1) {
                aUniqueSymbols.push(sSymbol);
            } else if (sSymbol !== undefined) {
                mResult[sSymbol] = true;
                Log.error('Symbol \'' + sSymbol + '\' is defined multiple times in custom currencies.', undefined, 'NumberFormat');
            }
        }
    };
    if (oOptions.customCurrencies && typeof oOptions.customCurrencies === 'object') {
        this.mKnownCurrencySymbols = {};
        this.mKnownCurrencyCodes = {};
        Object.keys(oOptions.customCurrencies).forEach(function (sKey) {
            if (oOptions.customCurrencies[sKey].symbol) {
                this.mKnownCurrencySymbols[sKey] = oOptions.customCurrencies[sKey].symbol;
            } else {
                var sIsoCode = oOptions.customCurrencies[sKey].isoCode;
                if (sIsoCode) {
                    this.mKnownCurrencySymbols[sKey] = mCurrencySymbols[sIsoCode];
                }
            }
            this.mKnownCurrencyCodes[sKey] = sKey;
        }.bind(this));
    } else {
        this.mKnownCurrencySymbols = mCurrencySymbols;
        this.mKnownCurrencyCodes = this.oLocaleData.getCustomCurrencyCodes();
    }
    this.mDuplicatedSymbols = {};
    fnFindDuplicates(this.mKnownCurrencySymbols, this.mDuplicatedSymbols);
};
NumberFormat.prototype.format = function (vValue, sMeasure) {
    if (Array.isArray(vValue)) {
        sMeasure = vValue[1];
        vValue = vValue[0];
    }
    var sIntegerPart = '', sFractionPart = '', sGroupedIntegerPart = '', sResult = '', sNumber = '', sPattern = '', iPosition = 0, iLength = 0, iGroupSize = 0, iBaseGroupSize = 0, bNegative = vValue < 0, iDotPos = -1, oOptions = jQuery.extend({}, this.oFormatOptions), oOrigOptions = this.oOriginalFormatOptions, bIndianCurrency = oOptions.type === mNumberType.CURRENCY && sMeasure === 'INR' && this.oLocale.getLanguage() === 'en' && this.oLocale.getRegion() === 'IN', aPatternParts, oShortFormat, nShortRefNumber, sPluralCategory, mUnitPatterns, sLookupMeasure;
    if (vValue === oOptions.emptyString || isNaN(vValue) && isNaN(oOptions.emptyString)) {
        return '';
    }
    if (sMeasure && oOptions.customCurrencies && !oOptions.customCurrencies[sMeasure]) {
        Log.error('Currency \'' + sMeasure + '\' is unknown.');
        return '';
    }
    if (oOptions.type === mNumberType.UNIT) {
        if (oOptions.customUnits && typeof oOptions.customUnits === 'object') {
            mUnitPatterns = oOptions.customUnits[sMeasure];
        } else {
            sLookupMeasure = this.oLocaleData.getUnitFromMapping(sMeasure) || sMeasure;
            mUnitPatterns = this.oLocaleData.getUnitFormat(sLookupMeasure);
        }
        oOptions.decimals = mUnitPatterns && (typeof mUnitPatterns.decimals === 'number' && mUnitPatterns.decimals >= 0) ? mUnitPatterns.decimals : oOptions.decimals;
        oOptions.precision = mUnitPatterns && (typeof mUnitPatterns.precision === 'number' && mUnitPatterns.precision >= 0) ? mUnitPatterns.precision : oOptions.precision;
    }
    if (oOptions.decimals !== undefined) {
        oOptions.minFractionDigits = oOptions.decimals;
        oOptions.maxFractionDigits = oOptions.decimals;
    }
    if (oOptions.shortLimit === undefined || Math.abs(vValue) >= oOptions.shortLimit) {
        nShortRefNumber = oOptions.shortRefNumber === undefined ? vValue : oOptions.shortRefNumber;
        oShortFormat = getShortenedFormat(nShortRefNumber, oOptions, this.oLocaleData, bIndianCurrency);
        if (oShortFormat && oShortFormat.formatString != '0') {
            vValue = vValue / oShortFormat.magnitude;
            if (oOptions.shortDecimals !== undefined) {
                oOptions.minFractionDigits = oOptions.shortDecimals;
                oOptions.maxFractionDigits = oOptions.shortDecimals;
            } else {
                if (oOrigOptions.minFractionDigits === undefined && oOrigOptions.maxFractionDigits === undefined && oOrigOptions.decimals === undefined && oOrigOptions.precision === undefined && oOrigOptions.pattern === undefined) {
                    oOptions.precision = 2;
                    oOptions.minFractionDigits = 0;
                    oOptions.maxFractionDigits = 99;
                }
                if (oOrigOptions.maxFractionDigits === undefined && oOrigOptions.decimals === undefined) {
                    oOptions.maxFractionDigits = 99;
                }
            }
            oOptions.roundingMode = NumberFormat.RoundingMode.HALF_AWAY_FROM_ZERO;
        }
    }
    if ((oShortFormat || !oOptions.ignorePrecision) && oOptions.precision !== undefined) {
        oOptions.maxFractionDigits = Math.min(oOptions.maxFractionDigits, getDecimals(vValue, oOptions.precision));
        oOptions.minFractionDigits = Math.min(oOptions.minFractionDigits, oOptions.maxFractionDigits);
    }
    if (oOptions.type == mNumberType.PERCENT) {
        vValue = NumberFormat._shiftDecimalPoint(vValue, 2);
    }
    if (oOptions.type == mNumberType.CURRENCY) {
        var iDigits = this.oLocaleData.getCurrencyDigits(sMeasure);
        if (oOptions.customCurrencies && oOptions.customCurrencies[sMeasure] && oOptions.customCurrencies[sMeasure].decimals !== undefined) {
            iDigits = oOptions.customCurrencies[sMeasure].decimals;
        }
        if (oOptions.maxFractionDigits === undefined) {
            oOptions.maxFractionDigits = iDigits;
        }
        if (oOptions.minFractionDigits === undefined) {
            oOptions.minFractionDigits = iDigits;
        }
    }
    if (typeof vValue === 'number') {
        vValue = rounding(vValue, oOptions.maxFractionDigits, oOptions.roundingMode);
    }
    if (vValue == 0) {
        bNegative = false;
    }
    sNumber = this.convertToDecimal(vValue);
    if (sNumber == 'NaN') {
        return sNumber;
    }
    if (bNegative) {
        sNumber = sNumber.substr(1);
    }
    iDotPos = sNumber.indexOf('.');
    if (iDotPos > -1) {
        sIntegerPart = sNumber.substr(0, iDotPos);
        sFractionPart = sNumber.substr(iDotPos + 1);
    } else {
        sIntegerPart = sNumber;
    }
    if (sIntegerPart.length < oOptions.minIntegerDigits) {
        sIntegerPart = sIntegerPart.padStart(oOptions.minIntegerDigits, '0');
    } else if (sIntegerPart.length > oOptions.maxIntegerDigits) {
        sIntegerPart = ''.padStart(oOptions.maxIntegerDigits, '?');
    }
    if (sFractionPart.length < oOptions.minFractionDigits) {
        sFractionPart = sFractionPart.padEnd(oOptions.minFractionDigits, '0');
    } else if (sFractionPart.length > oOptions.maxFractionDigits) {
        sFractionPart = sFractionPart.substr(0, oOptions.maxFractionDigits);
    }
    iLength = sIntegerPart.length;
    if (oOptions.groupingEnabled) {
        if (bIndianCurrency) {
            var aGroups = [
                    3,
                    2,
                    2
                ], iCurGroupSize, iIndex = 0;
            iPosition = sIntegerPart.length;
            while (iPosition > 0) {
                iCurGroupSize = aGroups[iIndex % 3];
                iPosition -= iCurGroupSize;
                if (iIndex > 0) {
                    sGroupedIntegerPart = oOptions.groupingSeparator + sGroupedIntegerPart;
                }
                if (iPosition < 0) {
                    iCurGroupSize += iPosition;
                    iPosition = 0;
                }
                sGroupedIntegerPart = sIntegerPart.substr(iPosition, iCurGroupSize) + sGroupedIntegerPart;
                iIndex++;
            }
        } else {
            iGroupSize = oOptions.groupingSize;
            iBaseGroupSize = oOptions.groupingBaseSize || iGroupSize;
            iPosition = Math.max(iLength - iBaseGroupSize, 0) % iGroupSize || iGroupSize;
            sGroupedIntegerPart = sIntegerPart.substr(0, iPosition);
            while (iLength - iPosition >= iBaseGroupSize) {
                sGroupedIntegerPart += oOptions.groupingSeparator;
                sGroupedIntegerPart += sIntegerPart.substr(iPosition, iGroupSize);
                iPosition += iGroupSize;
            }
            sGroupedIntegerPart += sIntegerPart.substr(iPosition);
        }
    } else {
        sGroupedIntegerPart = sIntegerPart;
    }
    if (bNegative) {
        sResult = oOptions.minusSign;
    }
    sResult += sGroupedIntegerPart;
    if (sFractionPart) {
        sResult += oOptions.decimalSeparator + sFractionPart;
    }
    if (oShortFormat && oShortFormat.formatString && oOptions.showScale && oOptions.type !== mNumberType.CURRENCY) {
        sPluralCategory = this.oLocaleData.getPluralCategory(sIntegerPart + '.' + sFractionPart);
        oShortFormat.formatString = this.oLocaleData.getDecimalFormat(oOptions.style, oShortFormat.key, sPluralCategory);
        sResult = oShortFormat.formatString.replace(oShortFormat.valueSubString, sResult);
        sResult = sResult.replace(/'.'/g, '.');
    }
    if (oOptions.type === mNumberType.CURRENCY) {
        sPattern = oOptions.pattern;
        if (oShortFormat && oShortFormat.formatString && oOptions.showScale) {
            sPluralCategory = this.oLocaleData.getPluralCategory(sIntegerPart + '.' + sFractionPart);
            if (bIndianCurrency) {
                sPattern = getIndianCurrencyFormat('short', oShortFormat.key, sPluralCategory);
            } else {
                sPattern = this.oLocaleData.getCurrencyFormat('short', oShortFormat.key, sPluralCategory);
            }
            sPattern = sPattern.replace(/'.'/g, '.');
        }
        aPatternParts = sPattern.split(';');
        if (aPatternParts.length === 2) {
            sPattern = bNegative ? aPatternParts[1] : aPatternParts[0];
            if (bNegative) {
                sResult = sResult.substring(1);
            }
        }
        if (!oOptions.currencyCode) {
            var sSymbol;
            if (oOptions.customCurrencies && typeof oOptions.customCurrencies === 'object') {
                sSymbol = this.mKnownCurrencySymbols[sMeasure];
            } else {
                sSymbol = this.oLocaleData.getCurrencySymbol(sMeasure);
            }
            if (sSymbol && sSymbol !== sMeasure) {
                sMeasure = sSymbol;
            }
        }
        sResult = this._composeCurrencyResult(sPattern, sResult, sMeasure, {
            showMeasure: oOptions.showMeasure,
            negative: bNegative,
            minusSign: oOptions.minusSign
        });
    }
    if (oOptions.type === mNumberType.PERCENT) {
        sPattern = oOptions.pattern;
        sResult = sPattern.replace(/[0#.,]+/, sResult);
        sResult = sResult.replace(/%/, oOptions.percentSign);
    }
    if (oOptions.showMeasure && oOptions.type === mNumberType.UNIT) {
        sPluralCategory = this.oLocaleData.getPluralCategory(sIntegerPart + '.' + sFractionPart);
        assert(sPluralCategory, 'Cannot find plural category for ' + (sIntegerPart + '.' + sFractionPart));
        var bUnitTypeAllowed = !oOptions.allowedUnits || oOptions.allowedUnits.indexOf(sMeasure) >= 0;
        if (!bUnitTypeAllowed) {
            assert(bUnitTypeAllowed, 'The given unit \'' + sMeasure + '\' is not part of the allowed unit types: [' + oOptions.allowedUnits.join(',') + '].');
            return '';
        }
        if (mUnitPatterns) {
            sPattern = mUnitPatterns['unitPattern-count-' + sPluralCategory];
            if (!sPattern) {
                sPattern = mUnitPatterns['unitPattern-count-other'];
            }
            assert(sPattern, 'Cannot find pattern \'unitPattern-count-' + sPluralCategory + '\' in \'' + sMeasure + '\'');
            if (!sPattern) {
                return '';
            }
            sResult = sPattern.replace('{0}', sResult);
        } else if (!oOptions.unitOptional) {
            assert(mUnitPatterns, 'Unit \'' + sMeasure + '\' is unknown');
            return '';
        }
    }
    if (sap.ui.getWCCore().getConfiguration().getOriginInfo()) {
        sResult = new String(sResult);
        sResult.originInfo = {
            source: 'Common Locale Data Repository',
            locale: this.oLocale.toString()
        };
    }
    return sResult;
};
NumberFormat.prototype._composeCurrencyResult = function (sPattern, sFormattedNumber, sMeasure, oOptions) {
    var sMinusSign = oOptions.minusSign;
    sPattern = sPattern.replace(/[0#.,]+/, sFormattedNumber);
    if (oOptions.showMeasure && sMeasure) {
        var sPlaceHolder = '\xA4', mRegex = {
                '[:digit:]': /\d/,
                '[:^S:]': /[^\$\xA2-\xA5\u058F\u060B\u09F2\u09F3\u09FB\u0AF1\u0BF9\u0E3F\u17DB\u20A0-\u20BD\uA838\uFDFC\uFE69\uFF04\uFFE0\uFFE1\uFFE5\uFFE6]/
            }, iMeasureStart = sPattern.indexOf(sPlaceHolder), sPosition = iMeasureStart < sPattern.length / 2 ? 'after' : 'before', oSpacingSetting = this.oLocaleData.getCurrencySpacing(sPosition), sCurrencyChar = sPosition === 'after' ? sMeasure.charAt(sMeasure.length - 1) : sMeasure.charAt(0), sNumberChar, rCurrencyChar = mRegex[oSpacingSetting.currencyMatch], rNumberChar = mRegex[oSpacingSetting.surroundingMatch], iInsertPos;
        sPattern = sPattern.replace(sPlaceHolder, sMeasure);
        sNumberChar = sPosition === 'after' ? sPattern.charAt(iMeasureStart + sMeasure.length) : sPattern.charAt(iMeasureStart - 1);
        if (rCurrencyChar && rCurrencyChar.test(sCurrencyChar) && rNumberChar && rNumberChar.test(sNumberChar)) {
            if (sPosition === 'after') {
                iInsertPos = iMeasureStart + sMeasure.length;
            } else {
                iInsertPos = iMeasureStart;
            }
            sPattern = sPattern.slice(0, iInsertPos) + oSpacingSetting.insertBetween + sPattern.slice(iInsertPos);
        } else if (oOptions.negative && sPosition === 'after') {
            sMinusSign = '\uFEFF' + oOptions.minusSign;
        }
    } else {
        sPattern = sPattern.replace(/\s*\u00a4\s*/, '');
    }
    if (oOptions.negative) {
        sPattern = sPattern.replace(/-/, sMinusSign);
    }
    return sPattern;
};
NumberFormat.prototype.parse = function (sValue) {
    var oOptions = this.oFormatOptions, sPlusMinusSigns = quote(oOptions.plusSign + oOptions.minusSign), sGroupingSeparator = quote(oOptions.groupingSeparator), sDecimalSeparator = quote(oOptions.decimalSeparator), sRegExpFloat = '^\\s*([' + sPlusMinusSigns + ']?(?:[0-9' + sGroupingSeparator + ']+|[0-9' + sGroupingSeparator + ']*' + sDecimalSeparator + '[0-9]*)(?:[eE][+-][0-9]+)?)\\s*$', sRegExpInt = '^\\s*([' + sPlusMinusSigns + ']?[0-9' + sGroupingSeparator + ']+)\\s*$', oGroupingRegExp = new RegExp(sGroupingSeparator, 'g'), oDecimalRegExp = new RegExp(sDecimalSeparator, 'g'), sPercentSign = this.oLocaleData.getNumberSymbol('percentSign'), bIndianCurrency = oOptions.type === mNumberType.CURRENCY && this.oLocale.getLanguage() === 'en' && this.oLocale.getRegion() === 'IN', oRegExp, bPercent, sMeasure, sPercentPattern, vResult = 0, oShort, vEmptyParseValue;
    if (sValue === '') {
        vEmptyParseValue = oOptions.emptyString;
        if (oOptions.parseAsString && (oOptions.emptyString === 0 || isNaN(oOptions.emptyString))) {
            vEmptyParseValue = oOptions.emptyString + '';
        }
        if (oOptions.type === mNumberType.CURRENCY || oOptions.type === mNumberType.UNIT) {
            return [
                vEmptyParseValue,
                undefined
            ];
        } else {
            return vEmptyParseValue;
        }
    }
    sPercentPattern = oOptions.type === mNumberType.PERCENT ? oOptions.pattern : this.oLocaleData.getPercentPattern();
    if (sPercentPattern.charAt(0) === '%') {
        sRegExpFloat = sRegExpFloat.slice(0, 1) + '%?' + sRegExpFloat.slice(1);
    } else if (sPercentPattern.charAt(sPercentPattern.length - 1) === '%') {
        sRegExpFloat = sRegExpFloat.slice(0, sRegExpFloat.length - 1) + '%?' + sRegExpFloat.slice(sRegExpFloat.length - 1);
    }
    var aUnitCode;
    if (oOptions.type === mNumberType.UNIT) {
        var mUnitPatterns;
        if (oOptions.customUnits && typeof oOptions.customUnits === 'object') {
            mUnitPatterns = oOptions.customUnits;
        } else {
            mUnitPatterns = this.oLocaleData.getUnitFormats();
        }
        assert(mUnitPatterns, 'Unit patterns cannot be loaded');
        if (oOptions.allowedUnits) {
            var mFilteredUnits = {};
            for (var i = 0; i < oOptions.allowedUnits.length; i++) {
                var sUnitType = oOptions.allowedUnits[i];
                mFilteredUnits[sUnitType] = mUnitPatterns[sUnitType];
            }
            mUnitPatterns = mFilteredUnits;
        }
        var oPatternAndResult = parseNumberAndUnit(mUnitPatterns, sValue);
        aUnitCode = oPatternAndResult.cldrCode;
        if (aUnitCode.length === 1) {
            sMeasure = aUnitCode[0];
        } else if (aUnitCode.length === 0) {
            if ((oOptions.unitOptional || !oOptions.showMeasure) && typeof sValue === 'string') {
                oPatternAndResult.numberValue = sValue;
            } else {
                assert(aUnitCode.length === 1, 'Cannot find unit for input: \'' + sValue + '\'');
                return null;
            }
        } else {
            assert(aUnitCode.length === 1, 'Ambiguous unit [' + aUnitCode.join(', ') + '] for input: \'' + sValue + '\'');
            sMeasure = undefined;
        }
        sValue = oPatternAndResult.numberValue || sValue;
    }
    var oResult;
    if (oOptions.type === mNumberType.CURRENCY) {
        oResult = parseNumberAndCurrency({
            value: sValue,
            currencySymbols: this.mKnownCurrencySymbols,
            customCurrencyCodes: this.mKnownCurrencyCodes,
            duplicatedSymbols: this.mDuplicatedSymbols,
            customCurrenciesAvailable: !!oOptions.customCurrencies
        });
        if (!oResult) {
            return null;
        }
        sValue = oResult.numberValue;
        sMeasure = oResult.currencyCode;
        if (oOptions.customCurrencies && sMeasure === null || !oOptions.showMeasure && sMeasure) {
            return null;
        }
    }
    if (typeof sValue === 'string' || sValue instanceof String) {
        sValue = sValue.replace(/[\u202a\u200e\u202c\u202b\u200f]/g, '');
        sValue = sValue.replace(/\s/g, '');
    }
    oShort = getNumberFromShortened(sValue, this.oLocaleData, bIndianCurrency);
    if (oShort) {
        sValue = oShort.number;
    }
    if (oOptions.isInteger && !oShort) {
        oRegExp = new RegExp(sRegExpInt);
    } else {
        oRegExp = new RegExp(sRegExpFloat);
    }
    if (!oRegExp.test(sValue)) {
        return oOptions.type === mNumberType.CURRENCY || oOptions.type === mNumberType.UNIT ? null : NaN;
    }
    sValue = sValue.replace(oGroupingRegExp, '');
    sValue = sValue.replace(oOptions.plusSign, '+');
    sValue = sValue.replace(oOptions.minusSign, '-');
    sValue = sValue.replace(/^\+/, '');
    if (oShort) {
        sValue = sValue.replace(oDecimalRegExp, '.');
        sValue = NumberFormat._shiftDecimalPoint(sValue, Math.round(Math.log(oShort.factor) / Math.LN10));
    }
    if (oOptions.isInteger) {
        vResult = oOptions.parseAsString ? sValue : parseInt(sValue);
    } else {
        sValue = sValue.replace(oDecimalRegExp, '.');
        if (sValue.indexOf(sPercentSign) !== -1) {
            bPercent = true;
            sValue = sValue.replace(sPercentSign, '');
        }
        vResult = oOptions.parseAsString ? sValue : parseFloat(sValue);
        if (bPercent) {
            vResult = NumberFormat._shiftDecimalPoint(vResult, -2);
        }
    }
    if (oOptions.parseAsString) {
        vResult = NumberFormat._shiftDecimalPoint(sValue, 0);
    }
    if (oOptions.type === mNumberType.CURRENCY || oOptions.type === mNumberType.UNIT) {
        return [
            vResult,
            sMeasure
        ];
    }
    return vResult;
};
NumberFormat.prototype.convertToDecimal = function (fValue) {
    var sValue = '' + fValue, bNegative, sBase, iDecimalLength, iFractionLength, iExponent, iPos;
    if (sValue.indexOf('e') == -1 && sValue.indexOf('E') == -1) {
        return sValue;
    }
    var aResult = sValue.match(/^([+-]?)((\d+)(?:\.(\d+))?)[eE]([+-]?\d+)$/);
    bNegative = aResult[1] == '-';
    sBase = aResult[2].replace(/\./g, '');
    iDecimalLength = aResult[3] ? aResult[3].length : 0;
    iFractionLength = aResult[4] ? aResult[4].length : 0;
    iExponent = parseInt(aResult[5]);
    if (iExponent > 0) {
        if (iExponent < iFractionLength) {
            iPos = iDecimalLength + iExponent;
            sValue = sBase.substr(0, iPos) + '.' + sBase.substr(iPos);
        } else {
            sValue = sBase;
            iExponent -= iFractionLength;
            for (var i = 0; i < iExponent; i++) {
                sValue += '0';
            }
        }
    } else {
        if (-iExponent < iDecimalLength) {
            iPos = iDecimalLength + iExponent;
            sValue = sBase.substr(0, iPos) + '.' + sBase.substr(iPos);
        } else {
            sValue = sBase;
            iExponent += iDecimalLength;
            for (var i = 0; i > iExponent; i--) {
                sValue = '0' + sValue;
            }
            sValue = '0.' + sValue;
        }
    }
    if (bNegative) {
        sValue = '-' + sValue;
    }
    return sValue;
};
NumberFormat.prototype.getScale = function () {
    if (this.oFormatOptions.style !== 'short' && this.oFormatOptions.style !== 'long' || this.oFormatOptions.shortRefNumber === undefined) {
        return;
    }
    var oShortFormat = getShortenedFormat(this.oFormatOptions.shortRefNumber, this.oFormatOptions, this.oLocaleData), sScale;
    if (oShortFormat && oShortFormat.formatString) {
        sScale = oShortFormat.formatString.replace(rNumPlaceHolder, '').replace(/'.'/g, '.').trim();
        if (sScale) {
            return sScale;
        }
    }
};
NumberFormat._shiftDecimalPoint = function (vValue, iStep) {
    if (typeof iStep !== 'number') {
        return NaN;
    }
    var sMinus = '';
    var aExpParts = vValue.toString().toLowerCase().split('e');
    if (typeof vValue === 'number') {
        iStep = aExpParts[1] ? +aExpParts[1] + iStep : iStep;
        return +(aExpParts[0] + 'e' + iStep);
    } else if (typeof vValue === 'string') {
        if (parseFloat(vValue) === 0 && iStep >= 0) {
            return vValue;
        }
        var sFirstChar = aExpParts[0].charAt(0);
        sMinus = sFirstChar === '-' ? sFirstChar : '';
        if (sMinus) {
            aExpParts[0] = aExpParts[0].slice(1);
        }
        vValue = aExpParts[0];
        var iDecimalPos = vValue.indexOf('.'), iAfterMovePos, sInt, sDecimal;
        if (iDecimalPos === -1) {
            vValue = vValue + '.';
            iDecimalPos = vValue.length - 1;
        }
        if (aExpParts[1]) {
            iDecimalPos += +aExpParts[1];
        }
        iAfterMovePos = iDecimalPos + iStep;
        if (iAfterMovePos <= 0) {
            vValue = vValue.padStart(vValue.length - iAfterMovePos + 1, '0');
            iAfterMovePos = 1;
        } else if (iAfterMovePos >= vValue.length - 1) {
            vValue = vValue.padEnd(iAfterMovePos + 1, '0');
            iAfterMovePos = vValue.length - 1;
        }
        vValue = vValue.replace('.', '');
        sInt = vValue.substring(0, iAfterMovePos);
        sDecimal = vValue.substring(iAfterMovePos);
        sInt = sInt.replace(/^(-?)0+(\d)/, '$1$2');
        return sMinus + sInt + (sDecimal ? '.' + sDecimal : '');
    } else {
        return null;
    }
};
function getShortenedFormat(fValue, oOptions, oLocaleData, bIndianCurrency) {
    var oShortFormat, iKey, sKey, sCldrFormat, sStyle = oOptions.style, iPrecision = oOptions.precision !== undefined ? oOptions.precision : 2;
    if (sStyle != 'short' && sStyle != 'long') {
        return undefined;
    }
    for (var i = 0; i < 15; i++) {
        iKey = Math.pow(10, i);
        if (rounding(Math.abs(fValue) / iKey, iPrecision - 1) < 10) {
            break;
        }
    }
    sKey = iKey.toString();
    if (bIndianCurrency) {
        sCldrFormat = getIndianCurrencyFormat(sStyle, sKey, 'other', true);
    } else {
        sCldrFormat = oLocaleData.getDecimalFormat(sStyle, sKey, 'other');
    }
    if (!sCldrFormat || sCldrFormat == '0') {
        return undefined;
    } else {
        oShortFormat = {};
        oShortFormat.key = sKey;
        oShortFormat.formatString = sCldrFormat;
        var match = sCldrFormat.match(rNumPlaceHolder);
        if (match) {
            oShortFormat.valueSubString = match[0];
            var decimalSeparatorPosition = oShortFormat.valueSubString.indexOf('.');
            if (decimalSeparatorPosition == -1) {
                oShortFormat.decimals = 0;
                oShortFormat.magnitude = iKey * Math.pow(10, 1 - oShortFormat.valueSubString.length);
            } else {
                oShortFormat.decimals = oShortFormat.valueSubString.length - decimalSeparatorPosition - 1;
                oShortFormat.magnitude = iKey * Math.pow(10, 1 - decimalSeparatorPosition);
            }
        } else {
            return undefined;
        }
    }
    return oShortFormat;
}
function getNumberFromShortened(sValue, oLocaleData, bIndianCurrency) {
    var sNumber, iFactor = 1, iKey = 10, aPluralCategories = oLocaleData.getPluralCategories(), sCldrFormat, bestResult = {
            number: undefined,
            factor: iFactor
        }, fnGetFactor = function (sPlural, iKey, sStyle, bIndian) {
            if (bIndian) {
                sCldrFormat = getIndianCurrencyFormat(sStyle, iKey.toString(), sPlural, true);
            } else {
                sCldrFormat = oLocaleData.getDecimalFormat(sStyle, iKey.toString(), sPlural);
            }
            if (sCldrFormat) {
                sCldrFormat = sCldrFormat.replace(/[\s\u00a0\u200F]/g, '');
                sCldrFormat = sCldrFormat.replace(/'.'/g, '.');
                var match = sCldrFormat.match(rNumPlaceHolder);
                if (match) {
                    var sValueSubString = match[0];
                    var sUnit = sCldrFormat.replace(sValueSubString, '');
                    if (!sUnit) {
                        return;
                    }
                    var iIndex = sValue.indexOf(sUnit);
                    if (iIndex >= 0) {
                        sNumber = sValue.replace(sUnit, '');
                        sNumber = sNumber.replace(/\u200F/g, '');
                        iFactor = iKey;
                        iFactor *= Math.pow(10, 1 - sValueSubString.length);
                        if (bestResult.number === undefined || sNumber.length < bestResult.number.length) {
                            bestResult.number = sNumber;
                            bestResult.factor = iFactor;
                        }
                    }
                }
            }
        };
    [
        'long',
        'short'
    ].forEach(function (sStyle) {
        iKey = 10;
        while (iKey < 1000000000000000) {
            for (var i = 0; i < aPluralCategories.length; i++) {
                var sPluralCategory = aPluralCategories[i];
                fnGetFactor(sPluralCategory, iKey, sStyle);
            }
            iKey = iKey * 10;
        }
    });
    if (bIndianCurrency && !sNumber) {
        iKey = 10;
        while (iKey < 1000000000000000) {
            for (var i = 0; i < aPluralCategories.length; i++) {
                var sPluralCategory = aPluralCategories[i];
                fnGetFactor(sPluralCategory, iKey, 'short', true);
            }
            iKey = iKey * 10;
        }
    }
    if (!sNumber) {
        return;
    }
    return bestResult;
}
function getIndianCurrencyFormat(sStyle, sKey, sPlural, bDecimal) {
    var sFormat, oFormats = {
            'short': {
                '1000-one': '\xA40000',
                '1000-other': '\xA40000',
                '10000-one': '\xA400000',
                '10000-other': '\xA400000',
                '100000-one': '\xA40 Lk',
                '100000-other': '\xA40 Lk',
                '1000000-one': '\xA400 Lk',
                '1000000-other': '\xA400 Lk',
                '10000000-one': '\xA40 Cr',
                '10000000-other': '\xA40 Cr',
                '100000000-one': '\xA400 Cr',
                '100000000-other': '\xA400 Cr',
                '1000000000-one': '\xA4000 Cr',
                '1000000000-other': '\xA4000 Cr',
                '10000000000-one': '\xA40000 Cr',
                '10000000000-other': '\xA40000 Cr',
                '100000000000-one': '\xA400000 Cr',
                '100000000000-other': '\xA400000 Cr',
                '1000000000000-one': '\xA40 Lk Cr',
                '1000000000000-other': '\xA40 Lk Cr',
                '10000000000000-one': '\xA400 Lk Cr',
                '10000000000000-other': '\xA400 Lk Cr',
                '100000000000000-one': '\xA40 Cr Cr',
                '100000000000000-other': '\xA40 Cr Cr'
            }
        };
    sStyle = 'short';
    if (sPlural !== 'one') {
        sPlural = 'other';
    }
    sFormat = oFormats[sStyle][sKey + '-' + sPlural];
    if (sFormat && bDecimal) {
        sFormat = sFormat.substr(1);
    }
    return sFormat;
}
function rounding(fValue, iMaxFractionDigits, sRoundingMode) {
    if (typeof fValue !== 'number') {
        return NaN;
    }
    sRoundingMode = sRoundingMode || NumberFormat.RoundingMode.HALF_AWAY_FROM_ZERO;
    iMaxFractionDigits = parseInt(iMaxFractionDigits);
    if (typeof sRoundingMode === 'function') {
        fValue = sRoundingMode(fValue, iMaxFractionDigits);
    } else {
        if (!iMaxFractionDigits) {
            return mRoundingFunction[sRoundingMode](fValue);
        }
        fValue = NumberFormat._shiftDecimalPoint(mRoundingFunction[sRoundingMode](NumberFormat._shiftDecimalPoint(fValue, iMaxFractionDigits)), -iMaxFractionDigits);
    }
    return fValue;
}
function quote(sRegex) {
    return sRegex.replace(/([.?*+^$[\]\\(){}|-])/g, '\\$1');
}
function getDecimals(fValue, iPrecision) {
    var iIntegerDigits = Math.floor(Math.log(Math.abs(fValue)) / Math.LN10);
    return Math.max(0, iPrecision - iIntegerDigits - 1);
}
function parseNumberAndUnit(mUnitPatterns, sValue) {
    var oBestMatch = {
        numberValue: undefined,
        cldrCode: []
    };
    if (typeof sValue !== 'string') {
        return oBestMatch;
    }
    var iBestLength = Number.POSITIVE_INFINITY;
    var sUnitCode, sKey;
    for (sUnitCode in mUnitPatterns) {
        for (sKey in mUnitPatterns[sUnitCode]) {
            if (sKey.indexOf('unitPattern') === 0) {
                var sUnitPattern = mUnitPatterns[sUnitCode][sKey];
                var iNumberPatternIndex = sUnitPattern.indexOf('{0}');
                var bContainsExpression = iNumberPatternIndex > -1;
                if (bContainsExpression) {
                    var sPrefix = sUnitPattern.substring(0, iNumberPatternIndex);
                    var sPostfix = sUnitPattern.substring(iNumberPatternIndex + '{0}'.length);
                    var bMatches = sValue.startsWith(sPrefix) && sValue.endsWith(sPostfix);
                    var match = bMatches && sValue.substring(sPrefix.length, sValue.length - sPostfix.length);
                    if (match) {
                        if (match.length < iBestLength) {
                            iBestLength = match.length;
                            oBestMatch.numberValue = match;
                            oBestMatch.cldrCode = [sUnitCode];
                        } else if (match.length === iBestLength && oBestMatch.cldrCode.indexOf(sUnitCode) === -1) {
                            oBestMatch.cldrCode.push(sUnitCode);
                        }
                    }
                } else if (sUnitPattern === sValue) {
                    oBestMatch.cldrCode = [sUnitCode];
                    var sNumber;
                    if (sKey.endsWith('-zero')) {
                        sNumber = '0';
                    } else if (sKey.endsWith('-one')) {
                        sNumber = '1';
                    } else if (sKey.endsWith('-two')) {
                        sNumber = '2';
                    }
                    oBestMatch.numberValue = sNumber;
                    return oBestMatch;
                }
            }
        }
    }
    return oBestMatch;
}
function findLongestMatch(sValue, mCollection) {
    var sSymbol = '', sCode, sCurSymbol;
    for (var sCurCode in mCollection) {
        sCurSymbol = mCollection[sCurCode];
        if (sValue.indexOf(sCurSymbol) >= 0 && sSymbol.length < sCurSymbol.length) {
            sSymbol = sCurSymbol;
            sCode = sCurCode;
        }
    }
    return {
        symbol: sSymbol,
        code: sCode
    };
}
function parseNumberAndCurrency(oConfig) {
    var sValue = oConfig.value;
    var oMatch = findLongestMatch(sValue, oConfig.currencySymbols);
    if (!oMatch.code) {
        oMatch = findLongestMatch(sValue, oConfig.customCurrencyCodes);
        if (!oMatch.code && !oConfig.customCurrenciesAvailable) {
            var aIsoMatches = sValue.match(/(^[A-Z]{3}|[A-Z]{3}$)/);
            oMatch.code = aIsoMatches && aIsoMatches[0];
        }
    }
    if (oMatch.code) {
        var iLastCodeIndex = oMatch.code.length - 1;
        var sLastCodeChar = oMatch.code.charAt(iLastCodeIndex);
        var iDelimiterPos;
        var rValidDelimiters = /[\-\s]+/;
        if (/\d$/.test(sLastCodeChar)) {
            if (sValue.startsWith(oMatch.code)) {
                iDelimiterPos = iLastCodeIndex + 1;
                if (!rValidDelimiters.test(sValue.charAt(iDelimiterPos))) {
                    return undefined;
                }
            }
        } else if (/^\d/.test(oMatch.code)) {
            if (sValue.endsWith(oMatch.code)) {
                iDelimiterPos = sValue.indexOf(oMatch.code) - 1;
                if (!rValidDelimiters.test(sValue.charAt(iDelimiterPos))) {
                    return undefined;
                }
            }
        }
        sValue = sValue.replace(oMatch.symbol || oMatch.code, '');
    }
    if (oConfig.duplicatedSymbols && oConfig.duplicatedSymbols[oMatch.symbol]) {
        oMatch.code = undefined;
        Log.error('The parsed currency symbol \'' + oMatch.symbol + '\' is defined multiple ' + 'times in custom currencies.Therefore the result is not distinct.');
    }
    return {
        numberValue: sValue,
        currencyCode: oMatch.code || undefined
    };
}
export default NumberFormat;