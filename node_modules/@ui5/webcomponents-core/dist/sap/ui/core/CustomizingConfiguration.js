import jQuery from '../thirdparty/jquery.js';
import Core from './Core.js';
import Component from './Component.js';
import Log from '../../base/Log.js';
import ObjectPath from '../../base/util/ObjectPath.js';
var CONFIG_VIEW_REPLACEMENTS = 'sap.ui.viewReplacements', CONFIG_VIEW_EXTENSIONS = 'sap.ui.viewExtensions', CONFIG_VIEW_MODIFICATIONS = 'sap.ui.viewModifications', CONFIG_CONTROLLER_EXTENSIONS = 'sap.ui.controllerExtensions', CONFIG_CONTROLLER_REPLACEMENTS = 'sap.ui.controllerReplacements';
var mComponentConfigs = {};
function findConfig(sType, vObject, fnCheck) {
    var sComponentId = vObject && typeof vObject === 'string' ? vObject : vObject && Component.getOwnerIdFor(vObject);
    if (sComponentId) {
        var oComponent = Component.get(sComponentId);
        var sComponentName = oComponent && oComponent.getMetadata().getComponentName();
        var oConfig = mComponentConfigs[sComponentName + '::' + sComponentId];
        if (oConfig && oConfig[sType] && fnCheck(oConfig[sType])) {
            return false;
        } else {
            oConfig = mComponentConfigs[sComponentName];
            if (oConfig && oConfig[sType] && fnCheck(oConfig[sType])) {
                return false;
            }
        }
    } else {
        jQuery.each(mComponentConfigs, function (sComponentName, oConfig) {
            if (oConfig && oConfig[sType] && fnCheck(oConfig[sType])) {
                return false;
            }
        });
    }
}
var CustomizingConfiguration = {
    log: function () {
        if (window.console) {
            window.console.log(mComponentConfigs);
        }
    },
    activateForComponent: function (sComponentName) {
        Log.info('CustomizingConfiguration: activateForComponent(\'' + sComponentName + '\')');
        var sFullComponentName = sComponentName + '.Component';
        sap.ui.requireSync(sFullComponentName.replace(/\./g, '/'));
        var oCustomizingConfig = ObjectPath.get(sFullComponentName).getMetadata().getCustomizing();
        mComponentConfigs[sComponentName] = oCustomizingConfig;
        Log.debug('CustomizingConfiguration: customizing configuration for component \'' + sComponentName + '\' loaded: ' + JSON.stringify(oCustomizingConfig));
    },
    deactivateForComponent: function (sComponentName) {
        if (mComponentConfigs[sComponentName]) {
            Log.info('CustomizingConfiguration: deactivateForComponent(\'' + sComponentName + '\')');
            delete mComponentConfigs[sComponentName];
        }
    },
    activateForComponentInstance: function (oComponent) {
        Log.info('CustomizingConfiguration: activateForComponentInstance(\'' + oComponent.getId() + '\')');
        var sComponentName = oComponent.getMetadata().getComponentName(), sKey = sComponentName + '::' + oComponent.getId(), oCustomizingConfig = oComponent.getManifest()['sap.ui5'] && oComponent.getManifest()['sap.ui5']['extends'] && oComponent.getManifest()['sap.ui5']['extends']['extensions'];
        mComponentConfigs[sKey] = oCustomizingConfig;
        Log.debug('CustomizingConfiguration: customizing configuration for component \'' + sKey + '\' loaded: ' + JSON.stringify(oCustomizingConfig));
    },
    deactivateForComponentInstance: function (oComponent) {
        var sComponentName = oComponent.getMetadata().getComponentName(), sKey = sComponentName + '::' + oComponent.getId();
        if (mComponentConfigs[sKey]) {
            Log.info('CustomizingConfiguration: deactivateForComponent(\'' + sKey + '\')');
            delete mComponentConfigs[sKey];
        }
    },
    getViewReplacement: function (sViewName, vObject) {
        var oResultConfig;
        findConfig(CONFIG_VIEW_REPLACEMENTS, vObject, function (oConfig) {
            oResultConfig = oConfig[sViewName];
            return !!oResultConfig;
        });
        return oResultConfig;
    },
    getViewExtension: function (sViewName, sExtensionPointName, vObject) {
        var oResultConfig;
        findConfig(CONFIG_VIEW_EXTENSIONS, vObject, function (oConfig) {
            oResultConfig = oConfig[sViewName] && oConfig[sViewName][sExtensionPointName];
            return !!oResultConfig;
        });
        return oResultConfig;
    },
    getControllerExtension: function (sControllerName, vObject) {
        var oResultConfig;
        findConfig(CONFIG_CONTROLLER_EXTENSIONS, vObject, function (oConfig) {
            oResultConfig = oConfig[sControllerName];
            return !!oResultConfig;
        });
        return oResultConfig;
    },
    getControllerReplacement: function (sControllerName, vObject) {
        var oResultConfig;
        findConfig(CONFIG_CONTROLLER_REPLACEMENTS, vObject, function (oConfig) {
            oResultConfig = oConfig[sControllerName];
            return !!oResultConfig;
        });
        return oResultConfig;
    },
    getCustomProperties: function (sViewName, sControlId, vObject) {
        var mSettings;
        findConfig(CONFIG_VIEW_MODIFICATIONS, vObject, function (oConfig) {
            var oSettings = oConfig[sViewName] && oConfig[sViewName][sControlId];
            var oUsedSettings = {};
            var bValidConfigFound = false;
            if (oSettings) {
                jQuery.each(oSettings, function (sName, vValue) {
                    if (sName === 'visible') {
                        bValidConfigFound = true;
                        oUsedSettings[sName] = vValue;
                        Log.info('Customizing: custom value for property \'' + sName + '\' of control \'' + sControlId + '\' in View \'' + sViewName + '\' applied: ' + vValue);
                    } else {
                        Log.warning('Customizing: custom value for property \'' + sName + '\' of control \'' + sControlId + '\' in View \'' + sViewName + '\' ignored: only the \'visible\' property can be customized.');
                    }
                });
                if (bValidConfigFound) {
                    mSettings = mSettings || {};
                    jQuery.extend(mSettings, oUsedSettings);
                }
            }
        });
        return mSettings;
    },
    hasCustomProperties: function (sViewName, vObject) {
        var mSettings = {};
        findConfig(CONFIG_VIEW_MODIFICATIONS, vObject, function (oConfig) {
            if (!!oConfig[sViewName]) {
                mSettings = oConfig[sViewName];
            }
        });
        return !jQuery.isEmptyObject(mSettings);
    }
};
if (sap.ui.getWCCore().getConfiguration().getDisableCustomizing()) {
    Log.info('CustomizingConfiguration: disabling Customizing now');
    jQuery.each(CustomizingConfiguration, function (sName, vAny) {
        if (typeof vAny === 'function') {
            CustomizingConfiguration[sName] = function () {
            };
        }
    });
}
export default CustomizingConfiguration;