import Device from '../../Device.js';
import BaseObject from '../../base/Object.js';
import ResizeHandler from '../ResizeHandler.js';
import Interaction from '../../performance/trace/Interaction.js';
import jQuery from '../../thirdparty/jquery.js';
import KeyCodes from '../../events/KeyCodes.js';
var ScrollEnablement = BaseObject.extend('sap.ui.core.delegate.ScrollEnablement', {
    constructor: function (oControl, sScrollContentDom, oConfig) {
        BaseObject.apply(this);
        this._oControl = oControl;
        this._oControl.addDelegate(this);
        this._sContentId = sScrollContentDom;
        this._sContainerId = oConfig.scrollContainerId;
        this._bHorizontal = !!oConfig.horizontal;
        this._bVertical = !!oConfig.vertical;
        this._scrollX = 0;
        this._scrollY = 0;
        this._scrollCoef = 0.9;
        initDelegateMembers(this);
        if (this._init) {
            this._init.apply(this, arguments);
        }
    },
    setHorizontal: function (bHorizontal) {
        this._bHorizontal = !!bHorizontal;
        this._setOverflow && this._setOverflow();
    },
    setVertical: function (bVertical) {
        this._bVertical = !!bVertical;
        this._setOverflow && this._setOverflow();
    },
    getHorizontal: function () {
        return this._bHorizontal;
    },
    getVertical: function () {
        return this._bVertical;
    },
    setBounce: function (bBounce) {
    },
    setPullDown: function (oControl) {
        this._oPullDown = oControl;
        return this;
    },
    setGrowingList: function (fnScrollLoadCallback, sScrollLoadDirection) {
        this._fnScrollLoadCallback = fnScrollLoadCallback;
        this._sScrollLoadDirection = sScrollLoadDirection;
        return this;
    },
    setIconTabBar: function (oIconTabBar, fnScrollEndCallback, fnScrollStartCallback) {
        this._oIconTabBar = oIconTabBar;
        this._fnScrollEndCallback = jQuery.proxy(fnScrollEndCallback, oIconTabBar);
        this._fnScrollStartCallback = jQuery.proxy(fnScrollStartCallback, oIconTabBar);
        return this;
    },
    scrollTo: function (x, y, time) {
        this._scrollX = x;
        this._scrollY = y;
        this._scrollTo(x, y, time);
        return this;
    },
    getChildPosition: function (vElement) {
        var $Element = vElement instanceof jQuery ? vElement : jQuery(vElement), oElementPosition = $Element.position(), $OffsetParent = $Element.offsetParent(), oAddUpPosition;
        while (!$OffsetParent.is(this._$Container)) {
            oAddUpPosition = $OffsetParent.position();
            oElementPosition.top += oAddUpPosition.top;
            oElementPosition.left += oAddUpPosition.left;
            $OffsetParent = $OffsetParent.offsetParent();
        }
        return oElementPosition;
    },
    scrollToElement: function (oElement, iTime, aOffset) {
        aOffset = aOffset || [
            0,
            0
        ];
        if (!this._$Container[0].contains(oElement) || oElement.style.display === 'none' || oElement.offsetParent.nodeName.toUpperCase() === 'HTML') {
            return this;
        }
        var $Element = jQuery(oElement), oScrollPosition = this.getChildPosition($Element), iLeftScroll = this.getScrollLeft() + oScrollPosition.left + aOffset[0], iTopScroll = this.getScrollTop() + oScrollPosition.top + aOffset[1];
        if (this._bFlipX) {
            iLeftScroll = this.getScrollLeft() - (oScrollPosition.left - this._$Container.width()) - $Element.width();
        }
        this._scrollTo(iLeftScroll, iTopScroll, iTime);
        return this;
    },
    destroy: function () {
        if (this._exit) {
            this._exit();
        }
        if (this._oControl) {
            this._oControl.removeDelegate(this);
            this._oControl = undefined;
        }
    },
    refresh: function () {
        if (this._refresh) {
            this._refresh();
        }
    },
    _useDefaultScroll: function (target) {
        return target.isContentEditable;
    },
    onkeydown: function (oEvent) {
        if (this._useDefaultScroll(oEvent.target)) {
            return;
        }
        var container = this._$Container[0];
        if (oEvent.altKey && this.getHorizontal()) {
            switch (oEvent.keyCode) {
            case KeyCodes.PAGE_UP:
                this._customScrollTo(this._scrollX - container.clientWidth, this._scrollY, oEvent);
                break;
            case KeyCodes.PAGE_DOWN:
                this._customScrollTo(this._scrollX + container.clientWidth, this._scrollY, oEvent);
                break;
            }
        }
        if (oEvent.ctrlKey) {
            switch (oEvent.keyCode) {
            case KeyCodes.ARROW_UP:
                if (this.getVertical()) {
                    this._customScrollTo(this._scrollX, this._scrollY - container.clientHeight * this._scrollCoef, oEvent);
                }
                break;
            case KeyCodes.ARROW_DOWN:
                if (this.getVertical()) {
                    this._customScrollTo(this._scrollX, this._scrollY + container.clientHeight * this._scrollCoef, oEvent);
                }
                break;
            case KeyCodes.ARROW_LEFT:
                if (this.getHorizontal()) {
                    this._customScrollTo(this._scrollX - container.clientWidth, this._scrollY, oEvent);
                }
                break;
            case KeyCodes.ARROW_RIGHT:
                if (this.getHorizontal()) {
                    this._customScrollTo(this._scrollX + container.clientWidth, this._scrollY, oEvent);
                }
                break;
            case KeyCodes.HOME:
                if (this.getHorizontal()) {
                    this._customScrollTo(0, this._scrollY, oEvent);
                }
                if (this.getVertical()) {
                    this._customScrollTo(this._scrollX, 0, oEvent);
                }
                break;
            case KeyCodes.END:
                var left = container.scrollWidth - container.clientWidth;
                var top = container.scrollHeight - container.clientHeight;
                if (!this.getHorizontal()) {
                    top = this._scrollY;
                }
                if (!this.getVertical()) {
                    left = this._scrollX;
                }
                this._customScrollTo(left, top, oEvent);
                break;
            }
        }
    },
    _customScrollTo: function (left, top, oEvent) {
        var sNodeName = oEvent.target.nodeName;
        if (sNodeName != 'INPUT' && sNodeName != 'TEXTAREA') {
            oEvent.preventDefault();
            oEvent.setMarked();
            this._scrollTo(left, top);
        }
    }
});
var oNativeScrollDelegate = {
    getScrollTop: function () {
        return this._scrollY || 0;
    },
    getScrollLeft: function () {
        return this._scrollX || 0;
    },
    getScrollHeight: function () {
        var $Container = this._$Container;
        return $Container && $Container[0] ? $Container[0].scrollHeight : 0;
    },
    getMaxScrollTop: function () {
        var $Container = this._$Container;
        return $Container && $Container[0] ? $Container[0].scrollHeight - $Container[0].clientHeight : -1;
    },
    _cleanup: function () {
        if (this._sResizeListenerId) {
            ResizeHandler.deregister(this._sResizeListenerId);
            this._sResizeListenerId = null;
        }
    },
    _setOverflow: function () {
        var $Container = this._$Container;
        if (!$Container || !$Container[0]) {
            return;
        }
        if (Device.os.ios) {
            $Container.css('overflow-x', this._bHorizontal && !this._bDragScroll ? 'scroll' : 'hidden').css('overflow-y', this._bVertical && !this._bDragScroll ? 'scroll' : 'hidden').css('-webkit-overflow-scrolling', 'touch');
        } else {
            $Container.css('overflow-x', this._bHorizontal && !this._bDragScroll ? 'auto' : 'hidden').css('overflow-y', this._bVertical && !this._bDragScroll ? 'auto' : 'hidden');
        }
    },
    _refresh: function () {
        var $Container = this._$Container;
        if (!($Container && $Container.length)) {
            return;
        }
        if (this._oPullDown && this._oPullDown._bTouchMode) {
            var domRef = this._oPullDown.getDomRef();
            if (domRef) {
                domRef.style.marginTop = this._oPullDown._iState == 2 ? '' : '-' + domRef.offsetHeight + 'px';
            }
        }
        if ($Container.scrollTop() != this._scrollY) {
            $Container.scrollTop(this._scrollY);
        }
        if (!(this._oPullDown && this._oPullDown._bTouchMode) && !this._fnScrollLoadCallback && !Device.browser.msie) {
            ResizeHandler.deregister(this._sResizeListenerId);
            this._sResizeListenerId = null;
        }
    },
    _onScroll: function () {
        var $Container = this._$Container, fScrollTop = $Container.scrollTop(), fVerticalMove = fScrollTop - this._scrollY;
        Interaction.notifyStepStart(this._oControl);
        this._scrollX = $Container.scrollLeft();
        this._scrollY = fScrollTop;
        if (this._fnScrollLoadCallback) {
            if (this._sScrollLoadDirection == 'Upwards') {
                if (fVerticalMove < 0 && fScrollTop < 10) {
                    this._fnScrollLoadCallback();
                }
            } else if (fVerticalMove >= 0 && $Container[0].scrollHeight - fScrollTop - $Container[0].clientHeight < 100) {
                this._fnScrollLoadCallback();
            }
        }
        if (this._oIconTabBar && this._fnScrollEndCallback) {
            this._fnScrollEndCallback();
        }
    },
    _onStart: function (oEvent) {
        var container = this._$Container[0];
        if (!container) {
            return;
        }
        this._bDoDrag = this._bDragScroll;
        var point = oEvent.touches ? oEvent.touches[0] : oEvent;
        this._iX = point.pageX;
        this._iY = point.pageY;
        this._bPullDown = false;
        this._iDirection = '';
    },
    _onTouchMove: function (oEvent) {
        var container = this._$Container[0];
        var point = oEvent.touches ? oEvent.touches[0] : oEvent;
        var dx = point.pageX - this._iX;
        var dy = point.pageY - this._iY;
        if (this._iDirection == '') {
            if (dx != 0 || dy != 0) {
                this._iDirection = Math.abs(dy) > Math.abs(dx) ? 'v' : 'h';
            }
            if (this._oPullDown && this._oPullDown._bTouchMode && this._iDirection == 'v' && container.scrollTop <= 1) {
                if (dy > Math.abs(dx)) {
                    this._bPullDown = true;
                }
            }
        }
        if (this._bPullDown === true) {
            var pd = this._oPullDown.getDomRef();
            var top = oEvent.touches[0].pageY - this._iY - pd.offsetHeight;
            if (top > 20) {
                top = 20;
            }
            pd.style.marginTop = top + 'px';
            this._oPullDown.doPull(top);
            oEvent.preventDefault();
            this._bDoDrag = false;
        }
        if (this._bDoDrag) {
            var scrollLeft = container.scrollLeft, scrollTop = container.scrollTop;
            if (this._bHorizontal) {
                if (this._bFlipX) {
                    container.scrollLeft = scrollLeft - this._iX + point.pageX;
                } else {
                    container.scrollLeft = scrollLeft + this._iX - point.pageX;
                }
            }
            if (this._bVertical) {
                container.scrollTop = scrollTop + this._iY - point.pageY;
            }
            if (container.scrollLeft != scrollLeft || container.scrollTop != scrollTop) {
                oEvent.setMarked && oEvent.setMarked();
                oEvent.preventDefault();
            }
            this._iX = point.pageX;
            this._iY = point.pageY;
            return;
        }
    },
    _onEnd: function (oEvent) {
        Interaction.notifyEventStart(oEvent);
        if (this._oPullDown && this._oPullDown._bTouchMode) {
            this._oPullDown.doScrollEnd();
            this._refresh();
        }
        if (this._bDragScroll && this._iDirection) {
            oEvent.setMarked && oEvent.setMarked();
        }
    },
    _onMouseDown: function (oEvent) {
        if (this._bDragScroll && oEvent.button == 0) {
            this._bScrolling = true;
            this._onStart(oEvent);
        }
    },
    _onMouseMove: function (oEvent) {
        if (this._bScrolling) {
            var e = oEvent.originalEvent || oEvent;
            var button = e.buttons || e.which;
            if (button == 1 || oEvent.pressure) {
                var container = this._$Container[0];
                if (this._bHorizontal) {
                    if (this._bFlipX) {
                        container.scrollLeft = container.scrollLeft - this._iX + oEvent.pageX;
                    } else {
                        container.scrollLeft = container.scrollLeft + this._iX - oEvent.pageX;
                    }
                }
                if (this._bVertical) {
                    container.scrollTop = container.scrollTop + this._iY - oEvent.pageY;
                }
                this._iX = oEvent.pageX;
                this._iY = oEvent.pageY;
            }
        }
    },
    _onMouseUp: function () {
        if (this._bScrolling) {
            this._bScrolling = false;
            this._onEnd();
        }
    },
    onBeforeRendering: function () {
        if (this._sResizeListenerId) {
            ResizeHandler.deregister(this._sResizeListenerId);
            this._sResizeListenerId = null;
        }
        var $Container = this._$Container;
        if ($Container) {
            if ($Container.height() > 0) {
                this._scrollX = $Container.scrollLeft();
                this._scrollY = $Container.scrollTop();
            }
            $Container.off();
        }
    },
    onAfterRendering: function () {
        var $Container = this._$Container = this._sContainerId ? jQuery(document.getElementById(this._sContainerId)) : jQuery(document.getElementById(this._sContentId)).parent();
        var _fnRefresh = jQuery.proxy(this._refresh, this);
        var bElementVisible = $Container.is(':visible');
        this._setOverflow();
        if (this._scrollX !== 0 || this._scrollY !== 0) {
            this._scrollTo(this._scrollX, this._scrollY);
        }
        this._refresh();
        if (!bElementVisible || Device.browser.msie || this._oPullDown || this._fnScrollLoadCallback) {
            this._sResizeListenerId = ResizeHandler.register($Container[0], _fnRefresh);
        }
        $Container.on('scroll', this._onScroll.bind(this));
        var oContainerRef = $Container[0];
        function addEventListeners(sEvents, fListener) {
            sEvents.split(' ').forEach(function (sEvent) {
                oContainerRef && oContainerRef.addEventListener(sEvent, fListener);
            });
        }
        function onPointerDown(oEvent) {
            return oEvent.pointerType == 'touch' ? this._onStart(oEvent) : this._onMouseDown(oEvent);
        }
        function onPointerMove(oEvent) {
            return oEvent.pointerType == 'touch' ? this._onTouchMove(oEvent) : this._onMouseMove(oEvent);
        }
        function onPointerUp(oEvent) {
            return oEvent.pointerType == 'touch' ? this._onEnd(oEvent) : this._onMouseUp(oEvent);
        }
        if (Device.support.pointer && Device.system.desktop) {
            if (this._bDragScroll) {
                addEventListeners('pointerdown', onPointerDown.bind(this));
                addEventListeners('pointermove', onPointerMove.bind(this));
                addEventListeners('pointerup pointercancel pointerleave', onPointerUp.bind(this));
            }
        } else if (Device.support.touch) {
            if (this._bDragScroll || this._oPullDown && this._oPullDown._bTouchMode) {
                $Container.on('touchcancel touchend', this._onEnd.bind(this)).on('touchstart', this._onStart.bind(this)).on('touchmove', this._onTouchMove.bind(this));
            }
        } else if (this._bDragScroll) {
            $Container.on('mouseup mouseleave', this._onMouseUp.bind(this)).mousedown(this._onMouseDown.bind(this)).mousemove(this._onMouseMove.bind(this));
        }
    },
    _readActualScrollPosition: function () {
        if (this._$Container.width() > 0) {
            this._scrollX = this._$Container.scrollLeft();
        }
        if (this._$Container.height() > 0) {
            this._scrollY = this._$Container.scrollTop();
        }
    },
    _scrollTo: function (x, y, time) {
        if (this._$Container.length > 0) {
            if (time > 0) {
                this._$Container.finish().animate({
                    scrollTop: y,
                    scrollLeft: x
                }, time, jQuery.proxy(this._readActualScrollPosition, this));
            } else {
                this._$Container.scrollTop(y);
                this._$Container.scrollLeft(x);
                this._readActualScrollPosition();
            }
        }
    }
};
function initDelegateMembers(oScrollerInstance) {
    var oDelegateMembers = {
        _init: function (oControl, sScrollContentDom, oConfig) {
            if (jQuery.event && jQuery.event.special && jQuery.event.special.swipe && jQuery.event.special.swipe.scrollSupressionThreshold < 120) {
                jQuery.event.special.swipe.scrollSupressionThreshold = 120;
            }
            jQuery.extend(this, oNativeScrollDelegate);
            if (oConfig.nonTouchScrolling === true) {
                this._bDragScroll = true;
            }
            if (sap.ui.getWCCore().getConfiguration().getRTL()) {
                this._scrollX = 9999;
                if (Device.browser.msie || Device.browser.edge) {
                    this._bFlipX = true;
                }
            }
        },
        _exit: function () {
            if (this._cleanup) {
                this._cleanup();
            }
        }
    };
    jQuery.extend(oScrollerInstance, oDelegateMembers);
}
export default ScrollEnablement;