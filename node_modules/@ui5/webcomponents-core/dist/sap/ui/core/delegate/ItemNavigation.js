import EventProvider from '../../base/EventProvider.js';
import assert from '../../../base/assert.js';
import Log from '../../../base/Log.js';
import containsOrEquals from '../../dom/containsOrEquals.js';
import KeyCodes from '../../events/KeyCodes.js';
import jQuery from '../../thirdparty/jquery.js';
import '../../dom/jquery/Selectors.js';
var ItemNavigation = EventProvider.extend('sap.ui.core.delegate.ItemNavigation', {
    constructor: function (oDomRef, aItemDomRefs, bNotInTabChain) {
        EventProvider.apply(this);
        this.oDomRef = null;
        if (oDomRef) {
            this.setRootDomRef(oDomRef);
        }
        this.aItemDomRefs = [];
        if (aItemDomRefs) {
            this.setItemDomRefs(aItemDomRefs);
        }
        this.iTabIndex = -1;
        this.iActiveTabIndex = !!bNotInTabChain ? -1 : 0;
        this.iFocusedIndex = -1;
        this.iSelectedIndex = -1;
        this.bCycling = true;
        this.bTableMode = false;
        this.iPageSize = -1;
        this._bMouseDownHappened = false;
        this.oDisabledModifiers = {
            sapend: [
                'alt',
                'shift'
            ],
            saphome: [
                'alt',
                'shift'
            ]
        };
    }
});
ItemNavigation.Events = {
    BeforeFocus: 'BeforeFocus',
    AfterFocus: 'AfterFocus',
    BorderReached: 'BorderReached',
    FocusAgain: 'FocusAgain',
    FocusLeave: 'FocusLeave'
};
ItemNavigation.prototype.setDisabledModifiers = function (oDisabledModifiers) {
    this.oDisabledModifiers = oDisabledModifiers;
    return this;
};
ItemNavigation.prototype.getDisabledModifiers = function (oDisabledModifiers) {
    return this.oDisabledModifiers;
};
ItemNavigation.prototype.hasDisabledModifier = function (oEvent) {
    var aDisabledKeys = this.oDisabledModifiers[oEvent.type.replace('modifiers', '')];
    if (Array.isArray(aDisabledKeys)) {
        for (var i = 0; i < aDisabledKeys.length; i++) {
            if (oEvent[aDisabledKeys[i] + 'Key']) {
                return true;
            }
        }
    }
    return false;
};
ItemNavigation.prototype.setRootDomRef = function (oDomRef) {
    this.oDomRef = oDomRef;
    if (!jQuery(this.oDomRef).data('sap.INItem')) {
        if (this.iFocusedIndex >= 0) {
            jQuery(this.oDomRef).attr('tabIndex', this.iTabIndex);
        } else {
            jQuery(this.oDomRef).attr('tabIndex', this.iActiveTabIndex);
        }
    }
    jQuery(this.oDomRef).data('sap.INRoot', this);
    return this;
};
ItemNavigation.prototype.getRootDomRef = function () {
    return this.oDomRef;
};
ItemNavigation.prototype.getItemDomRefs = function () {
    return this.aItemDomRefs;
};
ItemNavigation.prototype.setItemDomRefs = function (aItemDomRefs) {
    assert(typeof aItemDomRefs === 'object' && typeof aItemDomRefs.length === 'number', 'aItemDomRefs must be an array of DOM elements');
    this.aItemDomRefs = aItemDomRefs;
    if (this.iFocusedIndex > aItemDomRefs.length - 1) {
        this.iFocusedIndex = aItemDomRefs.length - 1;
    }
    for (var i = 0; i < this.aItemDomRefs.length; i++) {
        if (this.aItemDomRefs[i]) {
            var $Item = jQuery(this.aItemDomRefs[i]);
            if (i == this.iFocusedIndex && !$Item.data('sap.INRoot')) {
                $Item.attr('tabIndex', this.iActiveTabIndex);
            } else if ($Item.attr('tabindex') == '0') {
                $Item.attr('tabIndex', -1);
            }
            $Item.data('sap.INItem', true);
            $Item.data('sap.InNavArea', true);
            if ($Item.data('sap.INRoot') && i != this.iFocusedIndex) {
                $Item.data('sap.INRoot').setNestedItemsTabindex();
            }
        }
    }
    return this;
};
ItemNavigation.prototype.setItemsTabindex = function () {
    for (var i = 0; i < this.aItemDomRefs.length; i++) {
        if (this.aItemDomRefs[i]) {
            var $Item = jQuery(this.aItemDomRefs[i]);
            if ($Item.is(':sapFocusable')) {
                if (i == this.iFocusedIndex && !$Item.data('sap.INRoot')) {
                    $Item.attr('tabIndex', this.iActiveTabIndex);
                } else {
                    $Item.attr('tabIndex', -1);
                }
            }
        }
    }
    return this;
};
ItemNavigation.prototype.setNestedItemsTabindex = function () {
    if (jQuery(this.oDomRef).data('sap.INItem')) {
        for (var i = 0; i < this.aItemDomRefs.length; i++) {
            if (this.aItemDomRefs[i] && jQuery(this.aItemDomRefs[i]).attr('tabindex') == '0') {
                jQuery(this.aItemDomRefs[i]).attr('tabIndex', -1);
            }
        }
    }
    return this;
};
ItemNavigation.prototype.destroy = function () {
    if (this.oDomRef) {
        jQuery(this.oDomRef).removeData('sap.INRoot');
        this.oDomRef = null;
    }
    if (this.aItemDomRefs) {
        for (var i = 0; i < this.aItemDomRefs.length; i++) {
            if (this.aItemDomRefs[i]) {
                jQuery(this.aItemDomRefs[i]).removeData('sap.INItem');
                jQuery(this.aItemDomRefs[i]).removeData('sap.InNavArea');
            }
        }
        this.aItemDomRefs = null;
    }
    this._bItemTabIndex = undefined;
    this.iFocusedIndex = -1;
};
ItemNavigation.prototype.setCycling = function (bCycling) {
    this.bCycling = bCycling;
    return this;
};
ItemNavigation.prototype.setTableMode = function (bTableMode, bTableList) {
    this.bTableMode = bTableMode;
    if (this.oConfiguration === undefined) {
        this.oConfiguration = sap.ui.getWCCore().getConfiguration();
    }
    this.bTableList = bTableMode ? bTableList : false;
    return this;
};
ItemNavigation.prototype.setPageSize = function (iPageSize) {
    this.iPageSize = iPageSize;
    return this;
};
ItemNavigation.prototype.setSelectedIndex = function (iIndex) {
    this.iSelectedIndex = iIndex;
    return this;
};
ItemNavigation.prototype.setColumns = function (iColumns, bNoColumnChange) {
    this.iColumns = iColumns;
    this.bNoColumnChange = bNoColumnChange;
    return this;
};
ItemNavigation.prototype.setHomeEndColumnMode = function (bStayInRow, bCtrlEnabled) {
    this._bStayInRow = bStayInRow;
    this._bCtrlEnabled = bCtrlEnabled;
    return this;
};
ItemNavigation.prototype.focusItem = function (iIndex, oEvent) {
    Log.info('FocusItem: ' + iIndex + ' iFocusedIndex: ' + this.iFocusedIndex, 'focusItem', 'ItemNavigation');
    if (iIndex == this.iFocusedIndex && this.aItemDomRefs[this.iFocusedIndex] == document.activeElement) {
        this.fireEvent(ItemNavigation.Events.FocusAgain, {
            index: iIndex,
            event: oEvent
        });
        return;
    }
    if (!this.aItemDomRefs[iIndex] || !jQuery(this.aItemDomRefs[iIndex]).is(':sapFocusable')) {
        if (this.bTableMode) {
            var iCol = iIndex % this.iColumns;
            var iOldIndex = iIndex;
            if (oEvent && oEvent.keyCode == KeyCodes.ARROW_RIGHT) {
                if (iCol < this.iColumns - 1) {
                    iIndex += this.oConfiguration.getRTL() ? -1 : 1;
                }
            } else if (oEvent && oEvent.keyCode == KeyCodes.ARROW_LEFT) {
                if (iCol > 1) {
                    iIndex -= this.oConfiguration.getRTL() ? -1 : 1;
                }
            } else {
                if (iCol > 1) {
                    iIndex -= 1;
                }
            }
            if (iIndex != iOldIndex) {
                this.focusItem(iIndex, oEvent);
            }
        }
        return;
    }
    this.fireEvent(ItemNavigation.Events.BeforeFocus, {
        index: iIndex,
        event: oEvent
    });
    this.setFocusedIndex(iIndex);
    this.bISetFocus = true;
    if (oEvent && jQuery(this.aItemDomRefs[this.iFocusedIndex]).data('sap.INRoot')) {
        var oItemItemNavigation = jQuery(this.aItemDomRefs[this.iFocusedIndex]).data('sap.INRoot');
        oItemItemNavigation._sFocusEvent = oEvent.type;
    }
    Log.info('Set Focus on ID: ' + this.aItemDomRefs[this.iFocusedIndex].id, 'focusItem', 'ItemNavigation');
    this.aItemDomRefs[this.iFocusedIndex].focus();
    this.fireEvent(ItemNavigation.Events.AfterFocus, {
        index: iIndex,
        event: oEvent
    });
};
ItemNavigation.prototype.setFocusedIndex = function (iIndex) {
    var $Item;
    if (this.aItemDomRefs.length < 0) {
        this.iFocusedIndex = -1;
        return this;
    }
    if (iIndex < 0) {
        iIndex = 0;
    }
    if (iIndex > this.aItemDomRefs.length - 1) {
        iIndex = this.aItemDomRefs.length - 1;
    }
    jQuery(this.oDomRef).attr('tabIndex', this.iTabIndex);
    if (this.iFocusedIndex !== -1 && this.aItemDomRefs.length > this.iFocusedIndex) {
        jQuery(this.aItemDomRefs[this.iFocusedIndex]).attr('tabIndex', -1);
        $Item = jQuery(this.aItemDomRefs[this.iFocusedIndex]);
        if ($Item.data('sap.INRoot') && iIndex != this.iFocusedIndex) {
            jQuery($Item.data('sap.INRoot').aItemDomRefs[$Item.data('sap.INRoot').iFocusedIndex]).attr('tabIndex', -1);
        }
    }
    this.iFocusedIndex = iIndex;
    var oFocusItem = this.aItemDomRefs[this.iFocusedIndex];
    $Item = jQuery(this.aItemDomRefs[this.iFocusedIndex]);
    if (!$Item.data('sap.INRoot')) {
        jQuery(oFocusItem).attr('tabIndex', this.iActiveTabIndex);
    }
    return this;
};
ItemNavigation.prototype.getFocusedDomRef = function () {
    return this.aItemDomRefs[this.iFocusedIndex];
};
ItemNavigation.prototype.getFocusedIndex = function () {
    return this.iFocusedIndex;
};
ItemNavigation.prototype.onfocusin = function (oEvent) {
    var oSource = oEvent.target;
    var i = 0;
    if (oSource == this.oDomRef) {
        if (!this._bItemTabIndex) {
            this.setItemsTabindex();
            this._bItemTabIndex = true;
        }
        if (this._bMouseDownHappened) {
            return;
        }
        var iIndex;
        if (jQuery(this.oDomRef).data('sap.INItem') && this._sFocusEvent && !jQuery(this.oDomRef).data('sap.InNavArea')) {
            switch (this._sFocusEvent) {
            case 'sapnext':
                iIndex = 0;
                break;
            case 'sapprevious':
                iIndex = this.aItemDomRefs.length - 1;
                break;
            default:
                if (this.iSelectedIndex != -1) {
                    iIndex = this.iSelectedIndex;
                } else if (this.iFocusedIndex != -1) {
                    iIndex = this.iFocusedIndex;
                } else {
                    iIndex = 0;
                }
                break;
            }
            this._sFocusEvent = undefined;
        } else {
            if (this.iSelectedIndex != -1) {
                iIndex = this.iSelectedIndex;
            } else if (this.iFocusedIndex != -1) {
                iIndex = this.iFocusedIndex;
            } else {
                iIndex = 0;
            }
        }
        this.focusItem(iIndex, oEvent);
        if (this.iFocusedIndex == -1) {
            for (i = iIndex + 1; i < this.aItemDomRefs.length; i++) {
                this.focusItem(i, oEvent);
                if (this.iFocusedIndex == i) {
                    break;
                }
            }
            if (this.iFocusedIndex == -1 && iIndex > 0) {
                for (i = iIndex - 1; i >= 0; i--) {
                    this.focusItem(i, oEvent);
                    if (this.iFocusedIndex == i) {
                        break;
                    }
                }
            }
        }
        oEvent.preventDefault();
        oEvent.stopPropagation();
    } else if (!this.bISetFocus) {
        if (this.aItemDomRefs && oEvent.target != this.aItemDomRefs[this.iFocusedIndex]) {
            for (i = 0; i < this.aItemDomRefs.length; i++) {
                if (oEvent.target == this.aItemDomRefs[i]) {
                    this.focusItem(i, oEvent);
                    break;
                }
            }
        } else {
            this.fireEvent(ItemNavigation.Events.AfterFocus, {
                index: this.iFocusedIndex,
                event: oEvent
            });
        }
    }
    this.bISetFocus = false;
};
ItemNavigation.prototype.onsapfocusleave = function (oEvent) {
    if (!oEvent.relatedControlId || !containsOrEquals(this.oDomRef, sap.ui.getWCCore().byId(oEvent.relatedControlId).getFocusDomRef())) {
        var iIndex;
        if (this.iSelectedIndex != -1) {
            iIndex = this.iSelectedIndex;
        } else if (this.iFocusedIndex != -1) {
            iIndex = this.iFocusedIndex;
        } else {
            iIndex = 0;
        }
        this.setFocusedIndex(iIndex);
        var $DomRef;
        if (jQuery(this.oDomRef).data('sap.INItem')) {
            var oParentDomRef;
            $DomRef = jQuery(this.oDomRef);
            while (!oParentDomRef) {
                $DomRef = $DomRef.parent();
                if ($DomRef.data('sap.INRoot')) {
                    oParentDomRef = $DomRef.get(0);
                }
            }
            if (!oEvent.relatedControlId || containsOrEquals(oParentDomRef, sap.ui.getWCCore().byId(oEvent.relatedControlId).getFocusDomRef())) {
                jQuery(this.aItemDomRefs[this.iFocusedIndex]).attr('tabIndex', -1);
            }
        }
        $DomRef = jQuery(this.oDomRef);
        if ($DomRef.data('sap.InNavArea') === false) {
            $DomRef.data('sap.InNavArea', true);
        }
        this.fireEvent(ItemNavigation.Events.FocusLeave, {
            index: iIndex,
            event: oEvent
        });
    }
};
ItemNavigation.prototype.onmousedown = function (oEvent) {
    var oSource = oEvent.target;
    var checkFocusableParent = function (oDomRef, oItem) {
        var bFocusableParent = false;
        var $CheckDom = jQuery(oDomRef);
        while (!$CheckDom.is(':sapFocusable') && $CheckDom.get(0) != oItem) {
            $CheckDom = $CheckDom.parent();
        }
        if ($CheckDom.get(0) != oItem) {
            bFocusableParent = true;
        }
        return bFocusableParent;
    };
    if (containsOrEquals(this.oDomRef, oSource)) {
        for (var i = 0; i < this.aItemDomRefs.length; i++) {
            var oItem = this.aItemDomRefs[i];
            if (containsOrEquals(oItem, oSource)) {
                if (!this.bTableMode) {
                    this.focusItem(i, oEvent);
                } else {
                    if (oItem === oSource || !checkFocusableParent(oSource, oItem)) {
                        this.focusItem(i, oEvent);
                    }
                }
                return;
            }
        }
        if (oSource == this.oDomRef) {
            this._bMouseDownHappened = true;
            var that = this;
            window.setTimeout(function () {
                that._bMouseDownHappened = false;
            }, 20);
        }
    }
};
ItemNavigation.prototype.onsapnext = function (oEvent) {
    if (!containsOrEquals(this.oDomRef, oEvent.target)) {
        return;
    }
    if (jQuery(this.oDomRef).data('sap.InNavArea')) {
        return;
    }
    if (this.bTableMode && this.aItemDomRefs.indexOf(oEvent.target) === -1) {
        return;
    }
    var iIndex = this.iFocusedIndex, bFirstTime = true, bBorderReached = false;
    if (iIndex > -1) {
        if (this.bTableMode) {
            var iRowCount = this.aItemDomRefs.length / this.iColumns, iRow = Math.floor(iIndex / this.iColumns), iCol = iIndex % this.iColumns;
            if (oEvent.keyCode == KeyCodes.ARROW_DOWN) {
                if (iRow < iRowCount - 1) {
                    iIndex += this.iColumns;
                }
            } else {
                if (iCol < this.iColumns - 1) {
                    iIndex += 1;
                }
            }
        } else {
            do {
                if (this.iColumns > 1 && oEvent.keyCode == KeyCodes.ARROW_DOWN) {
                    if (iIndex + this.iColumns >= this.aItemDomRefs.length) {
                        if (!this.bNoColumnChange) {
                            if (iIndex % this.iColumns < this.iColumns - 1) {
                                iIndex = iIndex % this.iColumns + 1;
                            } else if (this.bCycling) {
                                iIndex = 0;
                            }
                        } else {
                            iIndex = this.iFocusedIndex;
                            bBorderReached = true;
                        }
                    } else {
                        iIndex = iIndex + this.iColumns;
                    }
                } else {
                    if (iIndex == this.aItemDomRefs.length - 1) {
                        if (jQuery(this.oDomRef).data('sap.INItem')) {
                            return;
                        } else if (this.bCycling) {
                            iIndex = 0;
                        } else {
                            iIndex = this.iFocusedIndex;
                            bBorderReached = true;
                        }
                    } else {
                        iIndex++;
                    }
                }
                if (iIndex === this.iFocusedIndex) {
                    if (bFirstTime) {
                        bFirstTime = false;
                    } else {
                        throw new Error('ItemNavigation has no visible/existing items and is hence unable to select the next one');
                    }
                }
            } while (!this.aItemDomRefs[iIndex] || !jQuery(this.aItemDomRefs[iIndex]).is(':sapFocusable'));
        }
        this.focusItem(iIndex, oEvent);
        if (bBorderReached) {
            this.fireEvent(ItemNavigation.Events.BorderReached, {
                index: iIndex,
                event: oEvent
            });
        }
        oEvent.preventDefault();
        oEvent.stopPropagation();
    }
};
ItemNavigation.prototype.onsapnextmodifiers = function (oEvent) {
    if (this.hasDisabledModifier(oEvent)) {
        return;
    }
    this.onsapnext(oEvent);
};
ItemNavigation.prototype.onsapprevious = function (oEvent) {
    if (!containsOrEquals(this.oDomRef, oEvent.target)) {
        return;
    }
    if (jQuery(this.oDomRef).data('sap.InNavArea')) {
        return;
    }
    if (this.bTableMode && this.aItemDomRefs.indexOf(oEvent.target) === -1) {
        return;
    }
    var iIndex = this.iFocusedIndex, bFirstTime = true, bBorderReached = false;
    var iCol = 0;
    if (iIndex > -1) {
        if (this.bTableMode) {
            var iRow = Math.floor(iIndex / this.iColumns);
            iCol = iIndex % this.iColumns;
            if (oEvent.keyCode == KeyCodes.ARROW_UP) {
                if (iRow > 0) {
                    iIndex -= this.iColumns;
                }
            } else {
                if (iCol > 0) {
                    iIndex -= 1;
                }
            }
        } else {
            do {
                if (this.iColumns > 1 && oEvent.keyCode == KeyCodes.ARROW_UP) {
                    if (iIndex - this.iColumns < 0) {
                        if (!this.bNoColumnChange) {
                            iCol = 0;
                            if (iIndex % this.iColumns > 0) {
                                iCol = iIndex % this.iColumns - 1;
                            } else if (this.bCycling) {
                                iCol = Math.min(this.iColumns - 1, this.aItemDomRefs.length - 1);
                            }
                            if (iIndex === 0 && iCol === 0) {
                                iIndex = 0;
                            } else {
                                var iRows = Math.ceil(this.aItemDomRefs.length / this.iColumns);
                                iIndex = iCol + (iRows - 1) * this.iColumns;
                                if (iIndex >= this.aItemDomRefs.length) {
                                    iIndex = iIndex - this.iColumns;
                                }
                            }
                        } else {
                            iIndex = this.iFocusedIndex;
                            bBorderReached = true;
                        }
                    } else {
                        iIndex = iIndex - this.iColumns;
                    }
                } else {
                    if (iIndex == 0) {
                        if (jQuery(this.oDomRef).data('sap.INItem')) {
                            return;
                        } else if (this.bCycling) {
                            iIndex = this.aItemDomRefs.length - 1;
                        } else {
                            iIndex = this.iFocusedIndex;
                            bBorderReached = true;
                        }
                    } else {
                        iIndex--;
                    }
                }
                if (iIndex == this.iFocusedIndex) {
                    if (bFirstTime) {
                        bFirstTime = false;
                    } else {
                        throw new Error('ItemNavigation has no visible/existing items and is hence unable to select the previous one');
                    }
                }
            } while (!this.aItemDomRefs[iIndex] || !jQuery(this.aItemDomRefs[iIndex]).is(':sapFocusable'));
        }
        this.focusItem(iIndex, oEvent);
        if (bBorderReached) {
            this.fireEvent(ItemNavigation.Events.BorderReached, {
                index: iIndex,
                event: oEvent
            });
        }
        oEvent.preventDefault();
        oEvent.stopPropagation();
    }
};
ItemNavigation.prototype.onsappreviousmodifiers = function (oEvent) {
    if (this.hasDisabledModifier(oEvent)) {
        return;
    }
    this.onsapprevious(oEvent);
};
ItemNavigation.prototype.onsappageup = function (oEvent) {
    if (!containsOrEquals(this.oDomRef, oEvent.target)) {
        return;
    }
    if (this.bTableMode && this.aItemDomRefs.indexOf(oEvent.target) === -1) {
        return;
    }
    var iIndex = 0;
    var bBorderReached = false;
    if (this.iPageSize > 0) {
        iIndex = this.iFocusedIndex;
        if (iIndex > -1) {
            iIndex = iIndex - this.iPageSize;
            while (iIndex > 0 && !jQuery(this.aItemDomRefs[iIndex]).is(':sapFocusable')) {
                iIndex--;
            }
            if (iIndex < 0) {
                if (!this.bNoColumnChange) {
                    iIndex = 0;
                } else {
                    iIndex = this.iFocusedIndex;
                    bBorderReached = true;
                }
            }
            this.focusItem(iIndex, oEvent);
        }
    } else if (this.bTableMode) {
        iIndex = this.iFocusedIndex % this.iColumns;
        this.focusItem(iIndex, oEvent);
    }
    if (bBorderReached) {
        this.fireEvent(ItemNavigation.Events.BorderReached, {
            index: iIndex,
            event: oEvent
        });
    }
    oEvent.preventDefault();
    oEvent.stopPropagation();
};
ItemNavigation.prototype.onsappagedown = function (oEvent) {
    if (!containsOrEquals(this.oDomRef, oEvent.target)) {
        return;
    }
    if (this.bTableMode && this.aItemDomRefs.indexOf(oEvent.target) === -1) {
        return;
    }
    var iIndex = 0;
    var bBorderReached = false;
    if (this.iPageSize > 0) {
        iIndex = this.iFocusedIndex;
        if (iIndex > -1) {
            iIndex = iIndex + this.iPageSize;
            while (iIndex < this.aItemDomRefs.length - 1 && !jQuery(this.aItemDomRefs[iIndex]).is(':sapFocusable')) {
                iIndex++;
            }
            if (iIndex > this.aItemDomRefs.length - 1) {
                if (!this.bNoColumnChange) {
                    iIndex = this.aItemDomRefs.length - 1;
                } else {
                    iIndex = this.iFocusedIndex;
                    bBorderReached = true;
                }
            }
            this.focusItem(iIndex, oEvent);
        }
    } else if (this.bTableMode) {
        var iRowCount = this.aItemDomRefs.length / this.iColumns, iCol = this.iFocusedIndex % this.iColumns;
        iIndex = (iRowCount - 1) * this.iColumns + iCol;
        this.focusItem(iIndex, oEvent);
    }
    if (bBorderReached) {
        this.fireEvent(ItemNavigation.Events.BorderReached, {
            index: iIndex,
            event: oEvent
        });
    }
    oEvent.preventDefault();
    oEvent.stopPropagation();
};
ItemNavigation.prototype.onsaphome = function (oEvent) {
    if (!containsOrEquals(this.oDomRef, oEvent.target)) {
        return;
    }
    if (this.bTableMode && this.aItemDomRefs.indexOf(oEvent.target) === -1) {
        return;
    }
    var iIndex = 0;
    var iRow = 0;
    if (this.bTableMode) {
        if (!this.bTableList && !(oEvent.metaKey || oEvent.ctrlKey)) {
            iRow = Math.floor(this.iFocusedIndex / this.iColumns);
            iIndex = iRow * this.iColumns;
        }
    } else {
        if (!!(oEvent.metaKey || oEvent.ctrlKey) && !this._bCtrlEnabled) {
            return;
        }
        if (this._bStayInRow && !(this._bCtrlEnabled && (oEvent.metaKey || oEvent.ctrlKey)) && this.iColumns > 0) {
            iRow = Math.floor(this.iFocusedIndex / this.iColumns);
            iIndex = iRow * this.iColumns;
        } else {
            while (!this.aItemDomRefs[iIndex] || !jQuery(this.aItemDomRefs[iIndex]).is(':sapFocusable')) {
                iIndex++;
                if (iIndex == this.aItemDomRefs.length) {
                    return;
                }
            }
        }
    }
    this.focusItem(iIndex, oEvent);
    oEvent.preventDefault();
    oEvent.stopPropagation();
};
ItemNavigation.prototype.onsaphomemodifiers = function (oEvent) {
    if (this.hasDisabledModifier(oEvent)) {
        return;
    }
    this.onsaphome(oEvent);
};
ItemNavigation.prototype.onsapend = function (oEvent) {
    if (!containsOrEquals(this.oDomRef, oEvent.target)) {
        return;
    }
    if (this.bTableMode && this.aItemDomRefs.indexOf(oEvent.target) === -1) {
        return;
    }
    var iIndex = this.aItemDomRefs.length - 1;
    var iRow = 0;
    if (this.bTableMode) {
        if (!this.bTableList && !(oEvent.metaKey || oEvent.ctrlKey)) {
            iRow = Math.floor(this.iFocusedIndex / this.iColumns);
            iIndex = iRow * this.iColumns + this.iColumns - 1;
        }
    } else {
        if (!!(oEvent.metaKey || oEvent.ctrlKey) && !this._bCtrlEnabled) {
            return;
        }
        if (this._bStayInRow && !(this._bCtrlEnabled && (oEvent.metaKey || oEvent.ctrlKey)) && this.iColumns > 0) {
            iRow = Math.floor(this.iFocusedIndex / this.iColumns);
            iIndex = (iRow + 1) * this.iColumns - 1;
            if (iIndex >= this.aItemDomRefs.length) {
                iIndex = this.aItemDomRefs.length - 1;
            }
        } else {
            while (!this.aItemDomRefs[iIndex] || !jQuery(this.aItemDomRefs[iIndex]).is(':sapFocusable')) {
                iIndex--;
                if (iIndex < 0) {
                    return;
                }
            }
        }
    }
    this.focusItem(iIndex, oEvent);
    oEvent.preventDefault();
    oEvent.stopPropagation();
};
ItemNavigation.prototype.onsapendmodifiers = function (oEvent) {
    if (this.hasDisabledModifier(oEvent)) {
        return;
    }
    this.onsapend(oEvent);
};
ItemNavigation.prototype.setTabIndex0 = function () {
    this.iTabIndex = 0;
    this.iActiveTabIndex = 0;
};
ItemNavigation.prototype.onkeyup = function (oEvent) {
    if (oEvent.keyCode == KeyCodes.F2) {
        var $DomRef = jQuery(this.oDomRef);
        if ($DomRef.data('sap.InNavArea')) {
            $DomRef.data('sap.InNavArea', false);
        } else if ($DomRef.data('sap.InNavArea') === false) {
            $DomRef.data('sap.InNavArea', true);
        }
        oEvent.preventDefault();
        oEvent.stopPropagation();
    }
};
export default ItemNavigation;