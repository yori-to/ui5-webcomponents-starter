import BindingParser from './BindingParser.js';
import DataType from './DataType.js';
import EventProvider from './EventProvider.js';
import ManagedObjectMetadata from './ManagedObjectMetadata.js';
import BaseObject from './Object.js';
import BindingMode from '../model/BindingMode.js';
import StaticBinding from '../model/StaticBinding.js';
import CompositeBinding from '../model/CompositeBinding.js';
import Context from '../model/Context.js';
import FormatException from '../model/FormatException.js';
import ParseException from '../model/ParseException.js';
import Type from '../model/Type.js';
import ValidateException from '../model/ValidateException.js';
import ActivityDetection from '../util/ActivityDetection.js';
import ObjectPath from '../../base/util/ObjectPath.js';
import Log from '../../base/Log.js';
import assert from '../../base/assert.js';
import deepClone from '../../base/util/deepClone.js';
import deepEqual from '../../base/util/deepEqual.js';
import uid from '../../base/util/uid.js';
import jQuery from '../thirdparty/jquery.js';
var IDType;
var ManagedObject = EventProvider.extend('sap.ui.base.ManagedObject', {
    metadata: {
        'abstract': true,
        publicMethods: [
            'getId',
            'getMetadata',
            'getModel',
            'setModel',
            'hasModel',
            'bindProperty',
            'unbindProperty',
            'bindAggregation',
            'unbindAggregation',
            'bindObject',
            'unbindObject',
            'getObjectBinding'
        ],
        library: 'sap.ui.core',
        properties: {},
        aggregations: {},
        associations: {},
        events: {
            'validationSuccess': {
                enableEventBubbling: true,
                parameters: {
                    element: { type: 'sap.ui.base.ManagedObject' },
                    property: { type: 'string' },
                    type: { type: 'sap.ui.model.Type' },
                    newValue: { type: 'any' },
                    oldValue: { type: 'any' }
                }
            },
            'validationError': {
                enableEventBubbling: true,
                parameters: {
                    element: { type: 'sap.ui.base.ManagedObject' },
                    property: { type: 'string' },
                    type: { type: 'sap.ui.model.Type' },
                    newValue: { type: 'any' },
                    oldValue: { type: 'any' },
                    message: { type: 'string' }
                }
            },
            'parseError': {
                enableEventBubbling: true,
                parameters: {
                    element: { type: 'sap.ui.base.ManagedObject' },
                    property: { type: 'string' },
                    type: { type: 'sap.ui.model.Type' },
                    newValue: { type: 'any' },
                    oldValue: { type: 'any' },
                    message: { type: 'string' }
                }
            },
            'formatError': {
                enableEventBubbling: true,
                parameters: {
                    element: { type: 'sap.ui.base.ManagedObject' },
                    property: { type: 'string' },
                    type: { type: 'sap.ui.model.Type' },
                    newValue: { type: 'any' },
                    oldValue: { type: 'any' }
                }
            },
            'modelContextChange': {}
        },
        specialSettings: {
            id: 'sap.ui.core.ID',
            models: 'object',
            bindingContexts: 'object',
            objectBindings: 'object',
            metadataContexts: 'object',
            Type: {
                type: 'string',
                visibility: 'hidden'
            }
        }
    },
    constructor: function (sId, mSettings, oScope) {
        var that = this;
        EventProvider.call(this);
        if (typeof sId !== 'string' && sId !== undefined) {
            oScope = mSettings;
            mSettings = sId;
            sId = mSettings && mSettings.id;
        }
        if (!sId) {
            sId = this.getMetadata().uid();
        } else {
            var preprocessor = ManagedObject._fnIdPreprocessor;
            sId = preprocessor ? preprocessor.call(this, sId) : sId;
            var oType = IDType || (IDType = DataType.getType('sap.ui.core.ID'));
            if (!oType.isValid(sId)) {
                throw new Error('"' + sId + '" is not a valid ID.');
            }
        }
        this.sId = sId;
        this.mProperties = this.getMetadata().createPropertyBag();
        this.mAggregations = {};
        this.mAssociations = {};
        this.oParent = null;
        this.aDelegates = [];
        this.aBeforeDelegates = [];
        this.iSuppressInvalidate = 0;
        this.oPropagatedProperties = ManagedObject._oEmptyPropagatedProperties;
        this.mSkipPropagation = {};
        this.oModels = {};
        this.aPropagationListeners = [];
        this.oBindingContexts = {};
        this.mElementBindingContexts = {};
        this.mBindingInfos = {};
        this.mObjectBindingInfos = {};
        this._oContextualSettings = ManagedObject._defaultContextualSettings;
        this._sOwnerId = ManagedObject._sOwnerId;
        (function () {
            var bCreated = false;
            if (that.register) {
                that.register();
            }
            try {
                if (that._initCompositeSupport) {
                    that._initCompositeSupport(mSettings);
                }
                if (that.init) {
                    that.init();
                }
                that.applySettings(mSettings, oScope);
                bCreated = true;
            } finally {
                if (!bCreated && that.deregister) {
                    that.deregister();
                }
            }
        }());
    }
}, ManagedObjectMetadata);
ManagedObject.create = function (vData, oKeyInfo, oScope) {
    if (!vData || vData instanceof ManagedObject || typeof vData !== 'object' || vData instanceof String) {
        return vData;
    }
    function getClass(vType) {
        if (typeof vType === 'function') {
            return vType;
        }
        if (typeof vType === 'string') {
            return ObjectPath.get(vType);
        }
    }
    var fnClass = getClass(vData.Type) || getClass(oKeyInfo && oKeyInfo.type);
    if (typeof fnClass === 'function') {
        return new fnClass(vData, oScope);
    }
    var message = 'Don\'t know how to create a ManagedObject from ' + vData + ' (' + typeof vData + ')';
    Log.fatal(message);
    throw new Error(message);
};
var StashedControlSupport;
function getStashedControls(sId) {
    if (!StashedControlSupport) {
        StashedControlSupport = sap.ui.require('sap/ui/core/StashedControlSupport');
    }
    if (StashedControlSupport) {
        return StashedControlSupport.getStashedControls(sId);
    }
    return [];
}
ManagedObject._fnIdPreprocessor = null;
ManagedObject._fnSettingsPreprocessor = null;
ManagedObject.runWithPreprocessors = function (fn, oPreprocessors, oThisArg) {
    assert(typeof fn === 'function', 'fn must be a function');
    assert(!oPreprocessors || typeof oPreprocessors === 'object', 'oPreprocessors must be an object');
    var oOldPreprocessors = {
        id: this._fnIdPreprocessor,
        settings: this._fnSettingsPreprocessor
    };
    oPreprocessors = oPreprocessors || {};
    this._fnIdPreprocessor = oPreprocessors.id;
    this._fnSettingsPreprocessor = oPreprocessors.settings;
    try {
        return fn.call(oThisArg);
    } finally {
        this._fnIdPreprocessor = oOldPreprocessors.id;
        this._fnSettingsPreprocessor = oOldPreprocessors.settings;
    }
};
ManagedObject.prototype.applySettings = function (mSettings, oScope) {
    if (!mSettings || jQuery.isEmptyObject(mSettings)) {
        return this;
    }
    var that = this, oMetadata = this.getMetadata(), mValidKeys = oMetadata.getJSONKeys(), makeObject = ManagedObject.create, preprocessor = ManagedObject._fnSettingsPreprocessor, sKey, oValue, oKeyInfo;
    function addAllToAggregation(aObjects) {
        for (var i = 0, len = aObjects.length; i < len; i++) {
            var vObject = aObjects[i];
            if (Array.isArray(vObject)) {
                addAllToAggregation(vObject);
            } else {
                that[oKeyInfo._sMutator](makeObject(vObject, oKeyInfo, oScope));
            }
        }
    }
    preprocessor && preprocessor.call(this, mSettings);
    if (mSettings.metadataContexts && this._processMetadataContexts) {
        this._processMetadataContexts(mSettings.metadataContexts, mSettings);
    }
    if (mSettings.models) {
        if (typeof mSettings.models !== 'object') {
            throw new Error('models must be a simple object');
        }
        if (BaseObject.isA(mSettings.models, 'sap.ui.model.Model')) {
            this.setModel(mSettings.models);
        } else {
            for (sKey in mSettings.models) {
                this.setModel(mSettings.models[sKey], sKey === 'undefined' ? undefined : sKey);
            }
        }
    }
    if (mSettings.bindingContexts) {
        if (typeof mSettings.bindingContexts !== 'object') {
            throw new Error('bindingContexts must be a simple object');
        }
        if (mSettings.bindingContexts instanceof Context) {
            this.setBindingContext(mSettings.bindingContexts);
        } else {
            for (sKey in mSettings.bindingContexts) {
                this.setBindingContext(mSettings.bindingContexts[sKey], sKey === 'undefined' ? undefined : sKey);
            }
        }
    }
    if (mSettings.objectBindings) {
        if (typeof mSettings.objectBindings !== 'string' && typeof mSettings.objectBindings !== 'object') {
            throw new Error('binding must be a string or simple object');
        }
        if (typeof mSettings.objectBindings === 'string' || mSettings.objectBindings.path) {
            this.bindObject(mSettings.objectBindings);
        } else {
            for (var sKey in mSettings.objectBindings) {
                mSettings.objectBindings.model = sKey;
                this.bindObject(mSettings.objectBindings[sKey]);
            }
        }
    }
    for (sKey in mSettings) {
        oValue = mSettings[sKey];
        if ((oKeyInfo = mValidKeys[sKey]) !== undefined) {
            var oBindingInfo, oType, oPrimitiveTypeName;
            switch (oKeyInfo._iKind) {
            case 0:
                oType = DataType.getType(oKeyInfo.type);
                oPrimitiveTypeName = oType && oType.getPrimitiveType().getName();
                oBindingInfo = this.extractBindingInfo(oValue, oScope, oPrimitiveTypeName !== 'object' && oPrimitiveTypeName !== 'any');
                if (oBindingInfo && typeof oBindingInfo === 'object') {
                    this.bindProperty(sKey, oBindingInfo);
                } else {
                    this[oKeyInfo._sMutator](oBindingInfo || oValue);
                }
                break;
            case 1:
                oBindingInfo = oKeyInfo.altTypes && this.extractBindingInfo(oValue, oScope);
                if (oBindingInfo && typeof oBindingInfo === 'object') {
                    this.bindProperty(sKey, oBindingInfo);
                } else {
                    if (Array.isArray(oValue)) {
                        if (oValue.length > 1) {
                            Log.error('Tried to add an array of controls to a single aggregation');
                        }
                        oValue = oValue[0];
                    }
                    this[oKeyInfo._sMutator](makeObject(oBindingInfo || oValue, oKeyInfo, oScope));
                }
                break;
            case 2:
                oBindingInfo = this.extractBindingInfo(oValue, oScope);
                if (oBindingInfo && typeof oBindingInfo === 'object') {
                    this.bindAggregation(sKey, oBindingInfo);
                } else {
                    oValue = oBindingInfo || oValue;
                    if (oValue) {
                        if (Array.isArray(oValue)) {
                            addAllToAggregation(oValue);
                        } else {
                            that[oKeyInfo._sMutator](makeObject(oValue, oKeyInfo, oScope));
                        }
                    }
                }
                break;
            case 3:
                this[oKeyInfo._sMutator](oValue);
                break;
            case 4:
                if (oValue) {
                    if (Array.isArray(oValue)) {
                        for (var i = 0, l = oValue.length; i < l; i++) {
                            this[oKeyInfo._sMutator](oValue[i]);
                        }
                    } else {
                        this[oKeyInfo._sMutator](oValue);
                    }
                }
                break;
            case 5:
                if (typeof oValue == 'function') {
                    this[oKeyInfo._sMutator](oValue);
                } else {
                    this[oKeyInfo._sMutator](oValue[0], oValue[1], oValue[2]);
                }
                break;
            case -1:
            default:
                break;
            }
        } else {
            assert(false, 'ManagedObject.apply: encountered unknown setting \'' + sKey + '\' for class \'' + oMetadata.getName() + '\' (value:\'' + oValue + '\')');
        }
    }
    return this;
};
ManagedObject.escapeSettingsValue = function (vValue) {
    return typeof vValue === 'string' ? ManagedObject.bindingParser.escape(vValue) : vValue;
};
ManagedObject.prototype.toString = function () {
    return 'ManagedObject ' + this.getMetadata().getName() + '#' + this.getId();
};
ManagedObject.prototype.getId = function () {
    return this.sId;
};
ManagedObject.prototype.setProperty = function (sPropertyName, oValue, bSuppressInvalidate) {
    var oOldValue = this.mProperties[sPropertyName];
    oValue = this.validateProperty(sPropertyName, oValue);
    if (deepEqual(oOldValue, oValue)) {
        this.mProperties[sPropertyName] = oValue;
        return this;
    }
    if (bSuppressInvalidate) {
        ActivityDetection.refresh();
    }
    this.mProperties[sPropertyName] = oValue;
    if (!bSuppressInvalidate) {
        this.invalidate();
    }
    this.updateModelProperty(sPropertyName, oValue, oOldValue);
    if (this.mEventRegistry['_change']) {
        EventProvider.prototype.fireEvent.call(this, '_change', {
            'id': this.getId(),
            'name': sPropertyName,
            'oldValue': oOldValue,
            'newValue': oValue
        });
    }
    if (this._observer) {
        this._observer.propertyChange(this, sPropertyName, oOldValue, oValue);
    }
    return this;
};
ManagedObject.prototype.getProperty = function (sPropertyName) {
    var oValue = this.mProperties[sPropertyName], oProperty = this.getMetadata().getManagedProperty(sPropertyName), oType;
    if (!oProperty) {
        throw new Error('Property "' + sPropertyName + '" does not exist in ' + this);
    }
    oType = DataType.getType(oProperty.type);
    if (oType instanceof DataType && oType.isArrayType() && Array.isArray(oValue)) {
        oValue = oValue.slice(0);
    }
    if (oValue instanceof String) {
        oValue = oValue.valueOf();
    }
    if (oProperty.byValue) {
        oValue = deepClone(oValue);
    }
    return oValue;
};
ManagedObject.prototype.validateProperty = function (sPropertyName, oValue) {
    var oProperty = this.getMetadata().getManagedProperty(sPropertyName), oType;
    if (!oProperty) {
        throw new Error('Property "' + sPropertyName + '" does not exist in ' + this);
    }
    oType = DataType.getType(oProperty.type);
    if (oType instanceof DataType && oType.isArrayType() && Array.isArray(oValue)) {
        oValue = oValue.slice(0);
    }
    if (oValue == null) {
        oValue = oProperty.getDefaultValue();
    } else if (oType instanceof DataType) {
        if (oType.getName() == 'string') {
            if (!(typeof oValue == 'string' || oValue instanceof String)) {
                oValue = '' + oValue;
            }
        } else if (oType.getName() == 'string[]') {
            if (typeof oValue == 'string') {
                oValue = [oValue];
            }
            if (!Array.isArray(oValue)) {
                throw new Error('"' + oValue + '" is of type ' + typeof oValue + ', expected string[]' + ' for property "' + sPropertyName + '" of ' + this);
            }
            for (var i = 0; i < oValue.length; i++) {
                if (typeof oValue[i] !== 'string') {
                    oValue[i] = '' + oValue[i];
                }
            }
        } else if (!oType.isValid(oValue)) {
            throw new Error('"' + oValue + '" is of type ' + typeof oValue + ', expected ' + oType.getName() + ' for property "' + sPropertyName + '" of ' + this);
        }
    }
    if (oProperty.byValue) {
        oValue = deepClone(oValue);
    }
    if (oType && oType.normalize && typeof oType.normalize === 'function') {
        oValue = oType.normalize(oValue);
    }
    return oValue;
};
ManagedObject.prototype.isPropertyInitial = function (sPropertyName) {
    return !Object.prototype.hasOwnProperty.call(this.mProperties, sPropertyName) && !this.isBound(sPropertyName);
};
ManagedObject.prototype.resetProperty = function (sPropertyName) {
    if (this.mProperties.hasOwnProperty(sPropertyName)) {
        var oPropertyInfo = this.getMetadata().getManagedProperty(sPropertyName);
        oPropertyInfo.set(this, null);
        if (this.mProperties[sPropertyName] === oPropertyInfo.getDefaultValue()) {
            delete this.mProperties[sPropertyName];
        }
    }
    return this;
};
ManagedObject.prototype.getOriginInfo = function (sPropertyName) {
    var oValue = this.mProperties[sPropertyName];
    if (!(oValue instanceof String && oValue.originInfo)) {
        return null;
    }
    return oValue.originInfo;
};
ManagedObject.prototype.setAssociation = function (sAssociationName, sId, bSuppressInvalidate) {
    if (sId instanceof ManagedObject) {
        sId = sId.getId();
    } else if (sId != null && typeof sId !== 'string') {
        assert(false, 'setAssociation(): sId must be a string, an instance of sap.ui.base.ManagedObject or null');
        return this;
    }
    if (this.mAssociations[sAssociationName] === sId) {
        return this;
    }
    if (bSuppressInvalidate) {
        this.iSuppressInvalidate++;
    }
    if (this._observer && this.mAssociations[sAssociationName] != null) {
        this._observer.associationChange(this, sAssociationName, 'remove', this.mAssociations[sAssociationName]);
    }
    this.mAssociations[sAssociationName] = sId;
    if (this._observer && this.mAssociations[sAssociationName] != null) {
        this._observer.associationChange(this, sAssociationName, 'insert', sId);
    }
    if (!this.isInvalidateSuppressed()) {
        this.invalidate();
    }
    if (bSuppressInvalidate) {
        this.iSuppressInvalidate--;
    }
    return this;
};
ManagedObject.prototype.getAssociation = function (sAssociationName, oDefaultForCreation) {
    var result = this.mAssociations[sAssociationName];
    if (!result) {
        result = this.mAssociations[sAssociationName] = oDefaultForCreation || null;
    } else {
        if (typeof result.length === 'number' && !result.propertyIsEnumerable('length')) {
            return result.slice();
        }
        return result;
    }
    return result;
};
ManagedObject.prototype.addAssociation = function (sAssociationName, sId, bSuppressInvalidate) {
    if (sId instanceof ManagedObject) {
        sId = sId.getId();
    } else if (typeof sId !== 'string') {
        assert(false, 'addAssociation(): sId must be a string or an instance of sap.ui.base.ManagedObject');
        return this;
    }
    if (bSuppressInvalidate) {
        this.iSuppressInvalidate++;
    }
    var aIds = this.mAssociations[sAssociationName];
    if (!aIds) {
        aIds = this.mAssociations[sAssociationName] = [sId];
    } else {
        aIds.push(sId);
    }
    if (this._observer) {
        this._observer.associationChange(this, sAssociationName, 'insert', sId);
    }
    if (!this.isInvalidateSuppressed()) {
        this.invalidate();
    }
    if (bSuppressInvalidate) {
        this.iSuppressInvalidate--;
    }
    return this;
};
ManagedObject.prototype.removeAssociation = function (sAssociationName, vObject, bSuppressInvalidate) {
    var aIds = this.mAssociations[sAssociationName];
    var sId = null;
    if (!aIds) {
        return null;
    }
    if (bSuppressInvalidate) {
        this.iSuppressInvalidate++;
    }
    if (typeof vObject == 'object' && vObject.getId) {
        vObject = vObject.getId();
    }
    if (typeof vObject == 'string') {
        for (var i = 0; i < aIds.length; i++) {
            if (aIds[i] == vObject) {
                vObject = i;
                break;
            }
        }
    }
    if (typeof vObject == 'number') {
        if (vObject < 0 || vObject >= aIds.length) {
            Log.warning('ManagedObject.removeAssociation called with invalid index: ' + sAssociationName + ', ' + vObject);
        } else {
            sId = aIds[vObject];
            aIds.splice(vObject, 1);
            if (this._observer) {
                this._observer.associationChange(this, sAssociationName, 'remove', sId);
            }
            if (!this.isInvalidateSuppressed()) {
                this.invalidate();
            }
        }
    }
    if (bSuppressInvalidate) {
        this.iSuppressInvalidate--;
    }
    return sId;
};
ManagedObject.prototype.removeAllAssociation = function (sAssociationName, bSuppressInvalidate) {
    var aIds = this.mAssociations[sAssociationName];
    if (!aIds) {
        return [];
    }
    delete this.mAssociations[sAssociationName];
    if (!aIds.length) {
        return aIds;
    }
    if (bSuppressInvalidate) {
        this.iSuppressInvalidate++;
    }
    if (this._observer) {
        this._observer.associationChange(this, sAssociationName, 'remove', aIds);
    }
    if (!this.isInvalidateSuppressed()) {
        this.invalidate();
    }
    if (bSuppressInvalidate) {
        this.iSuppressInvalidate--;
    }
    return aIds;
};
ManagedObject.prototype.validateAggregation = function (sAggregationName, oObject, bMultiple, bOmitForwarding) {
    var oMetadata = this.getMetadata(), oAggregation = oMetadata.getManagedAggregation(sAggregationName), aAltTypes, oType, i, msg;
    if (!oAggregation) {
        throw new Error('Aggregation "' + sAggregationName + '" does not exist in ' + this);
    }
    if (oAggregation.multiple !== bMultiple) {
        throw new Error('Aggregation \'' + sAggregationName + '\' of ' + this + ' used with wrong cardinality (declared as ' + (oAggregation.multiple ? '0..n' : '0..1') + ')');
    }
    var oForwarder = oMetadata.getAggregationForwarder(sAggregationName);
    if (oForwarder && !bOmitForwarding) {
        oForwarder.getTarget(this).validateAggregation(oForwarder.targetAggregationName, oObject, bMultiple);
    }
    if (!oAggregation.multiple && !oObject) {
        return oObject;
    }
    if (oObject instanceof BaseObject && oObject.isA(oAggregation.type)) {
        return oObject;
    }
    aAltTypes = oAggregation.altTypes;
    if (aAltTypes && aAltTypes.length) {
        if (oObject == null) {
            return oObject;
        }
        for (i = 0; i < aAltTypes.length; i++) {
            oType = DataType.getType(aAltTypes[i]);
            if (oType instanceof DataType) {
                if (oType.isValid(oObject)) {
                    return oObject;
                }
            }
        }
    }
    oType = ObjectPath.get(oAggregation.type);
    if (typeof oType === 'function' && oObject instanceof oType) {
        return oObject;
    }
    msg = '"' + oObject + '" is not valid for aggregation "' + sAggregationName + '" of ' + this;
    if (DataType.isInterfaceType(oAggregation.type)) {
        assert(false, msg);
        return oObject;
    } else {
        throw new Error(msg);
    }
};
ManagedObject.prototype.setAggregation = function (sAggregationName, oObject, bSuppressInvalidate) {
    var oForwarder = this.getMetadata().getAggregationForwarder(sAggregationName);
    if (oForwarder) {
        oObject = this.validateAggregation(sAggregationName, oObject, false, true);
        return oForwarder.set(this, oObject);
    }
    var oOldChild = this.mAggregations[sAggregationName];
    if (oOldChild === oObject) {
        return this;
    }
    oObject = this.validateAggregation(sAggregationName, oObject, false);
    if (bSuppressInvalidate) {
        this.iSuppressInvalidate++;
    }
    this.mAggregations[sAggregationName] = null;
    if (oOldChild instanceof ManagedObject) {
        oOldChild.setParent(null);
    } else {
        if (this._observer != null && oOldChild != null) {
            this._observer.aggregationChange(this, sAggregationName, 'remove', oOldChild);
        }
    }
    this.mAggregations[sAggregationName] = oObject;
    if (oObject instanceof ManagedObject) {
        oObject.setParent(this, sAggregationName, bSuppressInvalidate);
    } else {
        if (!this.isInvalidateSuppressed()) {
            this.invalidate();
        }
        if (this._observer != null && oObject != null) {
            this._observer.aggregationChange(this, sAggregationName, 'insert', oObject);
        }
    }
    if (bSuppressInvalidate) {
        this.iSuppressInvalidate--;
    }
    return this;
};
ManagedObject.prototype.getAggregation = function (sAggregationName, oDefaultForCreation) {
    var oForwarder = this.getMetadata().getAggregationForwarder(sAggregationName);
    if (oForwarder) {
        return oForwarder.get(this);
    }
    var aChildren = this.mAggregations[sAggregationName];
    if (!aChildren) {
        aChildren = this.mAggregations[sAggregationName] = oDefaultForCreation || null;
    }
    if (aChildren) {
        if (typeof aChildren.length === 'number' && !aChildren.propertyIsEnumerable('length')) {
            return aChildren.slice();
        }
        return aChildren;
    } else {
        return null;
    }
};
ManagedObject.prototype.indexOfAggregation = function (sAggregationName, oObject) {
    var oForwarder = this.getMetadata().getAggregationForwarder(sAggregationName);
    if (oForwarder) {
        return oForwarder.indexOf(this, oObject);
    }
    var aChildren = this.mAggregations[sAggregationName];
    if (aChildren) {
        if (aChildren.length == undefined) {
            return -2;
        }
        for (var i = 0; i < aChildren.length; i++) {
            if (aChildren[i] == oObject) {
                return i;
            }
        }
    }
    return -1;
};
ManagedObject.prototype.insertAggregation = function (sAggregationName, oObject, iIndex, bSuppressInvalidate) {
    if (!oObject) {
        return this;
    }
    oObject = this.validateAggregation(sAggregationName, oObject, true, true);
    var oForwarder = this.getMetadata().getAggregationForwarder(sAggregationName);
    if (oForwarder) {
        return oForwarder.insert(this, oObject, iIndex);
    }
    var aChildren = this.mAggregations[sAggregationName] || (this.mAggregations[sAggregationName] = []);
    var i;
    if (iIndex < 0) {
        i = 0;
    } else if (iIndex > aChildren.length) {
        i = aChildren.length;
    } else {
        i = iIndex;
    }
    if (i !== iIndex) {
        Log.warning('ManagedObject.insertAggregation: index \'' + iIndex + '\' out of range [0,' + aChildren.length + '], forced to ' + i);
    }
    aChildren.splice(i, 0, oObject);
    oObject.setParent(this, sAggregationName, bSuppressInvalidate);
    return this;
};
ManagedObject.prototype.addAggregation = function (sAggregationName, oObject, bSuppressInvalidate) {
    if (!oObject) {
        return this;
    }
    oObject = this.validateAggregation(sAggregationName, oObject, true, true);
    var oForwarder = this.getMetadata().getAggregationForwarder(sAggregationName);
    if (oForwarder) {
        return oForwarder.add(this, oObject);
    }
    var aChildren = this.mAggregations[sAggregationName];
    if (!aChildren) {
        aChildren = this.mAggregations[sAggregationName] = [oObject];
    } else {
        aChildren.push(oObject);
    }
    oObject.setParent(this, sAggregationName, bSuppressInvalidate);
    return this;
};
ManagedObject.prototype.removeAggregation = function (sAggregationName, vObject, bSuppressInvalidate) {
    var oForwarder = this.getMetadata().getAggregationForwarder(sAggregationName);
    if (oForwarder) {
        return oForwarder.remove(this, vObject);
    }
    var aChildren = this.mAggregations[sAggregationName], oChild = null, i;
    if (!aChildren) {
        return null;
    }
    if (bSuppressInvalidate) {
        this.iSuppressInvalidate++;
    }
    if (typeof vObject == 'string') {
        for (i = 0; i < aChildren.length; i++) {
            if (aChildren[i] && aChildren[i].getId() === vObject) {
                vObject = i;
                break;
            }
        }
    }
    if (typeof vObject == 'object') {
        for (i = 0; i < aChildren.length; i++) {
            if (aChildren[i] == vObject) {
                vObject = i;
                break;
            }
        }
    }
    if (typeof vObject == 'number') {
        if (vObject < 0 || vObject >= aChildren.length) {
            Log.warning('ManagedObject.removeAggregation called with invalid index: ' + sAggregationName + ', ' + vObject);
        } else {
            oChild = aChildren[vObject];
            aChildren.splice(vObject, 1);
            oChild.setParent(null);
            if (!this.isInvalidateSuppressed()) {
                this.invalidate();
            }
        }
    }
    if (bSuppressInvalidate) {
        this.iSuppressInvalidate--;
    }
    return oChild;
};
ManagedObject.prototype.removeAllAggregation = function (sAggregationName, bSuppressInvalidate) {
    var oForwarder = this.getMetadata().getAggregationForwarder(sAggregationName);
    if (oForwarder) {
        return oForwarder.removeAll(this);
    }
    var aChildren = this.mAggregations[sAggregationName];
    if (!aChildren) {
        return [];
    }
    delete this.mAggregations[sAggregationName];
    if (!aChildren.length) {
        return aChildren;
    }
    if (bSuppressInvalidate) {
        this.iSuppressInvalidate++;
    }
    for (var i = 0; i < aChildren.length; i++) {
        aChildren[i].setParent(null);
    }
    if (!this.isInvalidateSuppressed()) {
        this.invalidate();
    }
    if (bSuppressInvalidate) {
        this.iSuppressInvalidate--;
    }
    return aChildren;
};
ManagedObject.prototype.destroyAggregation = function (sAggregationName, bSuppressInvalidate) {
    var oForwarder = this.getMetadata().getAggregationForwarder(sAggregationName);
    if (oForwarder) {
        return oForwarder.destroy(this);
    }
    var aChildren = this.mAggregations[sAggregationName], i, aChild;
    getStashedControls(this.getId()).forEach(function (c) {
        if (c.sParentAggregationName === sAggregationName) {
            c.destroy();
        }
    });
    if (!aChildren) {
        return this;
    }
    delete this.mAggregations[sAggregationName];
    if (Array.isArray(aChildren) && !aChildren.length) {
        return this;
    }
    if (bSuppressInvalidate) {
        this.iSuppressInvalidate++;
    }
    if (aChildren instanceof ManagedObject) {
        aChildren.destroy(bSuppressInvalidate);
        if (this._observer) {
            this._observer.aggregationChange(this, sAggregationName, 'remove', aChildren);
        }
    } else if (Array.isArray(aChildren)) {
        for (i = aChildren.length - 1; i >= 0; i--) {
            aChild = aChildren[i];
            if (aChild) {
                aChild.destroy(bSuppressInvalidate);
                if (this._observer) {
                    this._observer.aggregationChange(this, sAggregationName, 'remove', aChild);
                }
            }
        }
    }
    if (!this.isInvalidateSuppressed()) {
        this.invalidate();
    }
    if (bSuppressInvalidate) {
        this.iSuppressInvalidate--;
    }
    return this;
};
ManagedObject.prototype.invalidate = function () {
    if (this.oParent) {
        this.oParent.invalidate(this);
    }
};
ManagedObject.prototype.isInvalidateSuppressed = function () {
    var bInvalidateSuppressed = this.iSuppressInvalidate > 0;
    if (this.oParent && this.oParent instanceof ManagedObject) {
        bInvalidateSuppressed = bInvalidateSuppressed || this.oParent.isInvalidateSuppressed();
    }
    return bInvalidateSuppressed;
};
ManagedObject.prototype._removeChild = function (oChild, sAggregationName, bSuppressInvalidate) {
    if (!sAggregationName) {
        Log.error('Cannot remove aggregated child without aggregation name.', null, this);
    } else {
        if (bSuppressInvalidate) {
            this.iSuppressInvalidate++;
        }
        var iIndex = this.indexOfAggregation(sAggregationName, oChild);
        var oAggregationInfo = this.getMetadata().getAggregation(sAggregationName);
        if (iIndex == -2) {
            if (oAggregationInfo && this[oAggregationInfo._sMutator]) {
                this[oAggregationInfo._sMutator](null);
            } else {
                this.setAggregation(sAggregationName, null, bSuppressInvalidate);
            }
        } else if (iIndex > -1) {
            if (oAggregationInfo && this[oAggregationInfo._sRemoveMutator]) {
                this[oAggregationInfo._sRemoveMutator](iIndex);
            } else {
                this.removeAggregation(sAggregationName, iIndex, bSuppressInvalidate);
            }
        }
        if (bSuppressInvalidate) {
            this.iSuppressInvalidate--;
        }
    }
};
function isInclusiveDescendantOf(a, b) {
    while (a && a !== b) {
        a = a.oParent;
    }
    return !!a;
}
ManagedObject.prototype.setParent = function (oParent, sAggregationName, bSuppressInvalidate) {
    assert(oParent == null || oParent instanceof ManagedObject, 'oParent either must be null, undefined or a ManagedObject');
    if (!oParent) {
        if (this.oParent) {
            if (this.oParent._observer) {
                this.oParent._observer.aggregationChange(this.oParent, this.sParentAggregationName, 'remove', this);
            }
            if (this.aAPIParentInfos && this.aAPIParentInfos.forwardingCounter === 0) {
                delete this.aAPIParentInfos;
            }
        }
        this.oParent = null;
        this.sParentAggregationName = null;
        var oPropagatedProperties = ManagedObject._oEmptyPropagatedProperties;
        if (oPropagatedProperties !== this.oPropagatedProperties) {
            this.oPropagatedProperties = oPropagatedProperties;
            if (!this._bIsBeingDestroyed) {
                Promise.resolve().then(function () {
                    if (!this.oParent) {
                        this.updateBindings(true, null);
                        this.updateBindingContext(false, undefined, true);
                        this.propagateProperties(true);
                        this.fireModelContextChange();
                    }
                }.bind(this));
            }
        }
        this._oContextualSettings = ManagedObject._defaultContextualSettings;
        if (!this._bIsBeingDestroyed) {
            setTimeout(function () {
                if (!this.oParent) {
                    this._propagateContextualSettings();
                }
            }.bind(this), 0);
        }
        ActivityDetection.refresh();
        return;
    }
    if (isInclusiveDescendantOf(oParent, this)) {
        throw new Error('Cycle detected: new parent \'' + oParent + '\' is already a descendant of (or equal to) \'' + this + '\'');
    }
    if (bSuppressInvalidate) {
        ActivityDetection.refresh();
        this.iSuppressInvalidate++;
    }
    var oOldParent = this.getParent();
    if (oOldParent) {
        oOldParent._removeChild(this, this.sParentAggregationName);
    }
    this.oParent = oParent;
    this.sParentAggregationName = sAggregationName;
    var oPropagatedProperties = this.aAPIParentInfos ? this.aAPIParentInfos[0].parent._getPropertiesToPropagate() : oParent._getPropertiesToPropagate();
    if (oPropagatedProperties !== this.oPropagatedProperties) {
        this.oPropagatedProperties = oPropagatedProperties;
        if (this.hasModel()) {
            this.updateBindings(true, null);
            this.updateBindingContext(false, undefined, true);
            this.propagateProperties(true);
        }
        this._callPropagationListener();
        this.fireModelContextChange();
    }
    this._applyContextualSettings(oParent._oContextualSettings);
    if (oParent && !this.isInvalidateSuppressed()) {
        oParent.invalidate(this);
    }
    if (bSuppressInvalidate) {
        this.iSuppressInvalidate--;
    }
    if (oParent._observer) {
        oParent._observer.aggregationChange(oParent, sAggregationName, 'insert', this);
    }
    return this;
};
ManagedObject.prototype._applyContextualSettings = function (oContextualSettings) {
    if (this._oContextualSettings !== oContextualSettings) {
        this._oContextualSettings = oContextualSettings;
        this._propagateContextualSettings();
        this._onContextualSettingsChanged();
    }
};
ManagedObject.prototype._onContextualSettingsChanged = function () {
};
ManagedObject.prototype._propagateContextualSettings = function () {
    var oSettings = this._oContextualSettings, sAggregationName, oAggregation, i;
    for (sAggregationName in this.mAggregations) {
        oAggregation = this.mAggregations[sAggregationName];
        if (oAggregation instanceof ManagedObject) {
            oAggregation._applyContextualSettings(oSettings);
        } else if (oAggregation instanceof Array) {
            for (i = 0; i < oAggregation.length; i++) {
                if (oAggregation[i] instanceof ManagedObject) {
                    oAggregation[i]._applyContextualSettings(oSettings);
                }
            }
        }
    }
};
ManagedObject.prototype._getContextualSettings = function () {
    return this._oContextualSettings;
};
ManagedObject.prototype.getParent = function () {
    return this.oParent;
};
ManagedObject.prototype.destroy = function (bSuppressInvalidate) {
    if (this.bIsDestroyed) {
        return;
    }
    var that = this;
    this._bIsBeingDestroyed = true;
    if (bSuppressInvalidate) {
        this.iSuppressInvalidate++;
    }
    if (this.exit) {
        this.exit();
    }
    if (this._exitCompositeSupport) {
        this._exitCompositeSupport();
    }
    for (var oAggr in this.mAggregations) {
        this.destroyAggregation(oAggr, bSuppressInvalidate);
    }
    getStashedControls(this.getId()).forEach(function (c) {
        c.destroy();
    });
    if (this.deregister) {
        this.deregister();
    }
    if (this.oParent && this.sParentAggregationName) {
        this.oParent._removeChild(this, this.sParentAggregationName, bSuppressInvalidate);
    }
    delete this.oParent;
    jQuery.each(this.mBindingInfos, function (sName, oBindingInfo) {
        if (oBindingInfo.factory) {
            that.unbindAggregation(sName, true);
        } else {
            that.unbindProperty(sName, true);
        }
    });
    jQuery.each(this.mObjectBindingInfos, function (sName, oBoundObject) {
        that.unbindObject(sName, true);
    });
    if (bSuppressInvalidate) {
        this.iSuppressInvalidate--;
    }
    if (this._observer) {
        this._observer.objectDestroyed(this);
    }
    if (this.aAPIParentInfos) {
        this.aAPIParentInfos = null;
    }
    EventProvider.prototype.destroy.apply(this, arguments);
    this.setParent = function () {
        throw Error('The object with ID ' + that.getId() + ' was destroyed and cannot be used anymore.');
    };
    this.bIsDestroyed = true;
};
ManagedObject.bindingParser = BindingParser.simpleParser;
ManagedObject.prototype.isBinding = function (oValue, oKeyInfo) {
    return typeof this.extractBindingInfo(oValue) === 'object';
};
ManagedObject.prototype.extractBindingInfo = function (oValue, oScope, bDetectValue) {
    if (oValue && typeof oValue === 'object') {
        if (oValue.ui5object) {
            delete oValue.ui5object;
        } else if (oValue.path != undefined || oValue.parts || bDetectValue && oValue.value != undefined) {
            if (oValue.template) {
                oValue.template = ManagedObject.create(oValue.template);
            }
            return oValue;
        }
    }
    if (typeof oValue === 'string') {
        return ManagedObject.bindingParser(oValue, oScope, true);
    }
};
ManagedObject.prototype.getBindingInfo = function (sName) {
    var oForwarder = this.getMetadata().getAggregationForwarder(sName);
    if (oForwarder && oForwarder.forwardBinding) {
        return oForwarder.getTarget(this).getBindingInfo(oForwarder.targetAggregationName);
    }
    return this.mBindingInfos[sName];
};
ManagedObject.prototype.bindObject = function (oBindingInfo) {
    var sModelName, sPath, iSeparatorPos;
    if (typeof oBindingInfo == 'string') {
        sPath = oBindingInfo;
        oBindingInfo = {
            path: sPath,
            parameters: arguments[1]
        };
    } else {
        sPath = oBindingInfo.path;
    }
    iSeparatorPos = sPath.indexOf('>');
    if (iSeparatorPos > 0) {
        oBindingInfo.model = sPath.substr(0, iSeparatorPos);
        oBindingInfo.path = sPath.substr(iSeparatorPos + 1);
    }
    sModelName = oBindingInfo.model;
    if (this.mObjectBindingInfos[sModelName]) {
        this.unbindObject(sModelName, true);
    }
    this.mObjectBindingInfos[sModelName] = oBindingInfo;
    if (this.getModel(sModelName)) {
        this._bindObject(oBindingInfo);
    }
    return this;
};
ManagedObject.prototype._bindObject = function (oBindingInfo) {
    var oBinding, oContext, sModelName, oModel, that = this;
    var fnChangeHandler = function (oEvent) {
        that.setElementBindingContext(oBinding.getBoundContext(), sModelName);
    };
    var fnDataStateChangeHandler = function (oEvent) {
        var oDataState = oBinding.getDataState();
        if (!oDataState) {
            return;
        }
        if (that.refreshDataState) {
            that.refreshDataState('', oDataState);
        }
    };
    sModelName = oBindingInfo.model;
    oModel = this.getModel(sModelName);
    oContext = this.getBindingContext(sModelName);
    oBinding = oModel.bindContext(oBindingInfo.path, oContext, oBindingInfo.parameters);
    if (oBindingInfo.suspended) {
        oBinding.suspend(true);
    }
    oBinding.attachChange(fnChangeHandler);
    oBindingInfo.binding = oBinding;
    oBindingInfo.modelChangeHandler = fnChangeHandler;
    oBindingInfo.dataStateChangeHandler = fnDataStateChangeHandler;
    oBinding.attachEvents(oBindingInfo.events);
    if (this.refreshDataState) {
        oBinding.attachAggregatedDataStateChange(fnDataStateChangeHandler);
    }
    oBinding.initialize();
};
ManagedObject.prototype.unbindObject = function (sModelName, _bSkipUpdateBindingContext) {
    var oBindingInfo = this.mObjectBindingInfos[sModelName];
    if (oBindingInfo) {
        if (oBindingInfo.binding) {
            oBindingInfo.binding.detachChange(oBindingInfo.modelChangeHandler);
            oBindingInfo.binding.detachEvents(oBindingInfo.events);
            if (this.refreshDataState) {
                oBindingInfo.binding.detachAggregatedDataStateChange(oBindingInfo.dataStateChangeHandler);
            }
            oBindingInfo.binding.destroy();
        }
        delete this.mObjectBindingInfos[sModelName];
        delete this.mElementBindingContexts[sModelName];
        if (!_bSkipUpdateBindingContext) {
            this.updateBindingContext(false, sModelName);
            this.propagateProperties(sModelName);
            this.fireModelContextChange();
        }
    }
    return this;
};
ManagedObject.prototype.bindContext = function (sPath) {
    return this.bindObject(sPath);
};
ManagedObject.prototype.unbindContext = function (sModelName) {
    return this.unbindObject(sModelName);
};
ManagedObject.prototype.bindProperty = function (sName, oBindingInfo, _vFormat, _sMode) {
    var iSeparatorPos, bAvailable = true, oProperty = this.getMetadata().getPropertyLikeSetting(sName);
    if (!oProperty) {
        throw new Error('Property "' + sName + '" does not exist in ' + this);
    }
    if (typeof oBindingInfo == 'string') {
        oBindingInfo = {
            parts: [{
                    path: oBindingInfo,
                    type: _vFormat instanceof Type ? _vFormat : undefined,
                    mode: _sMode
                }],
            formatter: typeof _vFormat === 'function' ? _vFormat : undefined
        };
    }
    if (!oBindingInfo.parts) {
        oBindingInfo.parts = [];
        oBindingInfo.parts[0] = {
            path: oBindingInfo.path,
            targetType: oBindingInfo.targetType,
            type: oBindingInfo.type,
            suspended: oBindingInfo.suspended,
            formatOptions: oBindingInfo.formatOptions,
            constraints: oBindingInfo.constraints,
            model: oBindingInfo.model,
            mode: oBindingInfo.mode,
            value: oBindingInfo.value
        };
        delete oBindingInfo.path;
        delete oBindingInfo.targetType;
        delete oBindingInfo.mode;
        delete oBindingInfo.model;
        delete oBindingInfo.value;
    }
    for (var i = 0; i < oBindingInfo.parts.length; i++) {
        var oPart = oBindingInfo.parts[i];
        if (typeof oPart == 'string') {
            oPart = { path: oPart };
            oBindingInfo.parts[i] = oPart;
        }
        if (oPart.path !== undefined) {
            iSeparatorPos = oPart.path.indexOf('>');
            if (iSeparatorPos > 0) {
                oPart.model = oPart.path.substr(0, iSeparatorPos);
                oPart.path = oPart.path.substr(iSeparatorPos + 1);
            }
        }
        if (oBindingInfo.formatter && oPart.mode != BindingMode.OneWay && oPart.mode != BindingMode.OneTime) {
            oPart.mode = BindingMode.OneWay;
        }
        if (oPart.value === undefined && !this.getModel(oPart.model)) {
            bAvailable = false;
        }
    }
    if (this.isBound(sName)) {
        this.unbindProperty(sName, true);
    }
    this.mBindingInfos[sName] = oBindingInfo;
    if (this._observer) {
        this._observer.bindingChange(this, sName, 'prepare', oBindingInfo, 'property');
    }
    if (bAvailable) {
        this._bindProperty(sName, oBindingInfo);
    }
    return this;
};
ManagedObject.prototype._bindProperty = function (sName, oBindingInfo) {
    var oModel, oContext, oBinding, sMode, sCompositeMode = BindingMode.TwoWay, oType, clType, oPropertyInfo = this.getMetadata().getPropertyLikeSetting(sName), sInternalType = oPropertyInfo._iKind === 0 ? oPropertyInfo.type : oPropertyInfo.altTypes[0], that = this, aBindings = [], fnModelChangeHandler = function (oEvent) {
            that.updateProperty(sName);
            var oDataState = oBinding.getDataState();
            if (oDataState) {
                var oControlMessages = oDataState.getControlMessages();
                if (oControlMessages && oControlMessages.length > 0) {
                    var oMessageManager = sap.ui.getWCCore().getMessageManager();
                    oDataState.setControlMessages([]);
                    if (oControlMessages) {
                        oMessageManager.removeMessages(oControlMessages);
                    }
                }
                oDataState.setInvalidValue(undefined);
            }
            if (oBinding.getBindingMode() === BindingMode.OneTime && oBinding.isResolved()) {
                oBinding.detachChange(fnModelChangeHandler);
                if (this.refreshDataState) {
                    oBinding.detachAggregatedDataStateChange(fnDataStateChangeHandler);
                }
                oBinding.detachEvents(oBindingInfo.events);
            }
        }, fnDataStateChangeHandler = function () {
            var oDataState = oBinding.getDataState();
            if (!oDataState) {
                return;
            }
            if (that.refreshDataState) {
                that.refreshDataState(sName, oDataState);
            }
        };
    oBindingInfo.parts.forEach(function (oPart) {
        oContext = that.getBindingContext(oPart.model);
        oModel = that.getModel(oPart.model);
        oType = oPart.type;
        if (typeof oType == 'string') {
            clType = ObjectPath.get(oType);
            if (typeof clType !== 'function') {
                throw new Error('Cannot find type "' + oType + '" used in control "' + that.getId() + '"!');
            }
            oType = new clType(oPart.formatOptions, oPart.constraints);
        }
        if (oPart.value !== undefined) {
            oBinding = new StaticBinding(oPart.value);
        } else {
            oBinding = oModel.bindProperty(oPart.path, oContext, oPart.parameters || oBindingInfo.parameters);
        }
        oBinding.setType(oType, oPart.targetType || sInternalType);
        oBinding.setFormatter(oPart.formatter);
        if (oPart.suspended) {
            oBinding.suspend(true);
        }
        sMode = oPart.mode || oModel && oModel.getDefaultBindingMode() || BindingMode.TwoWay;
        oBinding.setBindingMode(sMode);
        if (sMode !== BindingMode.TwoWay) {
            sCompositeMode = BindingMode.OneWay;
        }
        aBindings.push(oBinding);
    });
    if (aBindings.length > 1 || oBindingInfo.formatter && oBindingInfo.formatter.textFragments) {
        oType = oBindingInfo.type;
        if (typeof oType == 'string') {
            clType = ObjectPath.get(oType);
            oType = new clType(oBindingInfo.formatOptions, oBindingInfo.constraints);
        }
        oBinding = new CompositeBinding(aBindings, oBindingInfo.useRawValues, oBindingInfo.useInternalValues);
        oBinding.setType(oType, oBindingInfo.targetType || sInternalType);
        oBinding.setBindingMode(oBindingInfo.mode || sCompositeMode);
    } else {
        oBinding = aBindings[0];
    }
    oBinding.attachChange(fnModelChangeHandler);
    if (this.refreshDataState) {
        oBinding.attachAggregatedDataStateChange(fnDataStateChangeHandler);
    }
    oBinding.setFormatter(jQuery.proxy(oBindingInfo.formatter, this));
    oBindingInfo.binding = oBinding;
    oBindingInfo.modelChangeHandler = fnModelChangeHandler;
    oBindingInfo.dataStateChangeHandler = fnDataStateChangeHandler;
    oBinding.attachEvents(oBindingInfo.events);
    oBinding.initialize();
    if (this._observer) {
        this._observer.bindingChange(this, sName, 'ready', oBindingInfo, 'property');
    }
};
ManagedObject.prototype.unbindProperty = function (sName, bSuppressReset) {
    var oBindingInfo = this.mBindingInfos[sName];
    if (oBindingInfo) {
        if (oBindingInfo.binding) {
            oBindingInfo.binding.detachChange(oBindingInfo.modelChangeHandler);
            if (this.refreshDataState) {
                oBindingInfo.binding.detachAggregatedDataStateChange(oBindingInfo.dataStateChangeHandler);
            }
            oBindingInfo.binding.detachEvents(oBindingInfo.events);
            oBindingInfo.binding.destroy();
        }
        if (this._observer) {
            this._observer.bindingChange(this, sName, 'remove', this.mBindingInfos[sName], 'property');
        }
        delete this.mBindingInfos[sName];
        if (!bSuppressReset) {
            this.resetProperty(sName);
        }
    }
    return this;
};
ManagedObject.prototype.updateProperty = function (sName) {
    var oBindingInfo = this.mBindingInfos[sName], oBinding = oBindingInfo.binding, oPropertyInfo = this.getMetadata().getPropertyLikeSetting(sName);
    if (oBindingInfo.skipPropertyUpdate) {
        return;
    }
    try {
        var oValue = oBinding.getExternalValue();
        oBindingInfo.skipModelUpdate = true;
        oPropertyInfo.set(this, oValue);
        oBindingInfo.skipModelUpdate = false;
    } catch (oException) {
        oBindingInfo.skipModelUpdate = false;
        if (oException instanceof FormatException) {
            this.fireFormatError({
                element: this,
                property: sName,
                type: oBinding.getType(),
                newValue: oBinding.getValue(),
                oldValue: this[oPropertyInfo._sGetter](),
                exception: oException,
                message: oException.message
            }, false, true);
            oBindingInfo.skipModelUpdate = true;
            this.resetProperty(sName);
            oBindingInfo.skipModelUpdate = false;
        } else {
            throw oException;
        }
    }
};
ManagedObject.prototype.updateModelProperty = function (sName, oValue, oOldValue) {
    if (this.isBound(sName)) {
        var oBindingInfo = this.mBindingInfos[sName], oBinding = oBindingInfo.binding;
        if (oBindingInfo.skipModelUpdate || oBinding && oBinding.isSuspended()) {
            return;
        }
        if (oBinding && oBinding.getBindingMode() == BindingMode.TwoWay) {
            try {
                oBindingInfo.skipPropertyUpdate = true;
                oBinding.setExternalValue(oValue);
                oBindingInfo.skipPropertyUpdate = false;
                var oExternalValue = oBinding.getExternalValue();
                if (oValue != oExternalValue) {
                    this.updateProperty(sName);
                }
                if (oBinding.hasValidation()) {
                    this.fireValidationSuccess({
                        element: this,
                        property: sName,
                        type: oBinding.getType(),
                        newValue: oValue,
                        oldValue: oOldValue
                    }, false, true);
                }
            } catch (oException) {
                oBindingInfo.skipPropertyUpdate = false;
                var mErrorParameters = {
                    element: this,
                    property: sName,
                    type: oBinding.getType(),
                    newValue: oValue,
                    oldValue: oOldValue,
                    exception: oException,
                    message: oException.message
                };
                if (oException instanceof ParseException) {
                    this.fireParseError(mErrorParameters, false, true);
                } else if (oException instanceof ValidateException) {
                    this.fireValidationError(mErrorParameters, false, true);
                } else {
                    throw oException;
                }
            }
        }
    }
};
var MAYBE_SHAREABLE_OR_NOT = 1;
ManagedObject.prototype.bindAggregation = function (sName, oBindingInfo) {
    var sPath, oTemplate, aSorters, aFilters, oMetadata = this.getMetadata(), oAggregationInfo = oMetadata.getAggregation(sName);
    if (!oAggregationInfo) {
        throw new Error('Aggregation "' + sName + '" does not exist in ' + this);
    }
    if (!oAggregationInfo.multiple) {
        Log.error('Binding of single aggregation "' + sName + '" of ' + this + ' is not supported!');
    }
    if (typeof oBindingInfo == 'string') {
        sPath = arguments[1];
        oTemplate = arguments[2];
        aSorters = arguments[3];
        aFilters = arguments[4];
        oBindingInfo = {
            path: sPath,
            sorter: aSorters,
            filters: aFilters
        };
        if (oTemplate instanceof ManagedObject) {
            oBindingInfo.template = oTemplate;
        } else if (typeof oTemplate === 'function') {
            oBindingInfo.factory = oTemplate;
        }
    }
    var oForwarder = oMetadata.getAggregationForwarder(sName);
    if (oForwarder && oForwarder.forwardBinding) {
        oForwarder.getTarget(this).bindAggregation(oForwarder.targetAggregationName, oBindingInfo);
        return this;
    }
    if (this.isBound(sName)) {
        this.unbindAggregation(sName);
    }
    if (!(oBindingInfo.template || oBindingInfo.factory)) {
        if (oAggregationInfo._doesNotRequireFactory) {
            oBindingInfo.factory = function () {
                throw new Error('dummy factory called unexpectedly ');
            };
        } else {
            throw new Error('Missing template or factory function for aggregation ' + sName + ' of ' + this + ' !');
        }
    }
    if (oBindingInfo.template) {
        if (oBindingInfo.template._sapui_candidateForDestroy) {
            Log.warning('A binding template that is marked as \'candidate for destroy\' is reused in a binding. ' + 'You can use \'templateShareable:true\' to fix this issue for all bindings that are affected ' + '(The template is used in aggregation \'' + sName + '\' of object \'' + this.getId() + '\'). ' + 'For more information, see documentation under \'Aggregation Binding\'.');
            delete oBindingInfo.template._sapui_candidateForDestroy;
        }
        if (oBindingInfo.templateShareable === undefined) {
            oBindingInfo.templateShareable = MAYBE_SHAREABLE_OR_NOT;
        }
        oBindingInfo.factory = function (sId) {
            return oBindingInfo.template.clone(sId);
        };
    }
    var iSeparatorPos = oBindingInfo.path.indexOf('>');
    if (iSeparatorPos > 0) {
        oBindingInfo.model = oBindingInfo.path.substr(0, iSeparatorPos);
        oBindingInfo.path = oBindingInfo.path.substr(iSeparatorPos + 1);
    }
    this.mBindingInfos[sName] = oBindingInfo;
    if (this._observer) {
        this._observer.bindingChange(this, sName, 'prepare', oBindingInfo, 'aggregation');
    }
    if (this.getModel(oBindingInfo.model)) {
        this._bindAggregation(sName, oBindingInfo);
    }
    return this;
};
ManagedObject.prototype._bindAggregation = function (sName, oBindingInfo) {
    var that = this, oBinding, fnModelChangeHandler = function (oEvent) {
            var sUpdater = 'update' + sName.substr(0, 1).toUpperCase() + sName.substr(1);
            if (that[sUpdater]) {
                var sChangeReason = oEvent && oEvent.getParameter('reason');
                if (sChangeReason) {
                    that[sUpdater](sChangeReason);
                } else {
                    that[sUpdater]();
                }
            } else {
                that.updateAggregation(sName);
            }
        }, fnModelRefreshHandler = function (oEvent) {
            var sRefresher = 'refresh' + sName.substr(0, 1).toUpperCase() + sName.substr(1);
            if (that[sRefresher]) {
                that[sRefresher](oEvent.getParameter('reason'));
            } else {
                fnModelChangeHandler(oEvent);
            }
        }, fnDataStateChangeHandler = function (oEvent) {
            var oDataState = oBinding.getDataState();
            if (!oDataState) {
                return;
            }
            if (that.refreshDataState) {
                that.refreshDataState(sName, oDataState);
            }
        };
    var oModel = this.getModel(oBindingInfo.model);
    if (this.isTreeBinding(sName)) {
        oBinding = oModel.bindTree(oBindingInfo.path, this.getBindingContext(oBindingInfo.model), oBindingInfo.filters, oBindingInfo.parameters, oBindingInfo.sorter);
    } else {
        oBinding = oModel.bindList(oBindingInfo.path, this.getBindingContext(oBindingInfo.model), oBindingInfo.sorter, oBindingInfo.filters, oBindingInfo.parameters);
        if (this.bUseExtendedChangeDetection) {
            oBinding.enableExtendedChangeDetection(!oBindingInfo.template, oBindingInfo.key);
        }
    }
    if (oBindingInfo.suspended) {
        oBinding.suspend(true);
    }
    oBindingInfo.binding = oBinding;
    oBindingInfo.modelChangeHandler = fnModelChangeHandler;
    oBindingInfo.modelRefreshHandler = fnModelRefreshHandler;
    oBindingInfo.dataStateChangeHandler = fnDataStateChangeHandler;
    oBinding.attachChange(fnModelChangeHandler);
    oBinding.attachRefresh(fnModelRefreshHandler);
    oBinding.attachEvents(oBindingInfo.events);
    if (this.refreshDataState) {
        oBinding.attachAggregatedDataStateChange(fnDataStateChangeHandler);
    }
    oBinding.initialize();
    if (this._observer) {
        this._observer.bindingChange(this, sName, 'ready', oBindingInfo, 'aggregation');
    }
};
ManagedObject.prototype.unbindAggregation = function (sName, bSuppressReset) {
    var oForwarder = this.getMetadata().getAggregationForwarder(sName);
    if (oForwarder && oForwarder.forwardBinding) {
        oForwarder.getTarget(this).unbindAggregation(oForwarder.targetAggregationName, bSuppressReset);
        return this;
    }
    var oBindingInfo = this.mBindingInfos[sName], oAggregationInfo = this.getMetadata().getAggregation(sName);
    if (oBindingInfo) {
        if (oBindingInfo.binding) {
            oBindingInfo.binding.detachChange(oBindingInfo.modelChangeHandler);
            oBindingInfo.binding.detachRefresh(oBindingInfo.modelRefreshHandler);
            oBindingInfo.binding.detachEvents(oBindingInfo.events);
            if (this.refreshDataState) {
                oBindingInfo.binding.detachAggregatedDataStateChange(oBindingInfo.dataStateChangeHandler);
            }
            oBindingInfo.binding.destroy();
        }
        if (oBindingInfo.template) {
            if (!oBindingInfo.templateShareable && oBindingInfo.template.destroy) {
                oBindingInfo.template.destroy();
            }
            if (oBindingInfo.templateShareable === MAYBE_SHAREABLE_OR_NOT) {
                oBindingInfo.template._sapui_candidateForDestroy = true;
            }
        }
        if (this._observer) {
            this._observer.bindingChange(this, sName, 'remove', this.mBindingInfos[sName], 'aggregation');
        }
        delete this.mBindingInfos[sName];
        if (!bSuppressReset) {
            this[oAggregationInfo._sDestructor]();
        }
    }
    return this;
};
ManagedObject.prototype.updateAggregation = function (sName) {
    var oBindingInfo = this.mBindingInfos[sName], oBinding = oBindingInfo.binding, fnFactory = oBindingInfo.factory, oAggregationInfo = this.getMetadata().getAggregation(sName), sGroup, bGrouped, aContexts, sGroupFunction = oAggregationInfo._sMutator + 'Group', that = this;
    function getIdSuffix(oControl, iIndex) {
        if (that.bUseExtendedChangeDetection) {
            return ManagedObjectMetadata.uid('clone');
        } else {
            return oControl.getId() + '-' + iIndex;
        }
    }
    function update(oControl, aContexts, fnBefore, fnAfter) {
        var aChildren = oControl[oAggregationInfo._sGetter]() || [], oContext, oClone;
        if (aChildren.length > aContexts.length) {
            for (var i = aContexts.length; i < aChildren.length; i++) {
                oClone = aChildren[i];
                oControl[oAggregationInfo._sRemoveMutator](oClone);
                oClone.destroy('KeepDom');
            }
        }
        for (var i = 0; i < aContexts.length; i++) {
            oContext = aContexts[i];
            oClone = aChildren[i];
            if (fnBefore) {
                fnBefore(oContext);
            }
            if (oClone) {
                oClone.setBindingContext(oContext, oBindingInfo.model);
            } else {
                oClone = fnFactory(getIdSuffix(oControl, i), oContext);
                oClone.setBindingContext(oContext, oBindingInfo.model);
                oControl[oAggregationInfo._sMutator](oClone);
            }
            if (fnAfter) {
                fnAfter(oContext, oClone);
            }
        }
    }
    function updateDiff(oControl, aContexts) {
        var aDiff = aContexts.diff, aChildren = oControl[oAggregationInfo._sGetter]() || [], oDiff, oClone, oContext, i;
        if (!aDiff || aChildren.length === 0) {
            update(oControl, aContexts);
            return;
        }
        for (i = 0; i < aDiff.length; i++) {
            oDiff = aDiff[i];
            switch (oDiff.type) {
            case 'insert':
                oContext = aContexts[oDiff.index];
                oClone = fnFactory(getIdSuffix(oControl, oDiff.index), oContext);
                oClone.setBindingContext(oContext, oBindingInfo.model);
                oControl[oAggregationInfo._sInsertMutator](oClone, oDiff.index);
                break;
            case 'delete':
                oClone = oControl[oAggregationInfo._sRemoveMutator](oDiff.index);
                oClone.destroy('KeepDom');
                break;
            default:
                Log.error('Unknown diff type "' + oDiff.type + '"');
            }
        }
        aChildren = oControl[oAggregationInfo._sGetter]() || [];
        for (i = 0; i < aChildren.length; i++) {
            aChildren[i].setBindingContext(aContexts[i]);
        }
    }
    function updateGroup(oContext) {
        var oNewGroup = oBinding.getGroup(oContext);
        if (oNewGroup.key !== sGroup) {
            var oGroupHeader;
            if (oBindingInfo.groupHeaderFactory) {
                oGroupHeader = oBindingInfo.groupHeaderFactory(oNewGroup);
            }
            that[sGroupFunction](oNewGroup, oGroupHeader);
            sGroup = oNewGroup.key;
        }
    }
    function updateRecursive(oControl, oContexts) {
        update(oControl, oContexts, null, function (oContext, oClone) {
            updateRecursive(oClone, oBinding.getNodeContexts(oContext));
        });
    }
    if (BaseObject.isA(oBinding, 'sap.ui.model.ListBinding')) {
        aContexts = oBinding.getContexts(oBindingInfo.startIndex, oBindingInfo.length);
        bGrouped = oBinding.isGrouped() && that[sGroupFunction];
        if (bGrouped || oBinding.bWasGrouped) {
            this[oAggregationInfo._sDestructor]();
            update(this, aContexts, bGrouped ? updateGroup : undefined);
        } else if (this.bUseExtendedChangeDetection) {
            updateDiff(this, aContexts);
        } else {
            if (!oBindingInfo.template) {
                this[oAggregationInfo._sDestructor]();
            }
            update(this, aContexts);
        }
        oBinding.bWasGrouped = bGrouped;
    } else if (BaseObject.isA(oBinding, 'sap.ui.model.TreeBinding')) {
        if (!oBindingInfo.template) {
            this[oAggregationInfo._sDestructor]();
        }
        updateRecursive(this, oBinding.getRootContexts());
    }
};
ManagedObject.prototype.refreshAggregation = function (sName) {
    var oBindingInfo = this.mBindingInfos[sName], oBinding = oBindingInfo.binding;
    oBinding.getContexts(oBindingInfo.startIndex, oBindingInfo.length);
};
ManagedObject.prototype.propagateMessages = function (sName, aMessages) {
    Log.warning('Message for ' + this + ', Property ' + sName);
};
ManagedObject.prototype.isTreeBinding = function (sName) {
    return false;
};
ManagedObject.prototype.updateBindings = function (bUpdateAll, sModelName) {
    var that = this, sName, oBindingInfo;
    function becameInvalid(oBindingInfo) {
        var aParts = oBindingInfo.parts, i;
        if (aParts) {
            if (aParts.length == 1) {
                return (bUpdateAll || aParts[0].model == sModelName) && !oBindingInfo.binding.updateRequired(that.getModel(aParts[0].model));
            } else {
                for (i = 0; i < aParts.length; i++) {
                    if ((bUpdateAll || aParts[i].model == sModelName) && !oBindingInfo.binding.aBindings[i].updateRequired(that.getModel(aParts[i].model))) {
                        return true;
                    }
                }
            }
        } else {
            return (bUpdateAll || oBindingInfo.model == sModelName) && !oBindingInfo.binding.updateRequired(that.getModel(oBindingInfo.model));
        }
    }
    function canCreate(oBindingInfo) {
        var aParts = oBindingInfo.parts, i;
        if (aParts) {
            for (i = 0; i < aParts.length; i++) {
                if (!that.getModel(aParts[i].model)) {
                    return false;
                }
            }
            return true;
        } else {
            return !!that.getModel(oBindingInfo.model);
        }
    }
    function removeBinding(oBindingInfo) {
        if (that.refreshDataState) {
            that.refreshDataState(sName, oBindingInfo.binding.getDataState());
        }
        oBindingInfo.binding.detachChange(oBindingInfo.modelChangeHandler);
        if (oBindingInfo.modelRefreshHandler) {
            oBindingInfo.binding.detachRefresh(oBindingInfo.modelRefreshHandler);
        }
        oBindingInfo.binding.detachEvents(oBindingInfo.events);
        oBindingInfo.binding.destroy();
        delete oBindingInfo.binding;
        delete oBindingInfo.modelChangeHandler;
        delete oBindingInfo.dataStateChangeHandler;
        delete oBindingInfo.modelRefreshHandler;
    }
    for (sName in this.mObjectBindingInfos) {
        oBindingInfo = this.mObjectBindingInfos[sName];
        if (oBindingInfo.binding && becameInvalid(oBindingInfo)) {
            removeBinding(oBindingInfo);
        }
        if (!oBindingInfo.binding && canCreate(oBindingInfo)) {
            this._bindObject(oBindingInfo);
        }
    }
    for (sName in this.mBindingInfos) {
        oBindingInfo = this.mBindingInfos[sName];
        if (oBindingInfo.binding && becameInvalid(oBindingInfo)) {
            if (this._observer) {
                var sMember = oBindingInfo.factory ? 'aggregation' : 'property';
                this._observer.bindingChange(this, sName, 'remove', oBindingInfo, sMember);
            }
            removeBinding(oBindingInfo);
        }
        if (!oBindingInfo.binding && canCreate(oBindingInfo)) {
            if (oBindingInfo.factory) {
                this._bindAggregation(sName, oBindingInfo);
            } else {
                this._bindProperty(sName, oBindingInfo);
            }
        }
    }
};
ManagedObject.prototype.isBound = function (sName) {
    return !!this.getBindingInfo(sName);
};
ManagedObject.prototype.getObjectBinding = function (sModelName) {
    return this.mObjectBindingInfos[sModelName] && this.mObjectBindingInfos[sModelName].binding;
};
ManagedObject.prototype.getEventingParent = function () {
    return this.oParent;
};
ManagedObject.prototype.getBinding = function (sName) {
    var oInfo = this.getBindingInfo(sName);
    return oInfo && oInfo.binding;
};
ManagedObject.prototype.getBindingPath = function (sName) {
    var oInfo = this.getBindingInfo(sName);
    return oInfo && (oInfo.path || oInfo.parts && oInfo.parts[0] && oInfo.parts[0].path);
};
ManagedObject.prototype.setBindingContext = function (oContext, sModelName) {
    assert(sModelName === undefined || typeof sModelName === 'string' && !/^(undefined|null)?$/.test(sModelName), 'sModelName must be a string or omitted');
    var oOldContext = this.oBindingContexts[sModelName];
    if (Context.hasChanged(oOldContext, oContext)) {
        if (oContext === undefined) {
            delete this.oBindingContexts[sModelName];
        } else {
            this.oBindingContexts[sModelName] = oContext;
        }
        this.updateBindingContext(false, sModelName);
        this.propagateProperties(sModelName);
        this.fireModelContextChange();
    }
    return this;
};
ManagedObject.prototype.setElementBindingContext = function (oContext, sModelName) {
    assert(sModelName === undefined || typeof sModelName === 'string' && !/^(undefined|null)?$/.test(sModelName), 'sModelName must be a string or omitted');
    var oOldContext = this.mElementBindingContexts[sModelName];
    if (Context.hasChanged(oOldContext, oContext)) {
        if (oContext === undefined) {
            delete this.mElementBindingContexts[sModelName];
        } else {
            this.mElementBindingContexts[sModelName] = oContext;
        }
        this.updateBindingContext(true, sModelName);
        this.propagateProperties(sModelName);
        this.fireModelContextChange();
    }
    return this;
};
ManagedObject.prototype.updateBindingContext = function (bSkipLocal, sFixedModelName, bUpdateAll) {
    var oModel, oModelNames = {}, sModelName, oContext, sName, oBindingInfo, i;
    if (bUpdateAll) {
        for (sModelName in this.oModels) {
            if (this.oModels.hasOwnProperty(sModelName)) {
                oModelNames[sModelName] = sModelName;
            }
        }
        for (sModelName in this.oPropagatedProperties.oModels) {
            if (this.oPropagatedProperties.oModels.hasOwnProperty(sModelName)) {
                oModelNames[sModelName] = sModelName;
            }
        }
    } else {
        oModelNames[sFixedModelName] = sFixedModelName;
    }
    for (sModelName in oModelNames) {
        if (oModelNames.hasOwnProperty(sModelName)) {
            sModelName = sModelName === 'undefined' ? undefined : sModelName;
            oModel = this.getModel(sModelName);
            oBindingInfo = this.mObjectBindingInfos[sModelName];
            if (oModel && oBindingInfo && !bSkipLocal) {
                if (!oBindingInfo.binding) {
                    this._bindObject(oBindingInfo);
                } else {
                    oContext = this._getBindingContext(sModelName);
                    if (Context.hasChanged(oBindingInfo.binding.getContext(), oContext)) {
                        oBindingInfo.binding.setContext(oContext);
                    }
                }
                continue;
            }
            oContext = this.getBindingContext(sModelName);
            for (sName in this.mBindingInfos) {
                var oBindingInfo = this.mBindingInfos[sName], oBinding = oBindingInfo.binding, aParts = oBindingInfo.parts;
                if (!oBinding) {
                    continue;
                }
                if (aParts && aParts.length > 1) {
                    for (i = 0; i < aParts.length; i++) {
                        if (aParts[i].model == sModelName) {
                            oBinding.aBindings[i].setContext(oContext);
                        }
                    }
                } else if (oBindingInfo.factory) {
                    if (oBindingInfo.model == sModelName) {
                        oBinding.setContext(oContext);
                    }
                } else {
                    if (aParts[0].model == sModelName) {
                        oBinding.setContext(oContext);
                    }
                }
            }
        }
    }
};
ManagedObject.prototype.getBindingContext = function (sModelName) {
    var oModel = this.getModel(sModelName), oElementBindingContext = this.mElementBindingContexts[sModelName];
    if (oElementBindingContext && !oModel) {
        return oElementBindingContext;
    } else if (oElementBindingContext && oModel && oElementBindingContext.getModel() === oModel) {
        return oElementBindingContext;
    } else if (oElementBindingContext === null) {
        return oElementBindingContext;
    } else {
        return this._getBindingContext(sModelName);
    }
};
ManagedObject.prototype._getBindingContext = function (sModelName) {
    var oModel = this.getModel(sModelName), oContext = this.oBindingContexts[sModelName], oPropagatedContext = this.oPropagatedProperties.oBindingContexts[sModelName];
    if (oContext && !oModel) {
        return this.oBindingContexts[sModelName];
    } else if (oContext && oModel && oContext.getModel() === oModel) {
        return this.oBindingContexts[sModelName];
    } else if (oContext === null) {
        return oContext;
    } else if (oPropagatedContext && oModel && oPropagatedContext.getModel() !== oModel) {
        return undefined;
    } else {
        return oPropagatedContext;
    }
};
ManagedObject.prototype.setModel = function (oModel, sName) {
    assert(oModel == null || BaseObject.isA(oModel, 'sap.ui.model.Model'), 'oModel must be an instance of sap.ui.model.Model, null or undefined');
    assert(sName === undefined || typeof sName === 'string' && !/^(undefined|null)?$/.test(sName), 'sName must be a string or omitted');
    if (!oModel && this.oModels[sName]) {
        delete this.oModels[sName];
        this.propagateProperties(sName);
        this.updateBindings(false, sName);
        this.fireModelContextChange();
    } else if (oModel && oModel !== this.oModels[sName]) {
        this.oModels[sName] = oModel;
        this.propagateProperties(sName);
        this.updateBindingContext(false, sName);
        this.updateBindings(false, sName);
        this.fireModelContextChange();
    }
    return this;
};
ManagedObject.prototype.addPropagationListener = function (listener) {
    assert(typeof listener === 'function', 'listener must be a function');
    this.aPropagationListeners.push(listener);
    this.propagateProperties(false);
    this._callPropagationListener(listener);
    return this;
};
ManagedObject.prototype.removePropagationListener = function (listener) {
    assert(typeof listener === 'function', 'listener must be a function');
    var aListeners = this.aPropagationListeners;
    var i = aListeners.indexOf(listener);
    if (i >= 0) {
        aListeners.splice(i, 1);
        this.propagateProperties(false);
    }
    return this;
};
ManagedObject.prototype.getPropagationListeners = function () {
    return this.oPropagatedProperties.aPropagationListeners.concat(this.aPropagationListeners);
};
ManagedObject.prototype._callPropagationListener = function (listener) {
    var aListeners;
    if (listener) {
        listener(this);
    } else {
        aListeners = this.getPropagationListeners();
        for (var i = 0; i < aListeners.length; i++) {
            listener = aListeners[i];
            listener(this);
        }
    }
    return this;
};
ManagedObject._oEmptyPropagatedProperties = {
    oModels: {},
    oBindingContexts: {},
    aPropagationListeners: []
};
var fnObjectAssign = Object.assign || jQuery.extend;
function _hasAsRealChild(oParent, oChild) {
    return !oChild.aAPIParentInfos || oChild.aAPIParentInfos[0].parent === oParent;
}
ManagedObject.prototype.propagateProperties = function (vName) {
    var oProperties = this._getPropertiesToPropagate(), bUpdateAll = vName === true, bUpdateListener = vName === false, sName = bUpdateAll ? undefined : vName, sAggregationName, oAggregation, i, mAllAggregations = fnObjectAssign({}, this.mAggregations, this.mForwardedAggregations);
    for (sAggregationName in mAllAggregations) {
        if (this.mSkipPropagation[sAggregationName]) {
            continue;
        }
        oAggregation = mAllAggregations[sAggregationName];
        if (oAggregation instanceof ManagedObject) {
            if (_hasAsRealChild(this, oAggregation)) {
                this._propagateProperties(vName, oAggregation, oProperties, bUpdateAll, sName, bUpdateListener);
            }
        } else if (oAggregation instanceof Array) {
            for (i = 0; i < oAggregation.length; i++) {
                if (oAggregation[i] instanceof ManagedObject) {
                    if (_hasAsRealChild(this, oAggregation[i])) {
                        this._propagateProperties(vName, oAggregation[i], oProperties, bUpdateAll, sName, bUpdateListener);
                    }
                }
            }
        }
    }
};
ManagedObject.prototype._propagateProperties = function (vName, oObject, oProperties, bUpdateAll, sName, bUpdateListener) {
    if (!oProperties) {
        oProperties = this._getPropertiesToPropagate();
        bUpdateAll = vName === true;
        bUpdateListener = vName === false;
        sName = bUpdateAll ? undefined : vName;
    }
    if (oObject.oPropagatedProperties !== oProperties) {
        oObject.oPropagatedProperties = oProperties;
        if (bUpdateListener !== true) {
            oObject.updateBindings(bUpdateAll, sName);
            oObject.updateBindingContext(false, sName, bUpdateAll);
        }
        oObject.propagateProperties(vName);
        if (bUpdateListener || bUpdateAll) {
            oObject._callPropagationListener();
        }
        oObject.fireModelContextChange();
    }
};
ManagedObject.prototype._getPropertiesToPropagate = function () {
    var bNoOwnModels = jQuery.isEmptyObject(this.oModels), bNoOwnContexts = jQuery.isEmptyObject(this.oBindingContexts), bNoOwnListeners = this.aPropagationListeners.length === 0, bNoOwnElementContexts = jQuery.isEmptyObject(this.mElementBindingContexts);
    function merge(empty, o1, o2, o3) {
        return empty ? o1 : jQuery.extend({}, o1, o2, o3);
    }
    function concat(empty, a1, a2) {
        return empty ? a1 : a1.concat(a2);
    }
    if (bNoOwnContexts && bNoOwnModels && bNoOwnElementContexts && bNoOwnListeners) {
        return this.oPropagatedProperties;
    } else {
        return {
            oModels: merge(bNoOwnModels, this.oPropagatedProperties.oModels, this.oModels),
            oBindingContexts: merge(bNoOwnContexts && bNoOwnElementContexts, this.oPropagatedProperties.oBindingContexts, this.oBindingContexts, this.mElementBindingContexts),
            aPropagationListeners: concat(bNoOwnListeners, this.oPropagatedProperties.aPropagationListeners, this.aPropagationListeners)
        };
    }
};
ManagedObject.prototype.getModel = function (sModelName) {
    assert(sModelName === undefined || typeof sModelName === 'string' && !/^(undefined|null)?$/.test(sModelName), 'sModelName must be a string or omitted');
    return this.oModels[sModelName] || this.oPropagatedProperties.oModels[sModelName];
};
ManagedObject.prototype.hasModel = function () {
    return !(jQuery.isEmptyObject(this.oModels) && jQuery.isEmptyObject(this.oPropagatedProperties.oModels));
};
ManagedObject.prototype.clone = function (sIdSuffix, aLocalIds, oOptions) {
    var bCloneChildren = true, bCloneBindings = true;
    if (oOptions) {
        bCloneChildren = !!oOptions.cloneChildren;
        bCloneBindings = !!oOptions.cloneBindings;
    }
    if (!sIdSuffix) {
        sIdSuffix = ManagedObjectMetadata.uid('clone') || uid();
    }
    if (!aLocalIds && bCloneChildren) {
        aLocalIds = this.findAggregatedObjects(true).map(function (oObject) {
            return oObject.getId();
        });
    }
    var oMetadata = this.getMetadata(), oClass = oMetadata._oClass, sId = this.getId() + '-' + sIdSuffix, mSettings = {}, oProperty, mProps = this.mProperties, sKey, sName, oClone, escape = ManagedObject.bindingParser.escape, i, oTarget;
    var aKeys = Object.keys(mProps);
    i = aKeys.length;
    while (i > 0) {
        sKey = aKeys[--i];
        oProperty = oMetadata.getProperty(sKey);
        if (oProperty && !(this.isBound(sKey) && bCloneBindings)) {
            if (typeof mProps[sKey] === 'string') {
                mSettings[sKey] = escape(mProps[sKey]);
            } else {
                mSettings[sKey] = oProperty.byValue ? deepClone(mProps[sKey]) : mProps[sKey];
            }
        }
    }
    mSettings['models'] = this.oModels;
    mSettings['bindingContexts'] = this.oBindingContexts;
    if (bCloneChildren) {
        var mAggregationsToClone = fnObjectAssign({}, this.mAggregations, this.mForwardedAggregations);
        for (sName in mAggregationsToClone) {
            var oAggregation = mAggregationsToClone[sName];
            if (oMetadata.hasAggregation(sName) && !(this.isBound(sName) && bCloneBindings)) {
                if (oAggregation instanceof ManagedObject) {
                    mSettings[sName] = oAggregation.clone(sIdSuffix, aLocalIds);
                } else if (Array.isArray(oAggregation)) {
                    mSettings[sName] = [];
                    for (var i = 0; i < oAggregation.length; i++) {
                        mSettings[sName].push(oAggregation[i].clone(sIdSuffix, aLocalIds));
                    }
                } else {
                    mSettings[sName] = oAggregation;
                }
            }
        }
        var aInactiveChildren = getStashedControls(this.getId());
        for (var i = 0, l = aInactiveChildren.length; i < l; i++) {
            var oClonedChild = aInactiveChildren[i].clone(sIdSuffix);
            oClonedChild.sParentId = sId;
            oClonedChild.sParentAggregationName = aInactiveChildren[i].sParentAggregationName;
        }
        for (sName in this.mAssociations) {
            if (!oMetadata.hasAssociation(sName)) {
                continue;
            }
            var oAssociation = this.mAssociations[sName];
            if (Array.isArray(oAssociation)) {
                oAssociation = oAssociation.slice(0);
                for (var i = 0; i < oAssociation.length; i++) {
                    if (aLocalIds.indexOf(oAssociation[i]) >= 0) {
                        oAssociation[i] += '-' + sIdSuffix;
                    }
                }
            } else if (aLocalIds.indexOf(oAssociation) >= 0) {
                oAssociation += '-' + sIdSuffix;
            }
            mSettings[sName] = oAssociation;
        }
    }
    oClone = new oClass(sId, mSettings);
    function cloneBinding(oSource, sName, oClone, sTargetName) {
        var oBindingInfo = oSource.mBindingInfos[sName];
        oBindingInfo = oBindingInfo || oSource.getBindingInfo(sName);
        var oCloneBindingInfo = jQuery.extend({}, oBindingInfo);
        if (!oBindingInfo.templateShareable && oBindingInfo.template && oBindingInfo.template.clone) {
            oCloneBindingInfo.template = oBindingInfo.template.clone(sIdSuffix, aLocalIds);
            delete oCloneBindingInfo.factory;
        } else if (oBindingInfo.templateShareable === MAYBE_SHAREABLE_OR_NOT) {
            oBindingInfo.templateShareable = oCloneBindingInfo.templateShareable = true;
            Log.error('During a clone operation, a template was found that neither was marked with \'templateShareable:true\' nor \'templateShareable:false\'. ' + 'The framework won\'t destroy the template. This could cause errors (e.g. duplicate IDs) or memory leaks ' + '(The template is used in aggregation \'' + sName + '\' of object \'' + oSource.getId() + '\').' + 'For more information, see documentation under \'Aggregation Binding\'.');
        }
        delete oCloneBindingInfo.binding;
        delete oCloneBindingInfo.modelChangeHandler;
        delete oCloneBindingInfo.dataStateChangeHandler;
        delete oCloneBindingInfo.modelRefreshHandler;
        if (oBindingInfo.factory || oBindingInfo.template) {
            oClone.bindAggregation(sTargetName, oCloneBindingInfo);
        } else {
            oClone.bindProperty(sTargetName, oCloneBindingInfo);
        }
    }
    for (sName in this.mObjectBindingInfos) {
        oClone.mObjectBindingInfos[sName] = jQuery.extend({}, this.mObjectBindingInfos[sName]);
    }
    for (sName in this.mEventRegistry) {
        oClone.mEventRegistry[sName] = this.mEventRegistry[sName].slice();
    }
    if (bCloneBindings) {
        for (sName in this.mBindingInfos) {
            cloneBinding(this, sName, oClone, sName);
        }
    }
    if (ManagedObject._supportInfo) {
        ManagedObject._supportInfo.addSupportInfo(oClone.getId(), ManagedObject._supportInfo.byId(this.getId()));
    }
    if (this._cloneMetadataContexts) {
        this._cloneMetadataContexts(oClone);
    }
    if (this.mForwardedAggregations) {
        for (sName in this.mForwardedAggregations) {
            var oForwarder = oClone.getMetadata().getAggregationForwarder(sName);
            if (oForwarder) {
                oTarget = oForwarder.getTarget(oClone, true);
                if (oForwarder.forwardBinding && this.isBound(sName)) {
                    cloneBinding(this, sName, oTarget, oForwarder.targetAggregationName);
                }
            }
        }
    }
    return oClone;
};
ManagedObject._handleLocalizationChange = function (iPhase) {
    var i;
    if (iPhase === 1) {
        jQuery.each(this.oModels, function (sName, oModel) {
            if (oModel && oModel._handleLocalizationChange) {
                oModel._handleLocalizationChange();
            }
        });
    } else if (iPhase === 2) {
        jQuery.each(this.mBindingInfos, function (sName, oBindingInfo) {
            var aParts = oBindingInfo.parts;
            if (aParts) {
                for (i = 0; i < aParts.length; i++) {
                    if (oBindingInfo.type && oBindingInfo.type._handleLocalizationChange) {
                        oBindingInfo.type._handleLocalizationChange();
                    }
                }
                if (oBindingInfo.modelChangeHandler) {
                    oBindingInfo.modelChangeHandler();
                }
            }
        });
    }
};
ManagedObject.prototype.findAggregatedObjects = function (bRecursive, fnCondition) {
    var aAggregatedObjects = [];
    if (fnCondition && typeof fnCondition !== 'function') {
        fnCondition = null;
    }
    function fnFindObjects(oObject) {
        var a, i, n;
        for (n in oObject.mAggregations) {
            a = oObject.mAggregations[n];
            if (Array.isArray(a)) {
                for (i = 0; i < a.length; i++) {
                    if (!fnCondition || fnCondition(a[i])) {
                        aAggregatedObjects.push(a[i]);
                    }
                    if (bRecursive) {
                        fnFindObjects(a[i]);
                    }
                }
            } else if (a instanceof ManagedObject) {
                if (!fnCondition || fnCondition(a)) {
                    aAggregatedObjects.push(a);
                }
                if (bRecursive) {
                    fnFindObjects(a);
                }
            }
        }
    }
    fnFindObjects(this);
    return aAggregatedObjects;
};
ManagedObject._defaultContextualSettings = {};
export default ManagedObject;