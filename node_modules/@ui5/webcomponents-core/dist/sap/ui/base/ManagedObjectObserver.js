import BaseObject from './Object.js';
import ManagedObject from './ManagedObject.js';
import EventProvider from './EventProvider.js';
import uniqueSort from '../../base/util/array/uniqueSort.js';
import jQuery from '../thirdparty/jquery.js';
var ManagedObjectObserver = BaseObject.extend('sap.ui.base.ManagedObjectObserver', {
    constructor: function (fnCallback) {
        if (!fnCallback && typeof fnCallback !== 'function') {
            throw new Error('Missing callback function in ManagedObjectObserver constructor');
        }
        this._fnCallback = fnCallback;
    }
});
ManagedObjectObserver.prototype.observe = function (oObject, oConfiguration) {
    if (!(oObject instanceof ManagedObject)) {
        if (oObject == null) {
            return;
        }
        throw new TypeError('ManagedObjectObserver can only handle ManagedObjects, but observe was called for ' + oObject);
    }
    normalizeConfiguration(oObject, oConfiguration);
    create(oObject, this, oConfiguration);
};
ManagedObjectObserver.prototype.unobserve = function (oObject, oConfiguration) {
    if (!(oObject instanceof ManagedObject)) {
        if (oObject == null) {
            return;
        }
        throw new TypeError('ManagedObjectObserver can only handle ManagedObjects, but unobserve was called for ' + oObject);
    }
    if (oConfiguration) {
        normalizeConfiguration(oObject, oConfiguration);
    }
    remove(oObject, this, oConfiguration);
};
ManagedObjectObserver.prototype.isObserved = function (oObject, oConfiguration) {
    if (!(oObject instanceof ManagedObject)) {
        if (oObject == null) {
            return false;
        }
        throw new TypeError('ManagedObjectObserver can only handle ManagedObjects, but isObserved was called for ' + oObject);
    }
    return isObjectObserved(oObject, this, oConfiguration);
};
ManagedObjectObserver.prototype.disconnect = function () {
    destroy(this);
};
ManagedObjectObserver.prototype.getConfiguration = function (oObject) {
    return getConfiguration(oObject, this);
};
var Observer = {}, mTargets = Object.create(null);
Observer.propertyChange = function (oManagedObject, sName, vOld, vNew) {
    handleChange('properties', oManagedObject, sName, function () {
        return {
            type: 'property',
            old: vOld,
            current: vNew
        };
    });
};
Observer.aggregationChange = function (oManagedObject, sName, sMutation, vObjects) {
    handleChange('aggregations', oManagedObject, sName, function () {
        return {
            type: 'aggregation',
            mutation: sMutation,
            children: Array.isArray(vObjects) ? vObjects : null,
            child: !Array.isArray(vObjects) ? vObjects : null
        };
    });
};
Observer.associationChange = function (oManagedObject, sName, sMutation, vIds) {
    handleChange('associations', oManagedObject, sName, function () {
        return {
            type: 'association',
            mutation: sMutation,
            ids: vIds
        };
    });
};
Observer.eventChange = function (oManagedObject, sName, sMutation, vListener, fnFunc, oData) {
    handleChange('events', oManagedObject, sName, function () {
        return {
            type: 'event',
            mutation: sMutation,
            listener: vListener,
            func: fnFunc,
            data: oData
        };
    });
};
Observer.bindingChange = function (oManagedObject, sName, sMutation, oBindingInfo, sMemberType) {
    handleChange('bindings', oManagedObject, sName, function () {
        return {
            type: 'binding',
            mutation: sMutation,
            bindingInfo: oBindingInfo,
            memberType: sMemberType
        };
    });
};
Observer.objectDestroyed = function (oManagedObject) {
    handleChange('destroy', oManagedObject, null, function () {
        return { type: 'destroy' };
    });
    var sId = oManagedObject.getId();
    if (mTargets[sId]) {
        oManagedObject.detachEvent('EventHandlerChange', fnHandleEventChange);
        delete mTargets[sId];
    }
    delete oManagedObject._observer;
};
function handleChange(sType, oObject, sName, fnCreateChange) {
    var sId = oObject.getId(), oTargetConfig = mTargets[sId];
    if (oTargetConfig) {
        var oChange;
        for (var i = 0; i < oTargetConfig.listeners.length; i++) {
            if (isObserving(oTargetConfig.configurations[i], sType, sName)) {
                if (!oChange) {
                    oChange = fnCreateChange();
                    oChange.name = sName;
                    oChange.object = oObject;
                }
                var oListener = oTargetConfig.listeners[i];
                oListener._fnCallback(oChange);
            }
        }
    }
}
function isObserving(oConfiguration, sType, sName) {
    if (oConfiguration == null || !sType) {
        return false;
    }
    if (sType != 'destroy' && !sName) {
        return false;
    }
    return oConfiguration[sType] === true || Array.isArray(oConfiguration[sType]) && oConfiguration[sType].indexOf(sName) > -1;
}
function create(oTarget, oListener, oConfiguration) {
    updateConfiguration(oTarget, oListener, oConfiguration, false);
}
function getConfiguration(oTarget, oListener) {
    var sId = oTarget.getId();
    var oTargetConfig = mTargets[sId];
    if (oTargetConfig && oTargetConfig.listeners) {
        var iIndex = oTargetConfig.listeners.indexOf(oListener);
        if (iIndex >= 0) {
            var oConfiguration = jQuery.extend(true, {}, oTargetConfig.configurations[iIndex]);
            return oConfiguration;
        }
    }
    return null;
}
function remove(oTarget, oListener, oConfiguration) {
    oConfiguration = oConfiguration || getConfiguration(oTarget, oListener);
    updateConfiguration(oTarget, oListener, oConfiguration, true);
}
function isObjectObserved(oTarget, oListener, oConfiguration) {
    var sId = oTarget.getId(), oTargetConfig = mTargets[sId];
    oConfiguration = oConfiguration || getConfiguration(oTarget, oListener);
    if (!oTargetConfig) {
        return false;
    }
    var iIndex = oTargetConfig.listeners.indexOf(oListener);
    if (iIndex === -1) {
        return false;
    } else {
        return isSubArray(oTargetConfig.configurations[iIndex].properties, oConfiguration.properties) && isSubArray(oTargetConfig.configurations[iIndex].aggregations, oConfiguration.aggregations) && isSubArray(oTargetConfig.configurations[iIndex].associations, oConfiguration.associations) && isSubArray(oTargetConfig.configurations[iIndex].bindings, oConfiguration.bindings) && isSubArray(oTargetConfig.configurations[iIndex].events, oConfiguration.events) && isBooleanEqual(oTargetConfig.configurations[iIndex].destroy, oConfiguration.destroy);
    }
}
function destroy(oListener) {
    for (var n in mTargets) {
        var oTargetConfig = mTargets[n];
        for (var i = 0; i < oTargetConfig.listeners.length; i++) {
            if (oTargetConfig.listeners[i] === oListener) {
                oTargetConfig.listeners.splice(i, 1);
                oTargetConfig.configurations.splice(i, 1);
            }
        }
        if (oTargetConfig.listeners && oTargetConfig.listeners.length === 0) {
            delete mTargets[n];
            oTargetConfig.object._observer = undefined;
        }
    }
}
function updateConfiguration(oTarget, oListener, oConfiguration, bRemove) {
    var sId = oTarget.getId(), oTargetConfig = mTargets[sId], oCurrentConfig, iIndex;
    if (bRemove) {
        if (!oTargetConfig) {
            return;
        }
        iIndex = oTargetConfig.listeners.indexOf(oListener);
        if (iIndex >= 0) {
            oCurrentConfig = oTargetConfig.configurations[iIndex];
        }
    } else {
        if (!oTargetConfig) {
            oTargetConfig = mTargets[sId] = {
                listeners: [],
                configurations: [],
                object: oTarget
            };
        }
        iIndex = oTargetConfig.listeners.indexOf(oListener);
        if (iIndex === -1) {
            oTargetConfig.listeners.push(oListener);
            oTargetConfig.configurations.push(oConfiguration);
        } else {
            oCurrentConfig = oTargetConfig.configurations[iIndex];
        }
    }
    if (oCurrentConfig) {
        oCurrentConfig.properties = oCurrentConfig.properties || [];
        updateSingleArray(oCurrentConfig.properties, oConfiguration.properties, bRemove);
        oCurrentConfig.aggregations = oCurrentConfig.aggregations || [];
        updateSingleArray(oCurrentConfig.aggregations, oConfiguration.aggregations, bRemove);
        oCurrentConfig.associations = oCurrentConfig.associations || [];
        updateSingleArray(oCurrentConfig.associations, oConfiguration.associations, bRemove);
        oCurrentConfig.bindings = oCurrentConfig.bindings || [];
        updateSingleArray(oCurrentConfig.bindings, oConfiguration.bindings, bRemove);
        oCurrentConfig.events = oCurrentConfig.events || [];
        updateSingleArray(oCurrentConfig.events, oConfiguration.events, bRemove);
        if (oConfiguration.destroy != null) {
            if (bRemove) {
                delete oCurrentConfig.destroy;
            } else {
                oCurrentConfig.destroy = oConfiguration.destroy;
            }
        }
    }
    var bEventsObserved = hasObserverFor(oTarget, 'events');
    if (oTarget._observer && bRemove) {
        if (!bEventsObserved && EventProvider.hasListener(oTarget, 'EventHandlerChange', fnHandleEventChange)) {
            oTarget.detachEvent('EventHandlerChange', fnHandleEventChange);
        }
        if (!bEventsObserved && !hasObserverFor(oTarget, 'properties') && !hasObserverFor(oTarget, 'aggregations') && !hasObserverFor(oTarget, 'associations') && !hasObserverFor(oTarget, 'destroy') && !hasObserverFor(oTarget, 'bindings')) {
            delete oTarget._observer;
            delete mTargets[sId];
        }
    } else if (!oTarget._observer && !bRemove) {
        if (bEventsObserved && !EventProvider.hasListener(oTarget, 'EventHandlerChange', fnHandleEventChange)) {
            oTarget.attachEvent('EventHandlerChange', fnHandleEventChange);
        }
        oTarget._observer = Observer;
    }
}
function hasObserverFor(oTarget, sType) {
    var sId = oTarget.getId(), oTargetConfig = mTargets[sId];
    if (oTargetConfig) {
        var aConfigs = oTargetConfig.configurations.filter(function (oEntry) {
            return oEntry.hasOwnProperty(sType) && oEntry[sType] && (oEntry[sType] === true || oEntry[sType].length > 0);
        });
        return aConfigs.length > 0;
    }
    return false;
}
function fnHandleEventChange(oEvent) {
    var oTarget = oEvent.getSource(), sEventId = oEvent.mParameters.EventId;
    if (oTarget.getMetadata().hasEvent(sEventId)) {
        if (oEvent.mParameters.type === 'listenerAttached') {
            Observer.eventChange(oTarget, sEventId, 'insert', oEvent.mParameters.listener, oEvent.mParameters.func, oEvent.mParameters.data);
        } else if (oEvent.mParameters.type === 'listenerDetached') {
            Observer.eventChange(oTarget, sEventId, 'remove', oEvent.mParameters.listener, oEvent.mParameters.func, oEvent.mParameters.data);
        }
    }
}
function updateSingleArray(aOrig, aAdditional, bRemove) {
    if (!aAdditional) {
        return;
    }
    for (var i = 0; i < aAdditional.length; i++) {
        var iIndex = aOrig.indexOf(aAdditional[i]);
        if (iIndex > -1 && bRemove) {
            aOrig.splice(iIndex, 1);
        } else if (iIndex === -1 && !bRemove) {
            aOrig.push(aAdditional[i]);
        }
    }
}
function isSubArray(aFullArray, aSubArray) {
    if (!Array.isArray(aSubArray) || aSubArray.length == 0) {
        return true;
    }
    if (!Array.isArray(aFullArray) || aFullArray.length == 0) {
        return false;
    }
    var aUnion = uniqueSort(aFullArray.concat(aSubArray));
    return aFullArray.length === aUnion.length;
}
function isBooleanEqual(bOriginal, bCompare) {
    if (bCompare == null) {
        return true;
    }
    return bOriginal === bCompare;
}
function normalizeConfiguration(oObject, oConfiguration) {
    var oMetadata = oObject.getMetadata(), aProperties = Object.keys(oMetadata.getAllProperties()), aAggregations = Object.keys(oMetadata.getAllAggregations()), aAssociations = Object.keys(oMetadata.getAllAssociations()), aBindings = uniqueSort(aProperties.concat(aAggregations)), aEvents = Object.keys(oMetadata.getAllEvents());
    oConfiguration.properties = oConfiguration.properties === true ? aProperties : oConfiguration.properties;
    oConfiguration.aggregations = oConfiguration.aggregations === true ? aAggregations : oConfiguration.aggregations;
    oConfiguration.associations = oConfiguration.associations === true ? aAssociations : oConfiguration.associations;
    oConfiguration.bindings = oConfiguration.bindings === true ? aBindings : oConfiguration.bindings;
    oConfiguration.events = oConfiguration.events === true ? aEvents : oConfiguration.events;
    oConfiguration.destroy = oConfiguration.destroy == null ? false : oConfiguration.destroy;
}
export default ManagedObjectObserver;