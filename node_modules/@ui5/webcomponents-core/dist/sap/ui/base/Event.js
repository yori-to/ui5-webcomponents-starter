import BaseObject from './Object.js';
import assert from '../../base/assert.js';
var Event = BaseObject.extend('sap.ui.base.Event', {
    constructor: function (sId, oSource, mParameters) {
        BaseObject.apply(this);
        if (arguments.length > 0) {
            this.init(sId, oSource, mParameters);
        }
    }
});
Event.prototype.init = function (sId, oSource, mParameters) {
    assert(typeof sId === 'string', 'Event.init: sId must be a string');
    assert(sap.ui.require('sap/ui/base/EventProvider') && oSource instanceof sap.ui.require('sap/ui/base/EventProvider'), 'Event.init: oSource must be an EventProvider');
    this.sId = sId;
    this.oSource = oSource;
    this.mParameters = mParameters || {};
    this.bCancelBubble = false;
    this.bPreventDefault = false;
};
Event.prototype.reset = function () {
    this.sId = '';
    this.oSource = null;
    this.mParameters = null;
    this.bCancelBubble = false;
    this.bPreventDefault = false;
};
Event.prototype.getId = function () {
    return this.sId;
};
Event.prototype.getSource = function () {
    return this.oSource;
};
Event.prototype.getParameters = function () {
    return this.mParameters;
};
Event.prototype.getParameter = function (sName) {
    assert(typeof sName === 'string' && sName, 'Event.getParameter: sName must be a non-empty string');
    return this.mParameters[sName];
};
Event.prototype.cancelBubble = function () {
    this.bCancelBubble = true;
};
Event.prototype.preventDefault = function () {
    this.bPreventDefault = true;
};
export default Event;