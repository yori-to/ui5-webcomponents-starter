import Event from './Event.js';
import BaseObject from './Object.js';
import ObjectPool from './ObjectPool.js';
import assert from '../../base/assert.js';
var EventProvider = BaseObject.extend('sap.ui.base.EventProvider', {
    constructor: function () {
        BaseObject.call(this);
        this.mEventRegistry = {};
    }
});
var EVENT__LISTENERS_CHANGED = 'EventHandlerChange';
EventProvider.M_EVENTS = { EventHandlerChange: EVENT__LISTENERS_CHANGED };
EventProvider.prototype.oEventPool = new ObjectPool(Event);
EventProvider.prototype.attachEvent = function (sEventId, oData, fnFunction, oListener) {
    var mEventRegistry = this.mEventRegistry;
    assert(typeof sEventId === 'string' && sEventId, 'EventProvider.attachEvent: sEventId must be a non-empty string');
    if (typeof oData === 'function') {
        oListener = fnFunction;
        fnFunction = oData;
        oData = undefined;
    }
    assert(typeof fnFunction === 'function', 'EventProvider.attachEvent: fnFunction must be a function');
    assert(!oListener || typeof oListener === 'object', 'EventProvider.attachEvent: oListener must be empty or an object');
    var aEventListeners = mEventRegistry[sEventId];
    if (!Array.isArray(aEventListeners)) {
        aEventListeners = mEventRegistry[sEventId] = [];
    }
    aEventListeners.push({
        oListener: oListener,
        fFunction: fnFunction,
        oData: oData
    });
    if (mEventRegistry[EVENT__LISTENERS_CHANGED]) {
        this.fireEvent(EVENT__LISTENERS_CHANGED, {
            EventId: sEventId,
            type: 'listenerAttached',
            listener: oListener,
            func: fnFunction,
            data: oData
        });
    }
    return this;
};
EventProvider.prototype.attachEventOnce = function (sEventId, oData, fnFunction, oListener) {
    if (typeof oData === 'function') {
        oListener = fnFunction;
        fnFunction = oData;
        oData = undefined;
    }
    assert(typeof fnFunction === 'function', 'EventProvider.attachEventOnce: fnFunction must be a function');
    function fnOnce() {
        this.detachEvent(sEventId, fnOnce);
        fnFunction.apply(oListener || this, arguments);
    }
    this.attachEvent(sEventId, oData, fnOnce, undefined);
    return this;
};
EventProvider.prototype.detachEvent = function (sEventId, fnFunction, oListener) {
    var mEventRegistry = this.mEventRegistry;
    assert(typeof sEventId === 'string' && sEventId, 'EventProvider.detachEvent: sEventId must be a non-empty string');
    assert(typeof fnFunction === 'function', 'EventProvider.detachEvent: fnFunction must be a function');
    assert(!oListener || typeof oListener === 'object', 'EventProvider.detachEvent: oListener must be empty or an object');
    var aEventListeners = mEventRegistry[sEventId];
    if (!Array.isArray(aEventListeners)) {
        return this;
    }
    var oListener;
    for (var i = 0, iL = aEventListeners.length; i < iL; i++) {
        if (aEventListeners[i].fFunction === fnFunction && aEventListeners[i].oListener === oListener) {
            oListener = aEventListeners[i];
            aEventListeners.splice(i, 1);
            break;
        }
    }
    if (aEventListeners.length == 0) {
        delete mEventRegistry[sEventId];
    }
    if (oListener && mEventRegistry[EVENT__LISTENERS_CHANGED]) {
        this.fireEvent(EVENT__LISTENERS_CHANGED, {
            EventId: sEventId,
            type: 'listenerDetached',
            listener: oListener.listener,
            func: oListener.fFunction,
            data: oListener.oData
        });
    }
    return this;
};
EventProvider.prototype.fireEvent = function (sEventId, mParameters, bAllowPreventDefault, bEnableEventBubbling) {
    if (typeof mParameters === 'boolean') {
        bEnableEventBubbling = bAllowPreventDefault;
        bAllowPreventDefault = mParameters;
    }
    var oProvider = this, bPreventDefault = false, aEventListeners, oEvent, i, iL, oInfo;
    do {
        aEventListeners = oProvider.mEventRegistry[sEventId];
        if (Array.isArray(aEventListeners)) {
            aEventListeners = aEventListeners.slice();
            oEvent = oEvent || this.oEventPool.borrowObject(sEventId, this, mParameters);
            for (i = 0, iL = aEventListeners.length; i < iL; i++) {
                oInfo = aEventListeners[i];
                oInfo.fFunction.call(oInfo.oListener || oProvider, oEvent, oInfo.oData);
            }
            bEnableEventBubbling = bEnableEventBubbling && !oEvent.bCancelBubble;
        }
        oProvider = oProvider.getEventingParent();
    } while (bEnableEventBubbling && oProvider);
    if (oEvent) {
        bPreventDefault = oEvent.bPreventDefault;
        this.oEventPool.returnObject(oEvent);
    }
    return bAllowPreventDefault ? !bPreventDefault : this;
};
EventProvider.prototype.hasListeners = function (sEventId) {
    return !!this.mEventRegistry[sEventId];
};
EventProvider.getEventList = function (oEventProvider) {
    return oEventProvider.mEventRegistry;
};
EventProvider.hasListener = function (oEventProvider, sEventId, fnFunction, oListener) {
    assert(typeof sEventId === 'string' && sEventId, 'EventProvider.hasListener: sEventId must be a non-empty string');
    assert(typeof fnFunction === 'function', 'EventProvider.hasListener: fnFunction must be a function');
    assert(!oListener || typeof oListener === 'object', 'EventProvider.hasListener: oListener must be empty or an object');
    var aEventListeners = oEventProvider && oEventProvider.mEventRegistry[sEventId];
    if (aEventListeners) {
        for (var i = 0, iL = aEventListeners.length; i < iL; i++) {
            if (aEventListeners[i].fFunction === fnFunction && aEventListeners[i].oListener === oListener) {
                return true;
            }
        }
    }
    return false;
};
EventProvider.prototype.getEventingParent = function () {
    return null;
};
EventProvider.prototype.toString = function () {
    if (this.getMetadata) {
        return 'EventProvider ' + this.getMetadata().getName();
    } else {
        return 'EventProvider';
    }
};
EventProvider.prototype.destroy = function () {
    this.mEventRegistry = {};
    BaseObject.prototype.destroy.apply(this, arguments);
};
export default EventProvider;