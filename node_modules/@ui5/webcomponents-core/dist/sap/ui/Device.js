const Device = {};
const OS = {
  "WINDOWS": "win",
  "MACINTOSH": "mac",
  "IOS": "iOS",
  "ANDROID": "Android"
};
const _getMobileOS = () => {
  const userAgent = navigator.userAgent;
  let rPlatform, aMatches;
  rPlatform = /\(([a-zA-Z ]+);\s(?:[U]?[;]?)([\D]+)((?:[\d._]*))(?:.*[\)][^\d]*)([\d.]*)\s/;
  aMatches = userAgent.match(rPlatform);
  if (aMatches) {
    var rAppleDevices = /iPhone|iPad|iPod/;
    if (aMatches[0].match(rAppleDevices)) {
      aMatches[3] = aMatches[3].replace(/_/g, ".");
      return {
        "name": OS.IOS,
        "versionStr": aMatches[3]
      };
    }
    if (aMatches[2].match(/Android/)) {
      aMatches[2] = aMatches[2].replace(/\s/g, "");
      return {
        "name": OS.ANDROID,
        "versionStr": aMatches[3]
      };
    }
  }
  rPlatform = /\((Android)[\s]?([\d][.\d]*)?;.*Firefox\/[\d][.\d]*/;
  aMatches = userAgent.match(rPlatform);
  if (aMatches) {
    return {
      "name": OS.ANDROID,
      "versionStr": aMatches.length === 3 ? aMatches[2] : ""
    };
  }
};
const _getDesktopOS = () => {
  const sPlatform = navigator.platform;
  if (sPlatform.indexOf("Win") !== -1) {
    const rVersion = /Windows NT (\d+).(\d)/i;
    const uaResult = navigator.userAgent.match(rVersion);
    return {
      "name": OS.WINDOWS,
      "versionStr": uaResult[1]
    };
  }
  if (sPlatform.indexOf("Mac") !== -1) {
    return {
      "name": OS.MACINTOSH,
      "versionStr": ""
    };
  }
  return null;
};
const _getOS = () => {
  return _getMobileOS() || _getDesktopOS();
};
const _setOS = () => {
  if (Device.os) {
    return;
  }
  Device.os = _getOS() || ({});
  Device.os.OS = OS;
  Device.os.version = Device.os.versionStr ? parseFloat(Device.os.versionStr) : -1;
  if (Device.os.name) {
    for (let name in OS) {
      if (OS[name] === Device.os.name) {
        Device.os[name.toLowerCase()] = true;
      }
    }
  }
};
const getOS = () => {
  if (!Device.os) {
    _setOS();
  }
  return Device.os;
};
const isAndroid = () => {
  if (!Device.os) {
    _setOS();
  }
  return !!Device.os.android;
};
const BROWSER = {
  "INTERNET_EXPLORER": "ie",
  "EDGE": "ed",
  "FIREFOX": "ff",
  "CHROME": "cr",
  "SAFARI": "sf",
  "ANDROID": "an"
};
const _calcBrowser = () => {
  const sUserAgent = navigator.userAgent.toLowerCase();
  const rwebkit = /(webkit)[ \/]([\w.]+)/;
  const rmsie = /(msie) ([\w.]+)/;
  const rmsie11 = /(trident)\/[\w.]+;.*rv:([\w.]+)/;
  const redge = /(edge)[ \/]([\w.]+)/;
  const rmozilla = /(mozilla)(?:.*? rv:([\w.]+))?/;
  const browserMatch = redge.exec(sUserAgent) || rmsie11.exec(sUserAgent) || rwebkit.exec(sUserAgent) || rmsie.exec(sUserAgent) || sUserAgent.indexOf("compatible") < 0 && rmozilla.exec(sUserAgent) || [];
  const oRes = {
    browser: browserMatch[1] || "",
    version: browserMatch[2] || "0"
  };
  oRes[oRes.browser] = true;
  return oRes;
};
const _getBrowser = () => {
  const oBrowser = _calcBrowser();
  const sUserAgent = navigator.userAgent;
  const oNavigator = window.navigator;
  let oExpMobile;
  let oResult;
  if (oBrowser.mozilla) {
    oExpMobile = /Mobile/;
    if (sUserAgent.match(/Firefox\/(\d+\.\d+)/)) {
      var fVersion = parseFloat(RegExp.$1);
      oResult = {
        name: BROWSER.FIREFOX,
        versionStr: "" + fVersion,
        version: fVersion,
        mozilla: true,
        mobile: oExpMobile.test(sUserAgent)
      };
    } else {
      oResult = {
        mobile: oExpMobile.test(sUserAgent),
        mozilla: true,
        version: -1
      };
    }
  } else if (oBrowser.webkit) {
    var regExpWebkitVersion = sUserAgent.toLowerCase().match(/webkit[\/]([\d.]+)/);
    var webkitVersion;
    if (regExpWebkitVersion) {
      webkitVersion = regExpWebkitVersion[1];
    }
    oExpMobile = /Mobile/;
    var aChromeMatch = sUserAgent.match(/(Chrome|CriOS)\/(\d+\.\d+).\d+/);
    var aFirefoxMatch = sUserAgent.match(/FxiOS\/(\d+\.\d+)/);
    var aAndroidMatch = sUserAgent.match(/Android .+ Version\/(\d+\.\d+)/);
    if (aChromeMatch || aFirefoxMatch || aAndroidMatch) {
      var sName, sVersion, bMobile;
      if (aChromeMatch) {
        sName = BROWSER.CHROME;
        bMobile = oExpMobile.test(sUserAgent);
        sVersion = parseFloat(aChromeMatch[2]);
      } else if (aFirefoxMatch) {
        sName = BROWSER.FIREFOX;
        bMobile = true;
        sVersion = parseFloat(aFirefoxMatch[1]);
      } else if (aAndroidMatch) {
        sName = BROWSER.ANDROID;
        bMobile = oExpMobile.test(sUserAgent);
        sVersion = parseFloat(aAndroidMatch[1]);
      }
      oResult = {
        name: sName,
        mobile: bMobile,
        versionStr: "" + sVersion,
        version: sVersion,
        webkit: true,
        webkitVersion: webkitVersion
      };
    } else {
      var oExp = /(Version|PhantomJS)\/(\d+\.\d+).*Safari/;
      var bStandalone = oNavigator.standalone;
      if (oExp.test(sUserAgent)) {
        var aParts = oExp.exec(sUserAgent);
        var fVersion = parseFloat(aParts[2]);
        oResult = {
          name: BROWSER.SAFARI,
          versionStr: "" + fVersion,
          fullscreen: false,
          webview: false,
          version: fVersion,
          mobile: oExpMobile.test(sUserAgent),
          webkit: true,
          webkitVersion: webkitVersion,
          phantomJS: aParts[1] === "PhantomJS"
        };
      } else if ((/iPhone|iPad|iPod/).test(sUserAgent) && !(/CriOS/).test(sUserAgent) && !(/FxiOS/).test(sUserAgent) && (bStandalone === true || bStandalone === false)) {
        oResult = {
          name: BROWSER.SAFARI,
          version: -1,
          fullscreen: bStandalone,
          webview: !bStandalone,
          mobile: oExpMobile.test(sUserAgent),
          webkit: true,
          webkitVersion: webkitVersion
        };
      } else {
        oResult = {
          mobile: oExpMobile.test(sUserAgent),
          webkit: true,
          webkitVersion: webkitVersion,
          version: -1
        };
      }
    }
  } else if (oBrowser.msie || oBrowser.trident) {
    var fVersion = parseFloat(oBrowser.version);
    oResult = {
      name: BROWSER.INTERNET_EXPLORER,
      versionStr: "" + fVersion,
      version: fVersion,
      msie: true,
      mobile: false
    };
  } else if (oBrowser.edge) {
    var fVersion = fVersion = parseFloat(oBrowser.version);
    oResult = {
      name: BROWSER.EDGE,
      versionStr: "" + fVersion,
      version: fVersion,
      edge: true
    };
  } else {
    oResult = {
      name: "",
      versionStr: "",
      version: -1,
      mobile: false
    };
  }
  return oResult;
};
const _setBrowser = () => {
  Device.browser = _getBrowser();
  Device.browser.BROWSER = BROWSER;
  if (Device.browser.name) {
    for (var b in BROWSER) {
      if (BROWSER[b] === Device.browser.name) {
        Device.browser[b.toLowerCase()] = true;
      }
    }
  }
};
const getBrowser = () => {
  if (!Device.browser) {
    _setBrowser();
  }
  return Device.browser;
};
const isIE = () => {
  if (!Device.browser) {
    _setBrowser();
  }
  return !!Device.browser.msie;
};
const isEdge = () => {
  if (!Device.browser) {
    _setBrowser();
  }
  return !!Device.browser.edge;
};
const isChrome = () => {
  if (!Device.browser) {
    _setBrowser();
  }
  return !!Device.browser.chrome;
};
const isFF = () => {
  if (!Device.browser) {
    _setBrowser();
  }
  return !!Device.browser.firefox;
};
const isSafari = () => {
  if (!Device.browser) {
    _setBrowser();
  }
  return !!Device.browser.safari;
};
const _setSupport = () => {
  if (Device.support) {
    return;
  }
  if (!Device.browser) {
    _setBrowser();
  }
  Device.support = {};
  Device.support.touch = !!(("ontouchstart" in window) || navigator.maxTouchPoints > 0 || window.DocumentTouch && document instanceof window.DocumentTouch);
};
const supportTouch = () => {
  if (!Device.support) {
    _setSupport();
  }
  return !!Device.support.touch;
};
const SYSTEMTYPE = {
  "TABLET": "tablet",
  "PHONE": "phone",
  "DESKTOP": "desktop",
  "COMBI": "combi"
};
const _isTablet = () => {
  const sUserAgent = navigator.userAgent;
  if (Device.os.name === Device.os.OS.IOS) {
    return (/ipad/i).test(sUserAgent);
  } else {
    if (supportTouch()) {
      if (Device.os.windows && Device.os.version >= 8) {
        return true;
      }
      if (Device.browser.chrome && Device.os.android && Device.os.version >= 4.4) {
        return !(/Mobile Safari\/[.0-9]+/).test(sUserAgent);
      } else {
        let densityFactor = window.devicePixelRatio ? window.devicePixelRatio : 1;
        if (Device.os.android && Device.browser.webkit && parseFloat(Device.browser.webkitVersion) > 537.1) {
          densityFactor = 1;
        }
        const bTablet = Math.min(window.screen.width / densityFactor, window.screen.height / densityFactor) >= 600;
        return bTablet;
      }
    } else {
      const bAndroidPhone = (/(?=android)(?=.*mobile)/i).test(sUserAgent);
      return Device.browser.msie && sUserAgent.indexOf("Touch") !== -1 || Device.os.android && !bAndroidPhone;
    }
  }
};
const _getSystem = () => {
  const bTabletDetected = _isTablet();
  const isWin8Upwards = Device.os.windows && Device.os.version >= 8;
  const oSystem = {};
  oSystem.tablet = !!((Device.support.touch || isWin8Upwards) && bTabletDetected);
  oSystem.phone = !!(Device.os.windows_phone || Device.support.touch && !bTabletDetected);
  oSystem.desktop = !!(!oSystem.tablet && !oSystem.phone || isWin8Upwards);
  oSystem.combi = oSystem.desktop && oSystem.tablet;
  oSystem.SYSTEMTYPE = SYSTEMTYPE;
  return oSystem;
};
const _setSystem = () => {
  _setSupport();
  _setOS();
  Device.system = {};
  Device.system = _getSystem();
  if (Device.system.tablet || Device.system.phone) {
    Device.browser.mobile = true;
  }
};
const getSystem = () => {
  if (!Device.system) {
    _setSystem();
  }
  return Device.system;
};
const isDesktop = () => {
  if (!Device.system) {
    _setSystem();
  }
  return Device.system.desktop;
};
const isTablet = () => {
  if (!Device.system) {
    _setSystem();
  }
  return Device.system.tablet;
};
const isPhone = () => {
  if (!Device.system) {
    _setSystem();
  }
  return Device.system.phone;
};
const isMobile = () => {
  if (!Device.system) {
    _setSystem();
  }
  return Device.browser.mobile;
};
export {isIE, isEdge, isChrome, isFF, isSafari, isMobile, isDesktop, isTablet, isPhone, isAndroid, getOS, getSystem, getBrowser, supportTouch};
