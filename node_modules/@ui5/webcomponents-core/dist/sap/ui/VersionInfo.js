import LoaderExtensions from '../base/util/LoaderExtensions.js';
var VersionInfo = {};
VersionInfo.load = function (mOptions) {
    mOptions = mOptions || {};
    mOptions.async = true;
    return VersionInfo._load(mOptions);
};
var oVersionInfoPromise = null;
VersionInfo._load = function (mOptions) {
    if (typeof mOptions !== 'object') {
        mOptions = { library: mOptions };
    }
    mOptions.async = mOptions.async === true;
    mOptions.failOnError = mOptions.failOnError !== false;
    if (!sap.ui.versioninfo) {
        if (mOptions.async && oVersionInfoPromise instanceof Promise) {
            return oVersionInfoPromise.then(function () {
                return VersionInfo._load(mOptions);
            });
        }
        var fnHandleSuccess = function (oVersionInfo) {
            oVersionInfoPromise = null;
            if (oVersionInfo === null) {
                return undefined;
            }
            sap.ui.versioninfo = oVersionInfo;
            return VersionInfo._load(mOptions);
        };
        var fnHandleError = function (oError) {
            oVersionInfoPromise = null;
            throw oError;
        };
        var vReturn = LoaderExtensions.loadResource('sap-ui-version.json', {
            async: mOptions.async,
            failOnError: mOptions.async || mOptions.failOnError
        });
        if (vReturn instanceof Promise) {
            oVersionInfoPromise = vReturn;
            return vReturn.then(fnHandleSuccess, fnHandleError);
        } else {
            return fnHandleSuccess(vReturn);
        }
    } else {
        var oResult;
        if (typeof mOptions.library !== 'undefined') {
            var aLibs = sap.ui.versioninfo.libraries;
            if (aLibs) {
                for (var i = 0, l = aLibs.length; i < l; i++) {
                    if (aLibs[i].name === mOptions.library) {
                        oResult = aLibs[i];
                        break;
                    }
                }
            }
        } else {
            oResult = sap.ui.versioninfo;
        }
        return mOptions.async ? Promise.resolve(oResult) : oResult;
    }
};
export default VersionInfo;