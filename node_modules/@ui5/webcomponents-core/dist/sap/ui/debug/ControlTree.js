import EventProvider from '../base/EventProvider.js';
import Element from '../core/Element.js';
import UIArea from '../core/UIArea.js';
import Highlighter from './Highlighter.js';
import getOwnerWindow from '../dom/getOwnerWindow.js';
import Log from '../../base/Log.js';
import jQuery from '../thirdparty/jquery.js';
var ControlTree = EventProvider.extend('sap.ui.debug.ControlTree', {
    constructor: function (oCore, oWindow, oParentDomRef, bRunsEmbedded) {
        EventProvider.apply(this, arguments);
        this.oWindow = oWindow;
        this.oDocument = oWindow.document;
        this.oCore = oCore;
        this.oSelectedNode = null;
        this.oParentDomRef = oParentDomRef;
        this.oSelectionHighlighter = new Highlighter('sap-ui-testsuite-SelectionHighlighter');
        this.oHoverHighlighter = new Highlighter('sap-ui-testsuite-HoverHighlighter', true, '#c8f', 1);
        var that = this;
        jQuery(oParentDomRef).bind('click', function (evt) {
            that.onclick(evt);
        }).bind('mouseover', function (evt) {
            that.onmouseover(evt);
        }).bind('mouseout', function (evt) {
            that.onmouseout(evt);
        });
        this.enableInplaceControlSelection();
        this.oCore.attachUIUpdated(this.renderDelayed, this);
        this.sSelectedNodeId = '';
        this.sResourcePath = bRunsEmbedded ? sap.ui.require.toUrl('') + '/' : window.top.testfwk.sResourceRoot || '../';
        this.sTestResourcePath = this.sResourcePath + '../test-resources/';
        this.sSpaceUrl = this.sResourcePath + 'sap/ui/debug/images/space.gif';
        this.sMinusUrl = this.sResourcePath + 'sap/ui/debug/images/minus.gif';
        this.sPlusUrl = this.sResourcePath + 'sap/ui/debug/images/plus.gif';
        this.sLinkUrl = this.sResourcePath + 'sap/ui/debug/images/link.gif';
    }
});
ControlTree.M_EVENTS = { SELECT: 'SELECT' };
ControlTree.prototype.exit = function () {
    jQuery(document).unbind();
    jQuery(this.oParentDomRef).unbind();
};
ControlTree.prototype.renderDelayed = function () {
    if (this.oTimer) {
        this.oWindow.jQuery.sap.clearDelayedCall(this.oTimer);
    }
    this.oTimer = this.oWindow.jQuery.sap.delayedCall(0, this, 'render');
};
ControlTree.prototype.render = function () {
    var oDomRef = this.oParentDomRef;
    var oUIArea = null, oUIAreas = this.oCore.mUIAreas;
    oDomRef.innerHTML = '';
    for (var i in oUIAreas) {
        var oUIArea = oUIAreas[i], oDomNode = this.createTreeNodeDomRef(oUIArea.getId(), 0, 'UIArea', this.sTestResourcePath + 'sap/ui/core/images/controls/sap.ui.core.UIArea.gif');
        oDomRef.appendChild(oDomNode);
        var aRootControls = oUIArea.getContent();
        for (var i = 0, l = aRootControls.length; i < l; i++) {
            this.renderNode(oDomRef, aRootControls[i], 1);
        }
    }
};
ControlTree.prototype.createTreeNodeDomRef = function (sId, iLevel, sType, sIcon) {
    var oDomNode = this.oParentDomRef.ownerDocument.createElement('DIV');
    oDomNode.setAttribute('id', 'sap-debug-controltree-' + sId);
    var sShortType = sType.substring(sType.lastIndexOf('.') > -1 ? sType.lastIndexOf('.') + 1 : 0);
    oDomNode.innerHTML = '<img style=\'height:12px;width:12px;display:none\' src=\'' + this.sSpaceUrl + '\' align=\'absmiddle\'/><img style=\'height:16px;width:16px\' src=\'' + sIcon + '\' align=\'absmiddle\'/>&nbsp;<span>' + sShortType + ' - ' + sId + '</span>';
    oDomNode.style.overflow = 'hidden';
    oDomNode.style.whiteSpace = 'nowrap';
    oDomNode.style.textOverflow = 'ellipsis';
    oDomNode.style.paddingLeft = iLevel * 16 + 'px';
    oDomNode.style.height = '20px';
    oDomNode.style.cursor = 'default';
    oDomNode.setAttribute('sap-type', sType);
    oDomNode.setAttribute('sap-id', sId);
    oDomNode.setAttribute('sap-expanded', 'true');
    oDomNode.setAttribute('sap-level', '' + iLevel);
    oDomNode.title = sType + ' - ' + sId;
    return oDomNode;
};
ControlTree.prototype.createLinkNode = function (oParentRef, sId, iLevel, sType) {
    var oDomNode = this.oParentDomRef.ownerDocument.createElement('DIV');
    oDomNode.setAttribute('id', 'sap-debug-controltreelink-' + sId);
    var sShortType = sType ? sType.substring(sType.lastIndexOf('.') > -1 ? sType.lastIndexOf('.') + 1 : 0) : '';
    oDomNode.innerHTML = '<img style=\'height:12px;width:12px;display:none\' src=\'' + this.sSpaceUrl + '\' align=\'absmiddle\'/><img style=\'height:12px;width:12px\' src=\'' + this.sLinkUrl + '\' align=\'absmiddle\'/>&nbsp;<span style=\'color:#888;border-bottom:1px dotted #888;\'>' + (sShortType ? sShortType + ' - ' : '') + sId + '</span>';
    oDomNode.style.overflow = 'hidden';
    oDomNode.style.whiteSpace = 'nowrap';
    oDomNode.style.textOverflow = 'ellipsis';
    oDomNode.style.paddingLeft = iLevel * 16 + 'px';
    oDomNode.style.height = '20px';
    oDomNode.style.cursor = 'default';
    oDomNode.setAttribute('sap-type', 'Link');
    oDomNode.setAttribute('sap-id', sId);
    oDomNode.setAttribute('sap-expanded', 'true');
    oDomNode.setAttribute('sap-level', '' + iLevel);
    oDomNode.title = 'Association to \'' + sId + '\'';
    oParentRef.appendChild(oDomNode);
    return oDomNode;
};
ControlTree.prototype.renderNode = function (oDomRef, oControl, iLevel) {
    if (!oControl) {
        return;
    }
    var oMetadata = oControl.getMetadata();
    var sIcon = this.sTestResourcePath + oMetadata.getLibraryName().replace(/\./g, '/') + '/images/controls/' + oMetadata.getName() + '.gif';
    var oDomNode = this.createTreeNodeDomRef(oControl.getId(), iLevel, oMetadata.getName(), sIcon);
    oDomRef.appendChild(oDomNode);
    var bRequiresExpanding = false;
    if (oControl.mAggregations) {
        for (var n in oControl.mAggregations) {
            bRequiresExpanding = true;
            var oAggregation = oControl.mAggregations[n];
            if (oAggregation && oAggregation.length) {
                for (var i = 0; i < oAggregation.length; i++) {
                    var o = oAggregation[i];
                    if (o instanceof Element) {
                        this.renderNode(oDomRef, oAggregation[i], iLevel + 1);
                    }
                }
            } else if (oAggregation instanceof Element) {
                this.renderNode(oDomRef, oAggregation, iLevel + 1);
            }
        }
    }
    if (oControl.mAssociations) {
        for (var n in oControl.mAssociations) {
            bRequiresExpanding = true;
            var oAssociation = oControl.mAssociations[n];
            if (Array.isArray(oAssociation)) {
                for (var i = 0; i < oAssociation.length; i++) {
                    var o = oAssociation[i];
                    if (typeof o === 'string') {
                        this.createLinkNode(oDomRef, o, iLevel + 1);
                    }
                }
            } else if (typeof oAssociation === 'string') {
                this.createLinkNode(oDomRef, oAssociation, iLevel + 1);
            }
        }
    }
    if (bRequiresExpanding) {
        var oExpandImage = oDomNode.getElementsByTagName('IMG')[0];
        oExpandImage.src = this.sMinusUrl;
        oExpandImage.style.display = '';
    }
};
ControlTree.prototype.onclick = function (oEvent) {
    var oSource = oEvent.target;
    if (oSource.tagName == 'IMG') {
        var oParent = oSource.parentNode, iLevel = parseInt(oParent.getAttribute('sap-level')), oNextNode = oParent.nextSibling, bExpanded = oParent.getAttribute('sap-expanded') == 'true';
        oSource = oParent.firstChild;
        if (oNextNode) {
            var iNextLevel = parseInt(oNextNode.getAttribute('sap-level'));
            while (oNextNode && iNextLevel > iLevel) {
                var oExpandImage = oNextNode.getElementsByTagName('IMG')[0];
                if (bExpanded) {
                    oNextNode.style.display = 'none';
                    oNextNode.setAttribute('sap-expanded', 'false');
                    if (oExpandImage && oExpandImage.src !== this.sSpaceUrl) {
                        oExpandImage.src = this.sPlusUrl;
                    }
                } else {
                    oNextNode.style.display = 'block';
                    oNextNode.setAttribute('sap-expanded', 'true');
                    if (oExpandImage && oExpandImage.src !== this.sSpaceUrl) {
                        oExpandImage.src = this.sMinusUrl;
                    }
                }
                oNextNode = oNextNode.nextSibling;
                if (oNextNode) {
                    iNextLevel = parseInt(oNextNode.getAttribute('sap-level'));
                }
            }
        }
        if (bExpanded) {
            oSource.src = this.sPlusUrl;
            oParent.setAttribute('sap-expanded', 'false');
        } else {
            oSource.src = this.sMinusUrl;
            oParent.setAttribute('sap-expanded', 'true');
        }
    } else {
        if (oSource.tagName != 'SPAN') {
            oSource = oSource.getElementsByTagName('SPAN')[0];
        }
        var oParent = oSource.parentNode, sId = oParent.getAttribute('sap-id'), oElement = this.oCore.byId(sId), sNodeId = oParent.getAttribute('sap-type') === 'Link' ? 'sap-debug-controltree-' + sId : oParent.id;
        this.oSelectionHighlighter.hide();
        if (oElement instanceof Element) {
            this.oSelectionHighlighter.highlight(oElement.getDomRef());
            this.oHoverHighlighter.hide();
        }
        this.deselectNode(this.sSelectedNodeId);
        this.selectNode(sNodeId);
    }
};
ControlTree.prototype.onmouseover = function (oEvent) {
    var oSource = oEvent.target;
    if (oSource.tagName == 'SPAN') {
        this.oHoverHighlighter.highlight(this.getTargetDomRef(oSource.parentNode));
    }
};
ControlTree.prototype.onmouseout = function (oEvent) {
    var oSource = oEvent.target;
    if (oSource.tagName == 'SPAN') {
        if (this.getTargetDomRef(oSource.parentNode)) {
            this.oHoverHighlighter.hide();
        }
    }
};
ControlTree.prototype.selectNode = function (sId) {
    if (!sId) {
        return;
    }
    var oDomRef = (getOwnerWindow(this.oParentDomRef) || window).document.getElementById(sId);
    if (!oDomRef) {
        Log.warning('Control with Id \'' + sId.substring(22) + '\' not found in tree');
        return;
    }
    var sControlId = oDomRef.getAttribute('sap-id');
    var oSpan = oDomRef.getElementsByTagName('SPAN')[0];
    oSpan.style.backgroundColor = '#000066';
    oSpan.style.color = '#FFFFFF';
    this.sSelectedNodeId = sId;
    this.fireEvent(ControlTree.M_EVENTS.SELECT, {
        id: sId,
        controlId: sControlId
    });
};
ControlTree.prototype.deselectNode = function (sId) {
    if (!sId) {
        return;
    }
    var oDomRef = (getOwnerWindow(this.oParentDomRef) || window).document.getElementById(sId);
    var oSpan = oDomRef.getElementsByTagName('SPAN')[0];
    oSpan.style.backgroundColor = 'transparent';
    oSpan.style.color = '#000000';
    this.sSelectedNodeId = sId;
};
ControlTree.prototype.getTargetDomRef = function (oTreeNodeDomRef) {
    var sType = oTreeNodeDomRef.getAttribute('sap-type'), sId = oTreeNodeDomRef.getAttribute('sap-id'), oSomething = sType === 'UIArea' ? this.oCore.getUIArea(sId) : this.oCore.byId(sId);
    while (oSomething instanceof Element) {
        var oDomRef = oSomething.getDomRef();
        if (oDomRef) {
            return oDomRef;
        }
        oSomething = oSomething.getParent();
    }
    if (oSomething instanceof UIArea) {
        return oSomething.getRootNode();
    }
};
ControlTree.prototype.enableInplaceControlSelection = function () {
    var that = this;
    jQuery(document).bind('mouseover', function (oEvt) {
        that.selectControlInTree(oEvt);
    });
};
ControlTree.prototype.selectControlInTree = function (oEvt) {
    if (oEvt) {
        if (oEvt.ctrlKey && oEvt.shiftKey && !oEvt.altKey) {
            var oControl = oEvt.srcElement || oEvt.target;
            while (oControl && (!oControl.id || !this.oCore.getControl(oControl.id))) {
                oControl = oControl.parentNode;
            }
            if (oControl && oControl.id && this.oCore.getControl(oControl.id)) {
                this.oHoverHighlighter.highlight(oControl);
            } else {
                this.oHoverHighlighter.hide();
            }
        } else {
            this.oHoverHighlighter.hide();
        }
    }
};
export default ControlTree;