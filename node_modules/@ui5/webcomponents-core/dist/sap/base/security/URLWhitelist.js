import assert from '../assert.js';
var oURLWhitelist = {};
function URLWhitelistEntry(protocol, host, port, path) {
    if (protocol) {
        this.protocol = protocol.toUpperCase();
    }
    if (host) {
        this.host = host.toUpperCase();
    }
    this.port = port;
    this.path = path;
}
var aWhitelist = [];
oURLWhitelist.clear = function () {
    aWhitelist.splice(0, aWhitelist.length);
};
oURLWhitelist.add = function (protocol, host, port, path) {
    var oEntry = new URLWhitelistEntry(protocol, host, port, path);
    var iIndex = aWhitelist.length;
    aWhitelist[iIndex] = oEntry;
};
oURLWhitelist.delete = function (oEntry) {
    aWhitelist.splice(aWhitelist.indexOf(oEntry), 1);
};
oURLWhitelist.entries = function () {
    return aWhitelist.slice();
};
oURLWhitelist.validate = function (sUrl) {
    var result = /^(?:([^:\/?#]+):)?((?:\/\/((?:\[[^\]]+\]|[^\/?#:]+))(?::([0-9]+))?)?([^?#]*))(?:\?([^#]*))?(?:#(.*))?$/.exec(sUrl);
    if (!result) {
        return false;
    }
    var sProtocol = result[1], sBody = result[2], sHost = result[3], sPort = result[4], sPath = result[5], sQuery = result[6], sHash = result[7];
    var rCheckPath = /^([a-z0-9-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*$/i;
    var rCheckQuery = /^([a-z0-9-._~!$&'()*+,;=:@\/?]|%[0-9a-f]{2})*$/i;
    var rCheckFragment = rCheckQuery;
    var rCheckMail = /^([a-z0-9!$'*+:^_`{|}~-]|%[0-9a-f]{2})+(?:\.([a-z0-9!$'*+:^_`{|}~-]|%[0-9a-f]{2})+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$/i;
    var rCheckIPv4 = /^([0-9]{1,3}\.){3}[0-9]{1,3}$/;
    var rCheckValidIPv4 = /^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$/;
    var rCheckIPv6 = /^\[[^\]]+\]$/;
    var rCheckValidIPv6 = /^\[(((([0-9a-f]{1,4}:){6}|(::([0-9a-f]{1,4}:){5})|(([0-9a-f]{1,4})?::([0-9a-f]{1,4}:){4})|((([0-9a-f]{1,4}:){0,1}[0-9a-f]{1,4})?::([0-9a-f]{1,4}:){3})|((([0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::([0-9a-f]{1,4}:){2})|((([0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:)|((([0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::))(([0-9a-f]{1,4}:[0-9a-f]{1,4})|(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])))|((([0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4})|((([0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::))\]$/i;
    var rCheckHostName = /^([a-z0-9]([a-z0-9\-]*[a-z0-9])?\.)*[a-z0-9]([a-z0-9\-]*[a-z0-9])?$/i;
    if (sProtocol) {
        sProtocol = sProtocol.toUpperCase();
        if (aWhitelist.length <= 0) {
            if (!/^(https?|ftp)/i.test(sProtocol)) {
                return false;
            }
        }
    }
    if (sHost) {
        if (rCheckIPv4.test(sHost)) {
            if (!rCheckValidIPv4.test(sHost)) {
                return false;
            }
        } else if (rCheckIPv6.test(sHost)) {
            if (!rCheckValidIPv6.test(sHost)) {
                return false;
            }
        } else if (!rCheckHostName.test(sHost)) {
            return false;
        }
        sHost = sHost.toUpperCase();
    }
    if (sPath) {
        if (sProtocol === 'MAILTO') {
            var aAddresses = sBody.split(',');
            for (var i = 0; i < aAddresses.length; i++) {
                if (!rCheckMail.test(aAddresses[i])) {
                    return false;
                }
            }
        } else {
            var aComponents = sPath.split('/');
            for (var i = 0; i < aComponents.length; i++) {
                if (!rCheckPath.test(aComponents[i])) {
                    return false;
                }
            }
        }
    }
    if (sQuery) {
        if (!rCheckQuery.test(sQuery)) {
            return false;
        }
    }
    if (sHash) {
        if (!rCheckFragment.test(sHash)) {
            return false;
        }
    }
    if (aWhitelist.length > 0) {
        var bFound = false;
        for (var i = 0; i < aWhitelist.length; i++) {
            assert(aWhitelist[i] instanceof URLWhitelistEntry, 'whitelist entry type wrong');
            if (!sProtocol || !aWhitelist[i].protocol || sProtocol == aWhitelist[i].protocol) {
                var bOk = false;
                if (sHost && aWhitelist[i].host && /^\*/.test(aWhitelist[i].host)) {
                    var sHostEscaped = aWhitelist[i].host.slice(1).replace(/[-[\]{}()*+?.,\\^$|#\s]/g, '\\$&');
                    var rFilter = RegExp(sHostEscaped + '$');
                    if (rFilter.test(sHost)) {
                        bOk = true;
                    }
                } else if (!sHost || !aWhitelist[i].host || sHost == aWhitelist[i].host) {
                    bOk = true;
                }
                if (bOk) {
                    if (!sHost && !sPort || !aWhitelist[i].port || sPort == aWhitelist[i].port) {
                        if (aWhitelist[i].path && /\*$/.test(aWhitelist[i].path)) {
                            var sPathEscaped = aWhitelist[i].path.slice(0, -1).replace(/[-[\]{}()*+?.,\\^$|#\s]/g, '\\$&');
                            var rFilter = RegExp('^' + sPathEscaped);
                            if (rFilter.test(sPath)) {
                                bFound = true;
                            }
                        } else if (!aWhitelist[i].path || sPath == aWhitelist[i].path) {
                            bFound = true;
                        }
                    }
                }
            }
            if (bFound) {
                break;
            }
        }
        if (!bFound) {
            return false;
        }
    }
    return true;
};
export default oURLWhitelist;