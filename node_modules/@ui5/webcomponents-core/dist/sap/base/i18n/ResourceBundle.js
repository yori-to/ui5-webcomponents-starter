import assert from '../assert.js';
import Log from '../Log.js';
import formatMessage from '../strings/formatMessage.js';
import Properties from '../util/Properties.js';
var rLocale = /^((?:[A-Z]{2,3}(?:-[A-Z]{3}){0,3})|[A-Z]{4}|[A-Z]{5,8})(?:-([A-Z]{4}))?(?:-([A-Z]{2}|[0-9]{3}))?((?:-[0-9A-Z]{5,8}|-[0-9][0-9A-Z]{3})*)((?:-[0-9A-WYZ](?:-[0-9A-Z]{2,8})+)*)(?:-(X(?:-[0-9A-Z]{1,8})+))?$/i;
var M_ISO639_NEW_TO_OLD = {
    'he': 'iw',
    'yi': 'ji',
    'id': 'in',
    'sr': 'sh'
};
var M_ISO639_OLD_TO_NEW = {
    'iw': 'he',
    'ji': 'yi',
    'in': 'id',
    'sh': 'sr'
};
var M_SUPPORTABILITY_TO_XS = {
    'en_US_saptrc': '1Q',
    'en_US_sappsd': '2Q'
};
var rSAPSupportabilityLocales = /(?:^|-)(saptrc|sappsd)(?:-|$)/i;
function normalize(sLocale) {
    var m;
    if (typeof sLocale === 'string' && (m = rLocale.exec(sLocale.replace(/_/g, '-')))) {
        var sLanguage = m[1].toLowerCase();
        sLanguage = M_ISO639_NEW_TO_OLD[sLanguage] || sLanguage;
        var sScript = m[2] ? m[2].toLowerCase() : undefined;
        var sRegion = m[3] ? m[3].toUpperCase() : undefined;
        var sVariants = m[4] ? m[4].slice(1) : undefined;
        var sPrivate = m[6];
        if (sPrivate && (m = rSAPSupportabilityLocales.exec(sPrivate)) || sVariants && (m = rSAPSupportabilityLocales.exec(sVariants))) {
            return 'en_US_' + m[1].toLowerCase();
        }
        if (sLanguage === 'zh' && !sRegion) {
            if (sScript === 'hans') {
                sRegion = 'CN';
            } else if (sScript === 'hant') {
                sRegion = 'TW';
            }
        }
        return sLanguage + (sRegion ? '_' + sRegion + (sVariants ? '_' + sVariants.replace('-', '_') : '') : '');
    }
}
function defaultLocale() {
    var sLocale;
    if (window.sap && window.sap.ui && sap.ui.getWCCore) {
        sLocale = sap.ui.getWCCore().getConfiguration().getLanguage();
        sLocale = normalize(sLocale);
    }
    return sLocale || 'en';
}
function nextFallbackLocale(sLocale) {
    if (!sLocale) {
        return null;
    }
    if (sLocale === 'zh_HK') {
        return 'zh_TW';
    }
    var p = sLocale.lastIndexOf('_');
    if (p >= 0) {
        return sLocale.slice(0, p);
    }
    return sLocale !== 'en' ? 'en' : '';
}
function convertLocaleToBCP47(sLocale) {
    var m;
    if (typeof sLocale === 'string' && (m = rLocale.exec(sLocale.replace(/_/g, '-')))) {
        var sLanguage = m[1].toLowerCase();
        sLanguage = M_ISO639_OLD_TO_NEW[sLanguage] || sLanguage;
        return sLanguage + (m[3] ? '-' + m[3].toUpperCase() + (m[4] ? '-' + m[4].slice(1).replace('_', '-') : '') : '');
    }
}
var rUrl = /^((?:[^?#]*\/)?[^\/?#]*)(\.[^.\/?#]+)((?:\?([^#]*))?(?:#(.*))?)$/;
var A_VALID_FILE_TYPES = [
    '.properties',
    '.hdbtextbundle'
];
function splitUrl(sUrl) {
    var m = rUrl.exec(sUrl);
    if (!m || A_VALID_FILE_TYPES.indexOf(m[2]) < 0) {
        throw new Error('resource URL \'' + sUrl + '\' has unknown type (should be one of ' + A_VALID_FILE_TYPES.join(',') + ')');
    }
    return {
        url: sUrl,
        prefix: m[1],
        ext: m[2],
        query: m[4],
        hash: m[5] || '',
        suffix: m[2] + (m[3] || '')
    };
}
function ResourceBundle(sUrl, sLocale, bIncludeInfo, bAsync) {
    this.sLocale = this._sNextLocale = normalize(sLocale) || defaultLocale();
    this.oUrlInfo = splitUrl(sUrl);
    this.bIncludeInfo = bIncludeInfo;
    this.aCustomBundles = [];
    this.aPropertyFiles = [];
    this.aLocales = [];
    if (bAsync) {
        var resolveWithThis = function () {
            return this;
        }.bind(this);
        return loadNextPropertiesAsync(this).then(resolveWithThis, resolveWithThis);
    }
    loadNextPropertiesSync(this);
}
ResourceBundle.prototype._enhance = function (oCustomBundle) {
    if (oCustomBundle instanceof ResourceBundle) {
        this.aCustomBundles.push(oCustomBundle);
    } else {
        Log.error('Custom resource bundle is either undefined or not an instanceof sap/base/i18n/ResourceBundle. Therefore this custom resource bundle will be ignored!');
    }
};
ResourceBundle.prototype.getText = function (sKey, aArgs, bIgnoreKeyFallback) {
    var sValue = this._getTextFromProperties(sKey, aArgs);
    if (sValue != null) {
        return sValue;
    }
    sValue = this._getTextFromFallback(sKey, aArgs);
    if (sValue != null) {
        return sValue;
    }
    assert(false, 'could not find any translatable text for key \'' + sKey + '\' in bundle \'' + this.oUrlInfo.url + '\'');
    if (bIgnoreKeyFallback) {
        return undefined;
    } else {
        return this._formatValue(sKey, sKey, aArgs);
    }
};
ResourceBundle.prototype._formatValue = function (sValue, sKey, aArgs) {
    if (typeof sValue === 'string') {
        if (aArgs) {
            sValue = formatMessage(sValue, aArgs);
        }
        if (this.bIncludeInfo) {
            sValue = new String(sValue);
            sValue.originInfo = {
                source: 'Resource Bundle',
                url: this.oUrlInfo.url,
                locale: this.sLocale,
                key: sKey
            };
        }
    }
    return sValue;
};
ResourceBundle.prototype._getTextFromFallback = function (sKey, aArgs) {
    var sValue, i;
    for (i = this.aCustomBundles.length - 1; i >= 0; i--) {
        sValue = this.aCustomBundles[i]._getTextFromFallback(sKey, aArgs);
        if (sValue != null) {
            return sValue;
        }
    }
    while (typeof sValue !== 'string' && this._sNextLocale != null) {
        var oProperties = loadNextPropertiesSync(this);
        if (oProperties) {
            sValue = oProperties.getProperty(sKey);
            if (typeof sValue === 'string') {
                return this._formatValue(sValue, sKey, aArgs);
            }
        }
    }
    return null;
};
ResourceBundle.prototype._getTextFromProperties = function (sKey, aArgs) {
    var sValue = null, i;
    for (i = this.aCustomBundles.length - 1; i >= 0; i--) {
        sValue = this.aCustomBundles[i]._getTextFromProperties(sKey, aArgs);
        if (sValue != null) {
            return sValue;
        }
    }
    for (i = 0; i < this.aPropertyFiles.length; i++) {
        sValue = this.aPropertyFiles[i].getProperty(sKey);
        if (typeof sValue === 'string') {
            return this._formatValue(sValue, sKey, aArgs);
        }
    }
    return null;
};
ResourceBundle.prototype.hasText = function (sKey) {
    return this.aPropertyFiles.length > 0 && typeof this.aPropertyFiles[0].getProperty(sKey) === 'string';
};
function loadNextPropertiesAsync(oBundle) {
    if (oBundle._sNextLocale != null) {
        return tryToLoadNextProperties(oBundle, true).then(function (oProps) {
            return oProps || loadNextPropertiesAsync(oBundle);
        });
    }
    return Promise.resolve(null);
}
function loadNextPropertiesSync(oBundle) {
    while (oBundle._sNextLocale != null) {
        var oProps = tryToLoadNextProperties(oBundle, false);
        if (oProps) {
            return oProps;
        }
    }
    return null;
}
function isSupported(sLocale, aSupportedLocales) {
    return !aSupportedLocales || aSupportedLocales.length === 0 || aSupportedLocales.indexOf(sLocale) >= 0;
}
function tryToLoadNextProperties(oBundle, bAsync) {
    var sLocale = oBundle._sNextLocale;
    oBundle._sNextLocale = nextFallbackLocale(sLocale);
    var aSupportedLanguages = window.sap && window.sap.ui && sap.ui.getWCCore && sap.ui.getWCCore().getConfiguration().getSupportedLanguages();
    if (sLocale != null && isSupported(sLocale, aSupportedLanguages)) {
        var oUrl = oBundle.oUrlInfo, sUrl, mHeaders;
        if (oUrl.ext === '.hdbtextbundle') {
            if (M_SUPPORTABILITY_TO_XS[sLocale]) {
                sUrl = oUrl.prefix + oUrl.suffix + '?' + (oUrl.query ? oUrl.query + '&' : '') + 'sap-language=' + M_SUPPORTABILITY_TO_XS[sLocale] + (oUrl.hash ? '#' + oUrl.hash : '');
            } else {
                sUrl = oUrl.url;
            }
            mHeaders = { 'Accept-Language': convertLocaleToBCP47(sLocale) || '' };
        } else {
            sUrl = oUrl.prefix + (sLocale ? '_' + sLocale : '') + oUrl.suffix;
        }
        var vProperties = Properties.create({
            url: sUrl,
            headers: mHeaders,
            async: !!bAsync,
            returnNullIfMissing: true
        });
        var addProperties = function (oProps) {
            if (oProps) {
                oBundle.aPropertyFiles.push(oProps);
                oBundle.aLocales.push(sLocale);
            }
            return oProps;
        };
        return bAsync ? vProperties.then(addProperties) : addProperties(vProperties);
    }
    return bAsync ? Promise.resolve(null) : null;
}
ResourceBundle.create = function (mParams) {
    mParams = Object.assign({
        url: '',
        locale: undefined,
        includeInfo: false
    }, mParams);
    return new ResourceBundle(mParams.url, mParams.locale, mParams.includeInfo, !!mParams.async);
};
ResourceBundle._getFallbackLocales = function (sLocale, aSupportedLocales) {
    var sTempLocale = normalize(sLocale), aLocales = [];
    while (sTempLocale != null) {
        if (isSupported(sTempLocale, aSupportedLocales)) {
            aLocales.push(sTempLocale);
        }
        sTempLocale = nextFallbackLocale(sTempLocale);
    }
    return aLocales;
};
ResourceBundle.__normalize = normalize;
ResourceBundle.__nextFallbackLocale = nextFallbackLocale;
export default ResourceBundle;