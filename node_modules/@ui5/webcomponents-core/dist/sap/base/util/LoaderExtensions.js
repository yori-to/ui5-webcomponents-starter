import jQuery from '../../ui/thirdparty/jquery.js';
import Log from '../Log.js';
import assert from '../assert.js';
var LoaderExtensions = {};
var FRAGMENT = 'fragment';
var VIEW = 'view';
var KNOWN_SUBTYPES = {
    js: [
        VIEW,
        FRAGMENT,
        'controller',
        'designtime'
    ],
    xml: [
        VIEW,
        FRAGMENT
    ],
    json: [
        VIEW,
        FRAGMENT
    ],
    html: [
        VIEW,
        FRAGMENT
    ]
};
var rTypes;
(function () {
    var s = '';
    for (var sType in KNOWN_SUBTYPES) {
        s = (s ? s + '|' : '') + sType;
    }
    s = '\\.(' + s + ')$';
    rTypes = new RegExp(s);
}());
LoaderExtensions.getKnownSubtypes = function () {
    return KNOWN_SUBTYPES;
};
LoaderExtensions.getAllRequiredModules = function () {
    var aModuleNames = [], mModules = sap.ui.loader._.getAllModules(true), oModule;
    for (var sModuleName in mModules) {
        oModule = mModules[sModuleName];
        if (oModule.ui5 && oModule.state !== -1) {
            aModuleNames.push(oModule.ui5);
        }
    }
    return aModuleNames;
};
LoaderExtensions.loadResource = function (sResourceName, mOptions) {
    var sType, oData, sUrl, oError, oDeferred, iSyncCallBehavior;
    if (typeof sResourceName === 'string') {
        mOptions = mOptions || {};
    } else {
        mOptions = sResourceName || {};
        sResourceName = mOptions.name;
    }
    mOptions = jQuery.extend({
        failOnError: true,
        async: false
    }, mOptions);
    sType = mOptions.dataType;
    if (sType == null && sResourceName) {
        sType = (sType = rTypes.exec(sResourceName || mOptions.url)) && sType[1];
    }
    assert(/^(xml|html|json|text)$/.test(sType), 'type must be one of xml, html, json or text');
    oDeferred = mOptions.async ? new jQuery.Deferred() : null;
    function handleData(d, e) {
        if (d == null && mOptions.failOnError) {
            oError = e || new Error('no data returned for ' + sResourceName);
            if (mOptions.async) {
                oDeferred.reject(oError);
                Log.error(oError);
            }
            return null;
        }
        if (mOptions.async) {
            oDeferred.resolve(d);
        }
        return d;
    }
    function convertData(d) {
        var vConverter = jQuery.ajaxSettings.converters['text ' + sType];
        if (typeof vConverter === 'function') {
            d = vConverter(d);
        }
        return handleData(d);
    }
    oData = sap.ui.loader._.getModuleContent(sResourceName, mOptions.url);
    if (oData != undefined) {
        if (mOptions.async) {
            setTimeout(function () {
                convertData(oData);
            }, 0);
        } else {
            oData = convertData(oData);
        }
    } else {
        iSyncCallBehavior = sap.ui.loader._.getSyncCallBehavior();
        if (!mOptions.async && iSyncCallBehavior) {
            if (iSyncCallBehavior >= 1) {
                Log.error('[nosync] loading resource \'' + (sResourceName || mOptions.url) + '\' with sync XHR');
            } else {
                throw new Error('[nosync] loading resource \'' + (sResourceName || mOptions.url) + '\' with sync XHR');
            }
        }
        jQuery.ajax({
            url: sUrl = mOptions.url || sap.ui.loader._.getResourcePath(sResourceName),
            async: mOptions.async,
            dataType: sType,
            headers: mOptions.headers,
            success: function (data, textStatus, xhr) {
                oData = handleData(data);
            },
            error: function (xhr, textStatus, error) {
                oError = new Error('resource ' + sResourceName + ' could not be loaded from ' + sUrl + '. Check for \'file not found\' or parse errors. Reason: ' + error);
                oError.status = textStatus;
                oError.error = error;
                oError.statusCode = xhr.status;
                oData = handleData(null, oError);
            }
        });
    }
    if (mOptions.async) {
        return Promise.resolve(oDeferred);
    }
    if (oError != null && mOptions.failOnError) {
        throw oError;
    }
    return oData;
};
export default LoaderExtensions;